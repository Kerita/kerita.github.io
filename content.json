[{"title":"关于牙套","date":"2017-08-04T16:00:00.000Z","path":"2017/08/05/about-brace/","text":"关于牙套","tags":[{"name":"健康","slug":"健康","permalink":"https://kerita.github.io/tags/健康/"}]},{"title":"关于《吐槽大会》","date":"2017-08-02T16:00:00.000Z","path":"2017/08/03/about-roast/","text":"几天前在某个地方，或是知乎回答，或是公众号文章，看到关于《吐槽大会》的议论，觉得挺有意思，遂去搜一搜、看一看。 保持好奇心这里顺便说另一个事情，作为一个年轻人，对于新生事物，应该保持好奇心；而不是看一眼，连思考都没有，就下结论。 之前看到朋友圈有几个人对吴亦凡参与的《中国有嘻哈》评价颇高，第一眼看到吴亦凡，觉得质量不会很高，就没有去看。过了好几天，又在朋友圈看到关于《中国有嘻哈》的讨论，这才区看，质量果真不咋地。哈哈哈。当然，这不影响我以后对新生事物保持好奇心。 吴亦凡、鹿晗与黄子韬吴亦凡的黑点在于：一是没有与名气相匹配的作品；二是骗炮门；三是面相不善，不像一个善良的人。相对而言，鹿晗还是挺面善的，但也是没有与名气匹配的作品；黄子韬倒是有跟名气相匹配的表情包，但是也不面善。 吐槽大会介绍扯远了，回到《吐槽大会》。《吐槽大会》第一季已经结束了，总共有十期，每期会有一个主咖，外加6个嘉宾（偶尔也有七个嘉宾），当然还有一个主持人。虽然十期挑着看还没看完，但是已经按耐不住想“吐槽”的心情了。（其实是十一期，第0期周杰场，内容因为太污刚播出就被禁了，节目组也进行了整改，腾讯视频也再没把这一期算进去。） 主持人主持人最重要的就是把整个节目衔接流畅，其次是咬字要清楚；主持这个节目呢，当然还需要幽默，不仅要能拿主咖嘉宾开玩笑，更要能自嘲。 《吐槽大会》的主持人一般都是张绍刚，偶尔也会是王自健。两个人相比，我更喜欢张绍刚。在串联节目、吐字方面、幽默和槽点，张绍刚都更胜一筹。偶尔换换王自健来主持也是不错的，不腻。 主咖主咖也就是每期的主角，节目就是从主持人吐槽主咖开始，然后嘉宾一个接着一个上台继续吐槽，嘉宾间也会互相吐槽，最后主咖反击。这样一个需要接受七个人吐槽的主角：一是必然在普通观众中知名度高，如果找一个八线演员，观众看到本期主咖名字，就没有想看的欲望了；二是要有槽点可以吐，但是槽点一定是要能洗白的，吸毒或者台独之类的槽点就不适合了；三是要幽默，最后的反击越犀利越好。 总共十一期节目，看了周杰、李湘、曹云金、大张伟、唐国强、蔡国庆、小沈阳、薛之谦和凤凰传奇这几期。比较好看的是曹云金、唐国强、和凤凰传奇三期，周杰场其实也还行，但因为是第0期，节目有些粗糙（排名分先后）。这几个主咖，至少都满足了上面的第一、二个条件，幽默程度也都还行，当然最6的还是说相声的曹云金了。 至于其他几个人呢，李湘、薛之谦、蔡国庆、小沈阳的槽点都不是很值得吐，大张伟的槽点是多次歌曲抄袭，这个槽点不适合用来吐槽，洗不白。 嘉宾合适的主咖很重要，会吐槽的嘉宾也很重要。如果有跟主咖关系密切而且又很会吐槽的嘉宾，节目就好看了，唐国强场的王刚就是这么一个嘉宾。吐槽时把握节奏太好了，不仅吐槽唐国强好笑，吐槽嘉宾史航的时候也很好笑，特别是结合史航身世“存在即合理”的哲学梗，。 其他嘉宾除了李诞和池子这两个钉子户，其他嘉宾的吐槽并没有给我留下太深的印象。李诞和池子两个策划人每期都会上，针对嘉宾和主咖的吐槽都还蛮好笑的，池子比李诞幽默感更强，但论节奏感还是比不上老戏骨王刚。因为他们上了太多期，其他嘉宾针对他们的吐槽也变成老生常谈。 结语看完《吐槽大会》后，也有一种想写下一段吐槽自己的文字，但还没有想好如何写，之后补上。 顺便说一句，国内这几年网络综艺节目发展得挺不错的，《快乐大本营》和《天天向上》收视率没那么高了吧。","tags":[{"name":"幽默","slug":"幽默","permalink":"https://kerita.github.io/tags/幽默/"}]},{"title":"Markdown小技巧","date":"2017-07-09T16:00:00.000Z","path":"2017/07/10/markdown-skills/","text":"最近经常用markdown写作，特别是将线上笔记本切换到为知笔记之后。使用频率增加就想提高效率，参考网上的文章，整理了这篇Markdown的小技巧。 输入代码 前后输入三个反引号 console.log() 插入空格（大多数用于首行缩进） &amp;emsp;&amp;emsp;测试&emsp;&emsp;测试 显示图片大小并居中 &lt;div style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;图片地址&quot; width=&quot;图片显示宽度&quot; height=&quot;显示高度&quot; alt=&quot;图片名称&quot;/&gt; &lt;/div&gt; 斜体和粗体 斜体 *斜体示例 粗体 **粗体示例 斜体加粗体 ***示例 插入链接 [text](link)Markdown使用小技巧 插入图片 ![text](link) 插入水平线 ___ 或者 *** 高亮文字 `` text `` 高亮文字 参考链接: Markdown使用小技巧 Markdown使用技巧,轻松搞定Markdown 献给写作者的 Markdown 新手指南","tags":[{"name":"Markdown","slug":"Markdown","permalink":"https://kerita.github.io/tags/Markdown/"}]},{"title":"毕业找房记","date":"2017-07-08T16:00:00.000Z","path":"2017/07/09/find-house/","text":"七月毕业，离开学校回到深圳才开始找房，其实这个时候找房子有点晚了，蛮多毕业生六月份就提前找好房子了。 （201700806更新） 豆瓣找房1.0一开始找房子，在豆瓣租房小组看到离公司旁边U小区的房源就豆油联系了一下，加了微信后才知道原来是链家的中介A（以下简称A）。第二天带我看房又说U小区没房了，所以带我去看了V小区和w小区的房。V小区是1460，w小区月租2000，V小区就在公司对面所以个人对V小区是比较满意的，决定租那间。决定签约前一天，又自己在自如app上联系宝安中心的管家B（以下简称B）带我去看了一次房，同时A也把B的微信给我，因为他要去军训没办法带我办理交接，让B带我办理。 不幸的是，天健那房子没抢到，A此时已经去军训了，无法带我看房，而B知道我没抢到天健的房子挺热心的，所以我开始联系B带我去看自如的房子。 B带我看了几间房，小区X一间1700+的还挺满意的，此时A发现居然是B带我看房就找我反复撕逼，而且不仅找我撕逼，还找到自如的区域经理，说自如的人抢他客户。心累啊，我挺感谢A第一次带我看房，我才知道自如房，但是你没时间带我看房，还不让别人带我看房？最后跟他说，谁带我看的房，我就跟谁签。会这么说，也是因为V小区那房被其他人抢到后迟迟没有确认，还可能抢到。 豆瓣找房2.0与自如继续观望V小区房子时，也在豆瓣上继续看房，做了许多笔记，但真正去看的只有离翻身地铁站50米的一个专门用来单间房公寓楼，窗户面向过道的单间1600，面向外面的1800，而且没有洗衣机，环境也恶劣的很，不值得租。 同时跟着B看了自如的一些房子，跟着B去洪浪北看了一间1460的房，也还不错，为了避免出现X小区房又被抢的状况，就先付押金预订了，作为最后的选择。 而后继续在公司附近找房，最后在确定V小区租不到后，第二天早上就去看Z小区一间合适的房，考虑我中午不睡、下午奔溃的状态，还有综合离地铁口近的房子的房租，决定租这间。而洪浪北的房子因为自如没有按时交房，也刚好退了。 签约与搬家找到Z小区的房子就立马签约交房，东洪之前跟我说搬家可以找他帮忙就找了。幸亏有他帮忙，东西太多了，一辆滴滴塞满，只能坐下我，他骑车过来。幸亏从公司宿舍到Z小区也不是很远。顺利完成搬家。 结语 毕业生找房，6月就可以找，不要因为多花一个月钱就不找。 找房首选离公司近的，近得可以步行回去睡午觉的完美，像我这样骑车回去睡午觉的也还行。 自如房还行，最完美当然是三四个同事一起租在公司附近（步行可轻松到达范围）。 情侣一起租个单间而不是合租也不错吧，哈哈哈，只是我还没体验过。","tags":[{"name":"heUo","slug":"heUo","permalink":"https://kerita.github.io/tags/heUo/"}]},{"title":"word-wrap&word-break","date":"2017-07-03T16:00:00.000Z","path":"2017/07/04/word-wrap&word-break/","text":"在开发Insta360官网英文版的时候，曾遇到单词太长如何换行的问题。谷歌一下，搞定需求，但是对这两个CSS3属性还是一知半解，借着阅读《CSS3实用指南》的契机，把他们理清。 不指定word-wrap与work-break值在不显式指定word-wrap和word-break属性值，并忽略从祖先元素继承值（这两个属性都可以继承），即这两个CSS属性的值都为normal时，讨论浏览器对长单词如何渲染。 以汉字为代表的CJK类文字CJK类(Chinese, Japanese, Korean and Vietnamese)文字中，每个文字都被当做一个单词，正常情况下，不存在长单词溢出或者换行问题，浏览器可以比较好的渲染 div &#123; width: 100px; border: 1px solid #ccc;&#125;&lt;div&gt;谷歌一下，搞定需求，但是对对这两个CSS3属性还是一知半解，借着阅读《CSS3实用指南》的契机，把他们理清。&lt;/div&gt; 以英文为代表的latin文字 当出现此类文字的长单词在当前行无法放下时，浏览器在父容器范围内寻找单词中可换行点进行换行，包括‘？’或者‘-’等。 div &#123; width: 500px; border: 1px solid #ccc;&#125;&lt;div&gt; a long word a long word https://www.google.com.hk/search?q=CJKV&amp;oq=CJKV&amp;aqs=chrome..6-9i57j0l5.1919j0j1&amp;sourceid=chrome&amp;ie=UTF-8&lt;/div&gt; 当可换行点在父容器外时，在父容器外换行；当没有可换行点时，独立一行显示；如果独立一行仍放不下，溢出显示。 div &#123; width: 100px; border: 1px solid #ccc;&#125;&lt;div&gt; a long word a long word dddddddddddddddddddddddddd&lt;/div&gt; 使用word-wrapword-wrap在新的标准命名为overflow-wrap，word-wrap作为一个别名，仍可使用，并且主流浏览器都支持。 word-wrap关心两个值：normal和break-word。而normal作为默认值，渲染结果可在上面知道。break-word呢，当前行且在父容器内有可换行点时换行；当前行没有可换行点时，独立一行显示；独立一行仍放不下的，在将溢出处自动换行。 当前行有可换行点 div &#123; width: 200px; border: 1px solid #ccc; word-wrap: break-word; &#125; &lt;div&gt; a long word search?q=CJKV&amp;oq=CJKV&amp;aqs=chrome..69i57j0l5.1919j0j1&amp;sourceid=chrome&amp;ie=UTF-8&lt;/div&gt; 当前行无可换行点 div &#123; width: 200px; border: 1px solid #ccc; word-wrap: break-word; &#125;&lt;div&gt; a long word https://www.google.com.hk/search?q=CJKV&amp;oq=CJKV&amp;aqs=chrome..69i57j0l5.1919j0j1&amp;sourceid=chrome&amp;ie=UTF-8&lt;/div&gt; 使用word-breakwork-break关心三个值：normal,break-all,keep-all。normal的效果上面可见。 break-all看到一个好的例子来解释这个属性就是：资本家总是极尽可能的压榨工人，break-all就是极尽可能的利用所有空间，不另起一行，且在每一行行在将溢出处换行。 div &#123; width: 200px; border: 1px solid #ccc; word-break: break-all; &#125;&lt;div&gt; a long word https://www.google.com.hk/search?q=CJKV&amp;oq=CJKV&amp;aqs=chrome..69i57j0l5.1919j0j1&amp;sourceid=chrome&amp;ie=UTF-8&lt;/div&gt; keep-allkeep-all就是在normal的基础上，让CJK文字也按溢出显示。同时也会让一些中文标点符号是做可换行点，且一些符号如《》还必须同行显示。 div &#123; width: 200px; border: 1px solid #ccc; word-break: keep-all;&#125;&lt;div&gt;谷歌一下，搞定需求，但是对对这两个CSS3属性还是一知半解，借着阅读啦啦啦啦《CSS3实用指南》的契机，把他们理清。&lt;/div&gt; 同时使用 word-wrap:break-word;与word-break:break-all;这个时候就是不溢出，不另起一行，随处换行。 word-wrap:break-word;与word-break:break-all;不溢出，另起一行，中文标点符号成为成为可换行符。 参考链接 你真的了解word-wrap和word-break的区别吗？ word-wrap——MDN word-break——MDN overflow-wrap——MDN","tags":[{"name":"CSS3","slug":"CSS3","permalink":"https://kerita.github.io/tags/CSS3/"}]},{"title":"记一次感冒","date":"2017-06-24T16:00:00.000Z","path":"2017/06/25/a-cold-in-2017/","text":"之所以写下这篇文章，不只是想记录下这次感冒的过程，而是为了提醒自己该运动了。无论搬家了与否，都应该运动。没搬家照旧在天健，搬家了在新家附近，并且还有Keep可以做呢。谨记谨记。 开始感冒最近身体状态真是极差，今年（2017年）大概5月的时候就有一次喉咙痛接近感冒，6月23号晚身体开始出现疲惫状态，然后是全身酸痛，即使下床喝了一包999感冒冲剂也无济于事。还有晚上的空调吹得我瑟瑟发抖，脚一直发冷，迷迷糊糊中选择了不作为，第二天早上中午症状更加严重。身体酸痛发软疲劳，甚至连午饭都吃不下去，扒了几口之后就回床上睡觉了，睡到下午四点多的时候状态恢复一点立马跑去校医室。 治疗和恢复到校医室之后是挂号，花十分钟量体温，医生居然让我去走廊的那里量体温，这我就不明白了，在里面不能量？那个时候也没有其他病人啊。然后是问询、开药，羞涩地被护士姐姐打了一针，因为低烧了。 晚上回来吃药睡觉，第二三天早上醒来感觉好很多了，但是低烧症状彻底消失还要到晚上。 现在身体还在恢复之中，并没有完全好，喉咙还有问题，受凉会打喷嚏。 咳嗽消失7月8号凌晨过来更新。 上一周还是有痰咳嗽的状态，这一周好像就消失，消失得好像我都忘记有过感冒这回事了。","tags":[{"name":"健康","slug":"健康","permalink":"https://kerita.github.io/tags/健康/"}]},{"title":"test-image","date":"2017-06-13T02:57:14.000Z","path":"2017/06/13/test-image/","text":"如何在Markdown中插入图片，使得编译之后，在hexo首页和文章页都能看到呢？ 设置 post_asset_folder在根目录下的_config.yml设置post_asset_folder:true _posts目录下创建文章同名目录引入图片&#123;% asset_img example.png text %&#125; 参考链接Hexo博客搭建之在文章中插入图片","tags":[{"name":"hexo","slug":"hexo","permalink":"https://kerita.github.io/tags/hexo/"}]},{"title":"前端模块化与模块加载器","date":"2017-06-11T16:00:00.000Z","path":"2017/06/12/about-module/","text":"前端模块化这个概念自从去年开始一直出现在视野里，在某次面试的时候还被问傻眼了，但都整理这方面的知识，这一次决定彻底清楚。跑题了，回到正题。模块化是啥？简单来说，前端JS文件越来越多，而且相互之间还存在着依赖关系，利用模块化可以更好地管理和加载这些JS文件。 本文主要是对前端模块化common.js,AMD,CMD和模块加载器require.js,sea.js和webpack进行梳理。 common.js,AMD,CMD 这三个东西都是模块化的规范，主要规定怎么组织模块和如何引入模块，区别如下： common.js:common.js通过require同步加载所有模块，通过exports或module.exports来导出需要暴露的接口，服务器端的Node.js遵循这种规范。 require(\"module\");require(\"../file.js\");exports.doStuff = function() &#123;&#125;;module.exports = someValue; AMD:服务器端的资源都是在本地磁盘，使用同步加载没有什么问题，但是浏览器不能这样，假如文件过大，会一直处于加载状态，浏览器进入“假死”状态。所以就出现了AMD这种适用于浏览器端的异步加载的模块化标准，require.js这个模块加载器就是这种规范的实现。 define(\"module\", [\"dep1\", \"dep2\"], function(d1, d2) &#123; return someExportedValue;&#125;);require([\"module\", \"../file\"], function(module, file) &#123; /* ... */ &#125;); CMD：与AMD一样，CMD也是一个用于浏览器的模块加载器，不同之处在于，AMD会一口气把需要的模块加载出来，而CMD则是用到时再加载。同时呢，CMD与common.js的规范保持很大的兼容，sea.js这种模块加载器就是这种规范的实现。define(function(require, exports, module) &#123; var $ = require('jquery'); var Spinning = require('./spinning'); exports.doSomething = ... module.exports = ...&#125;) require.js，sea.js与webpack如上面所言，require.js与sea.js是模块加载器，webpack相比较下，更像是模块加载器+gulp/grunt，同时更具备多种优点，例如可以对图片、css进行打包、兼容AMD、CMD、common.js、ES6格式的模块，通过强大的插件系统更能实现各种强大的功能。 webpacke重要的两个组成——loader和插件，loader更针对某一类型文件，插件更像是在整个打包过程起作用。详细学习webpack，可以看 https://github.com/Kerita/webpack-tutorial loader: 用于加载各种文件——css,less,vue,jsx，图片等 插件：开启服务器、实现热加载等功能。 小结common.js,AMD,CMD是模块化规范，require.js,sea.js,webpack模块加载器，现在比较流行是使用webpack构建项目，React和Vue.js官方脚手架都是采用这种方式。","tags":[{"name":"模块化","slug":"模块化","permalink":"https://kerita.github.io/tags/模块化/"}]},{"title":"2017年度计划","date":"2017-03-31T16:00:00.000Z","path":"2017/04/01/2017-plan/","text":"2017年1月1日晚上写完年度总结后，一个错觉一直萦绕在我的脑海——我已经写2017年度计划了。其实并没有，我只是在2016年度的总结里面提及在2017年至少要阅读12本专业书籍，12本非专业书籍，其余的并没有计划。当今天我正式想把计划放到博客上的时候，才发现印象笔记里面空空如也、一无所有。 阅读几个月的实习经历，发现自己技术方面有且不仅有以下不足： CSS理解不够深刻，实际使用也少，且无法灵活运用 没有比较良好的编程习惯，体现在JS编程上 对Vue.js、Node.js了解不够深入 对React、angular没有了解 专业书籍列表 《JavaScript语言精粹》 《JavaScript面向对象编程指南》 《精通CSS》** 《CSS实用指南》 《图解CSS3》 《锋利的jquery》 《jQuery cookbook》 《JavaScript高级程序设计》 《ECMAScript6入门》 《深入浅出Node.js》 非专业书籍 《软技能——代码之外的生存之道》 《少有人走的路》 《极简欧洲史》 《穷爸爸富爸爸》 健身 一周至少五天做Keep 一周至少打一次羽毛球 是否办健身卡，正式入职后决定 电影（包括美剧、动漫等方面）减少花在电影、美剧、动漫、赛事直播的时间，在非规定时间如果有观看这些视频的想法了，拿起kindle阅读或者编程。 一周最多只能看一部电影 美剧现在只追TBBT一部 《秦时明月》可以弃坑 英语 对于英语学习现在没有很好的规划，但至少要每天扇贝打50个单词","tags":[]},{"title":"Hello World","date":"2017-01-21T16:00:00.000Z","path":"2017/01/22/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new \"My New Post\" More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","tags":[]}]