[{"title":"word-wrap&word-break","date":"2017-07-03T16:00:00.000Z","path":"2017/07/04/word-wrap&word-break/","text":"","tags":[{"name":"CSS,CSS3","slug":"CSS-CSS3","permalink":"https://kerita.github.io/tags/CSS-CSS3/"}]},{"title":"记一次感冒","date":"2017-06-24T16:00:00.000Z","path":"2017/06/25/a-cold-in-2017/","text":"着凉了最近身体状态真是极差，今年（2017年）大概5月的时候就有一次喉咙痛接近感冒，6月23号晚身体开始出现疲惫状态，然后是全身酸痛，即使下床喝了一包999感冒冲剂也无济于事。还有晚上的空调吹的我瑟瑟发抖，脚一直发冷，第二天早上中午症状更加严重。 身体酸痛发软疲劳，甚至连午饭都吃不下去，扒了几口之后就回床上睡觉了，睡觉下午四点多的时候状态恢复一点立马跑去校医室。 治疗和恢复到校医室之后是挂号，花十分钟量体温，医生居然让我去走廊的那里量体温，这我就不明白了，在里面不能量？那个时候也没有其他病人啊。然后是问询、开药，羞涩地被护士姐姐打了一针，因为低烧了。 晚上回来吃药睡觉，第二三天早上醒来感觉好很多了，但是低烧症状彻底消失还要到晚上。 现在身体还在恢复之中，并没有完全好，喉咙还有问题，受凉会打喷嚏。 咳嗽消失7月8号凌晨过来更新。 上一周还是有痰咳嗽的状态，这一周好像就消失，消失得好像我都忘记有过感冒这回事了。 之所以写下这篇文章，并不只是想记录下这次感冒的过程，而是为了提醒自己该运动了。无论搬家了与否，都应该运动。没搬家照旧在天健，搬家了在新家附近，并且还有Keep可以做呢。 谨记谨记。","tags":[]},{"title":"前端模块化与模块加载器","date":"2017-06-11T16:00:00.000Z","path":"2017/06/12/about-module/","text":"前端模块化这个概念自从去年开始一直出现在视野里，在某次面试的时候还被问傻眼了，但都整理这方面的知识，这一次决定彻底清楚。跑题了，回到正题。模块化是啥？简单来说，前端JS文件越来越多，而且相互之间还存在着依赖关系，利用模块化可以更好地管理和加载这些JS文件。 本文主要是对前端模块化common.js,AMD,CMD和模块加载器require.js,sea.js和webpack进行梳理。 common.js,AMD,CMD 这三个东西都是模块化的规范，主要规定怎么组织模块和如何引入模块，区别如下： common.js:common.js通过require同步加载所有模块，通过exports或module.exports来导出需要暴露的接口，服务器端的Node.js遵循这种规范。 1234require(&quot;module&quot;);require(&quot;../file.js&quot;);exports.doStuff = function() &#123;&#125;;module.exports = someValue; AMD:服务器端的资源都是在本地磁盘，使用同步加载没有什么问题，但是浏览器不能这样，假如文件过大，会一直处于加载状态，浏览器进入“假死”状态。所以就出现了AMD这种适用于浏览器端的异步加载的模块化标准，require.js这个模块加载器就是这种规范的实现。 1234define(&quot;module&quot;, [&quot;dep1&quot;, &quot;dep2&quot;], function(d1, d2) &#123; return someExportedValue;&#125;);require([&quot;module&quot;, &quot;../file&quot;], function(module, file) &#123; /* ... */ &#125;); CMD：与AMD一样，CMD也是一个用于浏览器的模块加载器，不同之处在于，AMD会一口气把需要的模块加载出来，而CMD则是用到时再加载。同时呢，CMD与common.js的规范保持很大的兼容，sea.js这种模块加载器就是这种规范的实现。123456define(function(require, exports, module) &#123; var $ = require(&apos;jquery&apos;); var Spinning = require(&apos;./spinning&apos;); exports.doSomething = ... module.exports = ...&#125;) require.js，sea.js与webpack如上面所言，require.js与sea.js是模块加载器，webpack相比较下，更像是模块加载器+gulp/grunt，同时更具备多种优点，例如可以对图片、css进行打包、兼容AMD、CMD、common.js、ES6格式的模块，通过强大的插件系统更能实现各种强大的功能。 webpacke重要的两个组成——loader和插件，loader更针对某一类型文件，插件更像是在整个打包过程起作用。详细学习webpack，可以看 https://github.com/Kerita/webpack-tutorial loader: 用于加载各种文件——css,less,vue,jsx，图片等 插件：开启服务器、实现热加载等功能。 小结common.js,AMD,CMD是模块化规范，require.js,sea.js,webpack模块加载器，现在比较流行是使用webpack构建项目，React和Vue.js官方脚手架都是采用这种方式。","tags":[{"name":"模块化","slug":"模块化","permalink":"https://kerita.github.io/tags/模块化/"}]},{"title":"2017年度计划","date":"2017-03-31T16:00:00.000Z","path":"2017/04/01/2017-plan/","text":"2017年1月1日晚上写完年度总结后，一个错觉一直萦绕在我的脑海——我已经写2017年度计划了。其实并没有，我只是在2016年度的总结里面提及在2017年至少要阅读12本专业书籍，12本非专业书籍，其余的并没有计划。当今天我正式想把计划放到博客上的时候，才发现印象笔记里面空空如也、一无所有。 阅读几个月的实习经历，发现自己技术方面有且不仅有以下不足： CSS理解不够深刻，实际使用也少，且无法灵活运用 没有比较良好的编程习惯，体现在JS编程上 对Vue.js、Node.js了解不够深入 对React、angular没有了解 专业书籍列表 《JavaScript语言精粹》 《JavaScript面向对象编程指南》 《精通CSS》** 《CSS实用指南》 《图解CSS3》 《锋利的jquery》 《jQuery cookbook》 《JavaScript高级程序设计》 《ECMAScript6入门》 《深入浅出Node.js》 非专业书籍 《软技能——代码之外的生存之道》 《少有人走的路》 《极简欧洲史》 《穷爸爸富爸爸》 健身 一周至少五天做Keep 一周至少打一次羽毛球 是否办健身卡，正式入职后决定 电影（包括美剧、动漫等方面）减少花在电影、美剧、动漫、赛事直播的时间，在非规定时间如果有观看这些视频的想法了，拿起kindle阅读或者编程。 一周最多只能看一部电影 美剧现在只追TBBT一部 《秦时明月》可以弃坑 英语 对于英语学习现在没有很好的规划，但至少要每天扇贝打50个单词","tags":[]},{"title":"Hello World","date":"2017-01-21T16:00:00.000Z","path":"2017/01/22/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]