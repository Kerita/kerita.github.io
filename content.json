[{"title":"用 VPS 自己搭个梯子","date":"2017-10-25T16:00:00.000Z","path":"2017/10/26/2017/vps/","text":"在某个很平凡的夜晚，因为无法打开某个链接，开始知道墙（GFW——the Great Firewall），也开始寻找翻墙的工具，一定要到墙外去看看。 墙外的世界有多精彩吗？我又有多迷恋吗？不见得。翻墙主要目的是为了用谷歌搜索，还有就是为了更流畅的访问如 GitHub、Stack Overflow 之类有关编程的网站。但无法翻墙损失的不只是这些网站带来的良好体验和知识，还有自由，一种我想看什么就看什么的自由。现在每每看到社交网络有人在发“看到祖国这么流氓，我就放心了”、“这盛世如你所愿”，总会有一种怪怪的感觉。 这里顺便把百度批判一番。作为有着上亿用户的体量的公司，百度以及百度高层衣食无忧的管理人员为了赚钱加各种广告、安装百度全家桶、劫持浏览器首页、甚至劫持bing搜索，不羞愧吗？就降低中国互联网的体验而言，百度敢说，“我不是针对谁，我是说在做的各位都是垃圾”。百度应该好好学学网易，做良心产品，发良心财。 言归正传，在使用过Lantern、自由门、天行者VPN、GreenVPN等各种翻墙工具，经历它们下架或无法使用之后，决定自己用 VPS 搭个 Shadowsocks 服务器翻墙。 VPS是啥呢？就是虚拟专用服务器（Virtual private server），可以说就是一台电脑。翻墙的原理就是，在这台电脑上跑一个 Shadowsocks 服务，自己电脑用Shadowsocks连接远程 Shadowsocks 服务，请求就可以加密传输到远程服务器，利用远程服务器访问在返回本地电脑。 所以要自己搭梯子，首先要买一个 VPS，一个不被墙的VPS。在对比了各个 VPS 并尝试了 linode、Vultr、搬瓦工 三个之后，我选择了搬瓦工。linode 需要用信用卡，暂时没办信用卡所以不行。Vultr 和搬瓦工都支持支付宝，但是 Vultr 的服务器被墙了（2017年10月25日），所以我退款选择了搬瓦工，速度还不错。 原本想推荐我买的年付 29.99刀的套餐，没想到只隔了一天就售罄了。搬瓦工套餐选择 参考购买搬瓦工 VPS购买,买完进入服务器控制面板，可以直接用搬瓦工的提供的服务安装 Shadowsocks 服务。喜欢折腾的人，可以参考这篇文章安装命令行安装SS 之后在本地电脑装 Shadowsocks，然后连接服务器，就可以翻墙上网了。 如上所说，我翻墙的主要是为了上谷歌搜索和编程类网站，并不做什么坏事，我还是爱国的，介绍翻墙则是为了让大家好好学习，网警叔叔别请我喝茶。","tags":[{"name":"VPS","slug":"VPS","permalink":"https://kerita.github.io/tags/VPS/"}]},{"title":"青峰","date":"2017-10-02T16:00:00.000Z","path":"2017/10/03/2017/qingfeng/","text":"在很长一段时间，我都是将对明星作品的喜欢与对明星的喜欢分开，即喜欢他的作品不一定喜欢这个人，当然也不讨厌。无论是五月天、周杰伦、陈奕迅，还是赵雷、许巍、逃跑计划，虽然他们的歌在某一瞬间或者某一段时间，让我产生共鸣，但对于他们的喜欢都只停留在歌曲上。而青峰，苏打绿的主唱，唱《小情歌》的那个人，成为了打破这个规则第一人。 我也在想为什么会因为喜欢他唱的歌喜欢这个人？一个无论是动作和嗓音都有点“女性化特质”的男歌手。大概是因为他的创作、他的歌声如他自己的所说的“像棉一样带给人温暖舒服的感觉”，在触碰听者心底最柔软地方的同时，又不失勇敢和坚毅。而其他优秀的歌手离心底，都还有一些距离。 这里推荐一些个人觉得比较有代表性的歌曲：《无与伦比的美丽》、《相信》、《只有可以》、《带我走》，也期待你分享动听的歌与让人喜欢的歌手。 当然说到青峰，不能不说张悬，有兴趣的话去了解他们的故事，并听听她的《宝贝》。 最后说一句，他们2016年开始休团三年，不发专辑不开演唱会。一起等待他们复出的那一天吧。","tags":[{"name":"苏打绿","slug":"苏打绿","permalink":"https://kerita.github.io/tags/苏打绿/"}]},{"title":"谈微信的那些缺点","date":"2017-10-02T16:00:00.000Z","path":"2017/10/03/2017/about-wechat/","text":"今天想聊一聊日常使用频率最高的 APP ——微信，使用过程一些让人不爽的地方。虽然从用户角度来说是缺点，但从腾讯角度来说当然就未必了。 好友无法彻底删除好友用户删除好友时，并不会从对方好友列表删掉自己，并且动态依然会保留对方的点赞。 没有离线聊天记录无法是微信还是QQ，离线聊天记录都做得很差，最完美的离线聊天记录是提供所有聊天记录，并且可以按时间检索。 群聊直接被拉入群有些时候会很方便，但大部分时候是“打扰用户的”。 无法彻底屏蔽群消息对于那些不想看又不好意思退出的群，无法彻底屏蔽，即使关闭消息提醒，新的群消息依然会跑到时间线的顶端， 朋友圈朋友圈烦人的提醒在一条朋友圈点赞或者评论，之后好友的评论点赞都会有烦人的提醒，微信也意识到这个问题，前几个月（现在为2017年10月）在提醒的地方可以设置这条动态不再提醒，然而是在被打扰之后才能手动设置，而且是每条都需要独立设置。 私密朋友圈自己都不能评论只对自己开放的动态居然不能评论，用户自己留着看的就不能点评吗？ 没有关键词屏蔽关键词屏蔽，一方面可以筛选掉朋友的广告，一方面可以屏蔽重复刷屏的动态，例如“罗尔事件”中的文章。 公众号原创功能只能由系统判定给予，无法申请原创功能可以开通评论和打赏，然而只能由系统判定并授予（而且我猜系统算法只是判断文字），申请的接口都不给。有个朋友在公众号画了快一年的画，有不错的阅读量和点赞量，但直到最近在画后插入一些文字才获得原创资格。 封闭的公众号公众号最大的缺点是封闭，无法被搜索引擎爬取和收录，信息包括知识无法被自由的传播，与互联网的自由开放的精神背道而驰。 其他游戏无法隐藏底部tab的“发现（Discover）”中的游戏无法关闭，即使你一点也不想玩游戏。 手机号码为中心的账号体系微信开创了手机号码为中心的账号体系，一定程度避免了恶意注册，但并不是杜绝，而且牺牲那些换手机号码用户的体验。 更完美的还是以邮箱为中心。 PC端登录麻烦每次登陆PC端需要用微信扫一扫，为啥不能学习苹果——第一次时在手机询问是否同意将PC作为信任设备，同意以后都可直接登录。 小结最后总结一下，微信在用户体验上还是秒杀绝大部分软件的，无论是流畅度、UI还是功能，但如果能够彻底抛开KPI，可能会更加令人尊重。","tags":[{"name":"微信","slug":"微信","permalink":"https://kerita.github.io/tags/微信/"}]},{"title":"Awards 项目总结","date":"2017-09-23T16:00:00.000Z","path":"2017/09/24/2017/awards-project/","text":"本周二（19号）彻底完成公司 Awards 项目的需求和需求修改并上线，趁热打铁写下完成项目过程的一些思考。 项目介绍Awards 项目 是 Insta360 针对全景作品进行有奖征集一个项目，项目工作量主要在前端（故所说项目都指前端部分项目—— fe-awards），完成整个项目大概花了四天时间（指完成第一版需求的功能，不包括后来改需求时间）。 React+mobx 架构整个项目采用 React+mobx 的架构， React 完成项目 View 层面的呈现，mobx 负责一些项目数据的管理。 React Vue、 React、 Angular以 Vue、 React、 Angular 为代表的 mvvm 框架取代 jQuery 成为当下前端圈最热门的框架，解决的最大痛点就是让前端工程师从繁琐的 DOM 操作解脱。 实例以隐藏一个 div 为例，jQuery 需要获取该 div，再设置display 为 none, 或者从该 div 的父元素利用 DOM 操作移除该元素；而 React 的只需要在该 div 的 style属性中给 display 属性绑定一个三元条件判断,将组件 state 中的某个变量作为判断条件，当 state 的变量值发生改变时，界面 div 是否显示也会随着改变。 Vue&amp;React在使用 React 前也用过 Vue，使用过程最大的感受就是 Vue 提供了很多语法糖，写的时候很顺畅，随心所欲； React 则没有那么多语法糖，甚至连需要学习的新语法也很少。 很多人都说 Vue 比 React 容易上手，其实如果掌握了 mvvm 这种思想，React 比 Vue 更容易上手，因为除了 JSX 这种混合 JS 和 HTML 的语法、几个生态周期函数、setState()，React 就基本没有东西了，而 Vue 则还有需要掌握一些语法。但如上面所说， React 写起来就是没有 Vue 顺畅。 mobx使用 mobx 而不是常见的 Redux，是为了解决 React 单向数据流的不方便，实现数据双向绑定自动更新，特别是那些存储于数据管理框架中给各组件共享的数据。 下面介绍 mobx 的一些特性，具体内容查看 mobx 文档 数据双向绑定自动更新项目中的 mobx 存储了一个变量 locale，指明当前页面使用的是哪种语言，当调用 mobx 中定义的方法改变 locale 时，所有组件引用这个 locale 的地方都会自动更新，对页面重新渲染。 数据自动持久化还是 locale 这个值，在 mobx 声明时利用 @persist 修饰符指明需要持久化，当 locale 发生改变时便会自动存储在 localstorge 中，下次加载也会自动读取这个值。 计算属性声明计算属性，根据其他值，该属性设置不同的值。当 locale 为 zh 时，加载中文语言包，当 locale 为 en 时，加载英文语言包。 统计代码追踪在项目中加了 growingIO、百度统计、ga、fb pixel等统计代码，对访问数据进行记录。 同时加了一些 meta 信息，使得在 facebook 分享这个项目时，可以显示我们想要的预览图。 这个地方基本没什么问题，就是 ga 上与其他项目使用同个 id 追踪时，这个项目无法利用过滤器中的主机名（awards.insta360.com）筛选出来，但相同情况下的 blog.insta360.com 就筛选出来了。 移动端适配方案我对整个项目进行分割—— header,footer,banner,about,instruction,terms。 对于 header,footer,banner 这三个PC端和移动端 UI 上差异比较大的，我分开来写，根据不同屏幕加载不同组件。 对于 about,instruction,terms UI 差别不大，利用媒体查询 @media(max-width: 768px) 对移动端做了适配。 遇到的问题 修改 Antd 组件样式项目使用 React 经典组件库 Antd 进行开发，无论是在布局还是表单组件上都很方便，但是有些地方例如 单选、多选，因为各个公司设计不同，不能直接使用，想要使用 antd Form 组件各种方便的 api，如验证数据有效性、required 、初始值，就只能痛苦地修改 Antd 组件的样式。而且只能写在 App.css 中才能控制到 Antd 的样式，代码有些丑了。 如果有时间针对表单组件，联合公司设计师写一套适合公司 UI 风格的 React 组件，接下来会很大方便开发。 Insta360 Air app 语言参数不生效因为项目有多语言，而且要求首次加载的时候就能指定语言，所以会获取 url 的 locale 参数值（zh或en），没有的取 localstorage 的值, localstorage 也没有的话默认为 en。 但是这个参数在 Insta360 Air app 的 webview 中无法生效，一开始以为是webview 禁止取参数，测试发现是可以的。摸索了一些，发现是 mobx 持久化函数的回调没法生效，所以只要把 取参数设置 locale 这段代码 移到其他就行了。 但有个奇怪的地方，就是只在 Insta360 Air app 的 webview 有这个问题，难道这个 app 的 webview 加了什么特技？ 小结 不足之处 组件化程度不够高一开始觉得这个项目数据流动不多，所以没有抽出很多小组件，导致组件化程度不够高，有些组件代码比较多，对应的 CSS 代码也多。所以即使数据不多的情况下，抽组件依然有好处 代码质量无论是 JSX、 json、 还是 CSS，都尽可能写得好看漂亮，不仅有利于之后维护，写的时候也清晰。","tags":[{"name":"项目","slug":"项目","permalink":"https://kerita.github.io/tags/项目/"}]},{"title":"带我走","date":"2017-09-19T16:00:00.000Z","path":"2017/09/20/2017/take-me-to-your-heart/","text":"《带我走》- 苏打绿","tags":[{"name":"苏打绿","slug":"苏打绿","permalink":"https://kerita.github.io/tags/苏打绿/"}]},{"title":"关于牙套","date":"2017-09-13T16:00:00.000Z","path":"2017/09/14/2017/about-brace/","text":"经历大概两年的矫正，终于拆掉了牙齿上的矫正器，并结束每月一次的调整。值此之际，简单写下一些感受和心得。 箍牙要趁早化用张爱玲的“出名要趁早”来说箍牙这件事越早越好。在牙齿定型后如果出现不整齐，那就早点去箍牙吧。一是越早箍牙越早享受牙齿整齐的开心，也更容易整；二是箍牙费用一年比一年水涨船高。 箍牙历程箍牙过程最痛苦的是戴上牙套的前两周，牙齿软的根本无法吃一丢丢硬的东西，我是靠着喝粥、吃面、吃鱼度过那两周的，肚子饿得很快，多吃几餐就好了。 而后每个月的调整后的第一周，牙齿也会有点软，撕咬力不足。不过还好，只要不吃特别韧的东西就行。每个月的调整按时去，准时去可以缩短矫正周期。 把牙套摘下后还需要继续戴保持器，至于戴多久看疗效。现在是白天有颗牙齿跑偏，晚上戴保持器矫正回去。 具体矫正过程戳这里：箍牙历程 箍牙疗效还行，能看了，能大大方方地笑出来了。","tags":[{"name":"健康","slug":"健康","permalink":"https://kerita.github.io/tags/健康/"}]},{"title":"ES6变量解构引发的面试题的猜想","date":"2017-08-30T16:00:00.000Z","path":"2017/08/31/2017/about-destructuring/","text":"ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。（来自阮一峰ES6教程） 交换变量值同时阮一峰还说了用变量解构可以对很轻松的实现对两个值进行交换，他给出了例子，关于面试题的猜想就是由这个例子引发的。 面试题let x = 1let y = 2[x,y] = [y,x]console.log(x)console.log(y) 请问上面的代码将输出什么？A. 2 1B. Uncaught ReferenceError: y is not defined 按照前面的说法，选A。但之所以能成为面试题，是因为有坑。 考点 变量解构。 利用变量解构可以进行赋值。 JS什么时候必须加分号。第一个字符是’[‘，’(‘,’+’,’-‘, ‘/‘,此时上一行不加分号，就不会将上下两行代码分开。 所以不加分号时，上面的代码变成这样。因为let声明变量暂时性死区的特性，此时的2[x,y]中的y还是未定义，所以是ReferenceError。 let x=1let y = 2[x,y] = [y,x] 参考链接ECMAScript 6 入门JavaScript 语句后应该加分号么？","tags":[{"name":"JS","slug":"JS","permalink":"https://kerita.github.io/tags/JS/"}]},{"title":"解决iOS下音频无法自动播放","date":"2017-08-20T16:00:00.000Z","path":"2017/08/21/2017/audio-cannot-autoplay-in-iOS/","text":"Bieber走后，开始接手公司的全景分享系统，主要是利用这个系统做一些活动页面。有个需求需要在 h5 中加背景音乐，打开链接后立即播放。原本想不就是 audio 标签加 autoplay 属性值吗？简单。但如果这么简单就不会有这篇文章了。 问题描述写完在Chrome的移动端模式下测试，链接打开背景音乐就自动播放，通过钉钉将局域网测试链接发给同事，也正常。但是到了h5的主战场微信就不行了，在Safari打开也是不行。 查了资料是 iOS 内的 Safari 禁止音频自动播放，所以 Safari 下无法自动播放音频，采用 iOS 内 Safari 打开链接的微信也不行，而钉钉自己内置了浏览器，所以没问题。 bug原因接着找资料看能不能hack掉Safari这个糟糕的特性（官方文档是说怕音频自动播放消耗流量，但是图片也会啊，难道就禁止大图片了？），只找到 iOS4 的hack方法，在 iOS8 都失效，更不用说现在已经 iOS10 了。最后的解决办法是，在 document 绑定 touchstart/click 事件，用户触摸或者点击屏幕，音频就自动播放。 但你可能会奇怪？ iOS 下朋友圈有些 h5 背景音乐不是自动播放吗？这是因为微信的 SDK 给出了解决办法。 解决代码下面给出完整的代码。 bg-audio为audio标签id// 解决iOS禁止自动播放音频// 微信自动播放音频let bgAudio = document.getElementById(&apos;bg-audio&apos;)bgAudio.play();document.addEventListener(&quot;WeixinJSBridgeReady&quot;,function () &#123; bgAudio.play();&#125;, false);// 其他应用在click/touch时触发播放document.addEventListener(&apos;click&apos;, function () &#123; bgAudio.play()&#125;) document.addEventListener(&apos;touchstart&apos;, function () &#123; bgAudio.play()&#125;) 视频播放关于视频播放，可以看看这两篇博文移动端视频播放那些事儿iOS 10 Safari 视频播放新政策 活动页面NPC 不破不立改造展双城对话 圳京世界","tags":[{"name":"移动端","slug":"移动端","permalink":"https://kerita.github.io/tags/移动端/"},{"name":"iOS","slug":"iOS","permalink":"https://kerita.github.io/tags/iOS/"},{"name":"audio","slug":"audio","permalink":"https://kerita.github.io/tags/audio/"},{"name":"HTML","slug":"HTML","permalink":"https://kerita.github.io/tags/HTML/"}]},{"title":"毕业生入户深圳","date":"2017-08-17T16:00:00.000Z","path":"2017/08/18/2017/about-hukou/","text":"今年（2017年）本科毕业了，工作在深圳就把户口迁了过来，至于迁与不迁户口的优劣，各人有各人的看法，此处不表。本文目的是把个人办理户口迁移的过程记录下来（因单位没有接收权力），造福后来人。 代理机构办理《接收函》应届本科毕业生入深户是通过人才引进政策，所以第一步需要到深圳市人力资源和社会保障局网站进行评审，评审通过后选择就近的代理机构办理接收函，当然代理机构还负责毕业后接收档案。办理时需要携带学校发的《毕业生就业推荐表》等资料，委托费用是200多块。大概一周之后可以拿到一式两份《接收函》，一份拿到学校办理报到证，一份自个留着，之后会用到。同时，代理机构还会给一份代理协议和办理入户指南，这两个也需要留着。建议想入深户的，五月份就可以办理接收函。 需要的证件：- 《毕业生就业推荐表》 学校领取《报到证》将一份接收函交给学校的就业指导中心，并办理《报到证》，《报到证》要关注的点是报到的地方应为“深圳市人力资源和社会保障局”。报到证大概要6月底、7月份初毕业时，学校才会发放。拿到报到证、毕业证、学位证等证件就可以会老家办理《户口迁移证》了。 需要的证件：- 《接收函》 老家办理《户口迁移证》回老家办理《户口迁移证》是所有步骤中最坑爹的部分。深圳的政策是只要拿着《接收函》和《报到证》就可以回老家办理《户口迁移证》，但是，地方派出所并不认这个，所以导致每个派出所需要的证件种类都不同，甚至是同个县不同镇之间。需要哪些证件，大概取决于派出所办理人员的心情吧。所以最好先打听清楚老家派出所需要哪些资料，然后再回家办理，这样不会走很多冤枉路。 可能需要的证件（各个地方不同）：- 《毕业证》- 《学位证》- 《报到证》- 《公司证明》- 《劳动合同》 福田行政服务大厅办理报到拿到户口迁移证，按着代理机构给的入户指南上的说明准备各种证件，报到之后工作人员会给《入户信息卡》和《介绍信》去办理入户，如果在第一步选择在深圳“农转非”的，还有《农转非信息卡》。 需要的证件：- 《接收函》- 《学位证》- 《毕业证》- 《身份证》- 《报到证》- 《学信网两年以上学历验证证明》- 《户口迁移证》 深圳任一派出所办理入户《入户信息卡》有办理需要的各种资料，按照说明准备，因已上交所以也不太记得。 需要的证件（包括但不限于）：- 《身份证》- 《户口迁移证》- 身份证照片和回执- 《入户信息卡》- 《农转非信息卡》（若为在深农转非）- 《委托协议》 申请租房补贴在入户成功后，便可在深圳市人力资源和社会保障局官网申请租房补贴。 需要的证件：- 无 上交介绍信与报到证到代理机构介绍信自己复印几份留着申请区级补贴用，把介绍信原件和报到证交到代理机构。 需要的证件：- 介绍信- 报到证 总结 办理手续的时候照着工作人员给的办事指南进行办理，每年可能有所不同，如有错误或不同，笔者概不负责，敬请谅解。 证件如毕业证、学位证和身份证都是需要经常用到，可以一次性多复印几份， 因为时间原因，可能有遗落或错误，欢迎指出，谢谢！","tags":[]},{"title":"关于《吐槽大会》","date":"2017-08-02T16:00:00.000Z","path":"2017/08/03/2017/about-roast/","text":"几天前在某个地方，或是知乎回答，或是公众号文章，看到关于《吐槽大会》的议论，觉得挺有意思，遂去搜一搜、看一看。 保持好奇心这里顺便说另一个事情，作为一个年轻人，对于新生事物，应该保持好奇心；而不是看一眼，连思考都没有，就下结论。 之前看到朋友圈有几个人对吴亦凡参与的《中国有嘻哈》评价颇高，第一眼看到吴亦凡，觉得质量不会很高，就没有去看。过了好几天，又在朋友圈看到关于《中国有嘻哈》的讨论，这才去看，质量果真不咋地。哈哈哈。当然，这不影响我以后对新生事物保持好奇心。 吴亦凡、鹿晗与黄子韬吴亦凡的黑点在于：一是没有与名气相匹配的作品；二是骗炮门；三是面相不善，不像一个善良的人。相对而言，鹿晗还是挺面善的，但也是没有与名气匹配的作品；黄子韬倒是有跟名气相匹配的表情包，但是也不面善。 吐槽大会介绍扯远了，回到《吐槽大会》。《吐槽大会》第一季已经结束了，总共有十期，每期会有一个主咖，外加6个嘉宾（偶尔也有七个嘉宾），当然还有一个主持人。虽然十期挑着看还没看完，但是已经按耐不住想“吐槽”的心情了。（其实是十一期，第0期周杰场，内容因为太污刚播出就被禁了，节目组也进行了整改，腾讯视频也再没把这一期算进去。） 主持人主持人最重要的就是把整个节目衔接流畅，其次是咬字要清楚；主持这个节目呢，当然还需要幽默，不仅要能拿主咖嘉宾开玩笑，更要能自嘲。 《吐槽大会》的主持人一般都是张绍刚，偶尔也会是王自健。两个人相比，我更喜欢张绍刚。在串联节目、吐字方面、幽默和槽点，张绍刚都更胜一筹。偶尔换换王自健来主持也是不错的，不腻。 主咖主咖也就是每期的主角，节目就是从主持人吐槽主咖开始，然后嘉宾一个接着一个上台继续吐槽，嘉宾间也会互相吐槽，最后主咖反击。这样一个需要接受七个人吐槽的主角：一是必然在普通观众中知名度高，如果找一个八线演员，观众看到本期主咖名字，就没有想看的欲望了；二是要有槽点可以吐，但是槽点一定是要能洗白的，吸毒或者台独之类的槽点就不适合了；三是要幽默，最后的反击越犀利越好。 总共十一期节目，看了周杰、李湘、曹云金、大张伟、唐国强、蔡国庆、小沈阳、薛之谦和凤凰传奇这几期。比较好看的是曹云金、唐国强、和凤凰传奇三期，周杰场其实也还行，但因为是第0期，节目有些粗糙（排名分先后）。这几个主咖，至少都满足了上面的第一、二个条件，幽默程度也都还行，当然最6的还是说相声的曹云金了。 至于其他几个人呢，李湘、薛之谦、蔡国庆、小沈阳的槽点都不是很值得吐，大张伟的槽点是多次歌曲抄袭，这个槽点不适合用来吐槽，洗不白。 嘉宾合适的主咖很重要，会吐槽的嘉宾也很重要。如果有跟主咖关系密切而且又很会吐槽的嘉宾，节目就好看了，唐国强场的王刚就是这么一个嘉宾。吐槽时把握节奏太好了，不仅吐槽唐国强好笑，吐槽嘉宾史航的时候也很好笑，特别是结合史航身世“存在即合理”的哲学梗，。 其他嘉宾除了李诞和池子这两个钉子户，其他嘉宾的吐槽并没有给我留下太深的印象。李诞和池子两个策划人每期都会上，针对嘉宾和主咖的吐槽都还蛮好笑的，池子比李诞幽默感更强，但论节奏感还是比不上老戏骨王刚。因为他们上了太多期，其他嘉宾针对他们的吐槽也变成老生常谈。 结语看完《吐槽大会》后，也有一种想写下一段吐槽自己的文字，但还没有想好如何写，之后补上。 顺便说一句，国内这几年网络综艺节目发展得挺不错的，《快乐大本营》和《天天向上》收视率没那么高了吧。","tags":[{"name":"幽默","slug":"幽默","permalink":"https://kerita.github.io/tags/幽默/"}]},{"title":"Markdown小技巧","date":"2017-07-09T16:00:00.000Z","path":"2017/07/10/2017/markdown-skills/","text":"最近经常用markdown写作，特别是将线上笔记本切换到为知笔记之后。使用频率增加就想提高效率，参考网上的文章，整理了这篇Markdown的小技巧。 输入代码 前后输入三个反引号 console.log() 插入空格（大多数用于首行缩进） &amp;emsp;&amp;emsp;测试&emsp;&emsp;测试 显示图片大小并居中 &lt;div style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;图片地址&quot; width=&quot;图片显示宽度&quot; height=&quot;显示高度&quot; alt=&quot;图片名称&quot;/&gt; &lt;/div&gt; 斜体和粗体 斜体 *斜体示例 粗体 **粗体示例 斜体加粗体 ***示例 插入链接 [text](link)Markdown使用小技巧 插入图片 ![text](link) 插入水平线 ___ 或者 *** 高亮文字 `` text `` 高亮文字 参考链接: Markdown使用小技巧 Markdown使用技巧,轻松搞定Markdown 献给写作者的 Markdown 新手指南","tags":[{"name":"Markdown","slug":"Markdown","permalink":"https://kerita.github.io/tags/Markdown/"}]},{"title":"毕业找房记","date":"2017-07-08T16:00:00.000Z","path":"2017/07/09/2017/find-house/","text":"七月毕业，离开学校回到深圳才开始找房，其实这个时候找房子有点晚了，蛮多毕业生六月份就提前找好房子了。 （201700806更新） 豆瓣找房1.0一开始找房子，在豆瓣租房小组看到离公司旁边U小区的房源就豆油联系了一下，加了微信后才知道原来是链家的中介A（以下简称A）。第二天带我看房又说U小区没房了，所以带我去看了V小区和w小区的房。V小区是1460，w小区月租2000，V小区就在公司对面所以个人对V小区是比较满意的，决定租那间。决定签约前一天，又自己在自如app上联系宝安中心的管家B（以下简称B）带我去看了一次房，同时A也把B的微信给我，因为他要去军训没办法带我办理交接，让B带我办理。 不幸的是，天健那房子没抢到，A此时已经去军训了，无法带我看房，而B知道我没抢到天健的房子挺热心的，所以我开始联系B带我去看自如的房子。 B带我看了几间房，小区X一间1700+的还挺满意的，此时A发现居然是B带我看房就找我反复撕逼，而且不仅找我撕逼，还找到自如的区域经理，说自如的人抢他客户。心累啊，我挺感谢A第一次带我看房，我才知道自如房，但是你没时间带我看房，还不让别人带我看房？最后跟他说，谁带我看的房，我就跟谁签。会这么说，也是因为V小区那房被其他人抢到后迟迟没有确认，还可能抢到。 豆瓣找房2.0与自如继续观望V小区房子时，也在豆瓣上继续看房，做了许多笔记，但真正去看的只有离翻身地铁站50米的一个专门用来单间房公寓楼，窗户面向过道的单间1600，面向外面的1800，而且没有洗衣机，环境也恶劣的很，不值得租。 同时跟着B看了自如的一些房子，跟着B去洪浪北看了一间1460的房，也还不错，为了避免出现X小区房又被抢的状况，就先付押金预订了，作为最后的选择。 而后继续在公司附近找房，最后在确定V小区租不到后，第二天早上就去看Z小区一间合适的房，考虑我中午不睡、下午奔溃的状态，还有综合离地铁口近的房子的房租，决定租这间。而洪浪北的房子因为自如没有按时交房，也刚好退了。 签约与搬家找到Z小区的房子就立马签约交房，东洪之前跟我说搬家可以找他帮忙就找了。幸亏有他帮忙，东西太多了，一辆滴滴塞满，只能坐下我，他骑车过来。幸亏从公司宿舍到Z小区也不是很远。顺利完成搬家。 结语 毕业生找房，6月就可以找，不要因为多花一个月钱就不找。 找房首选离公司近的，近得可以步行回去睡午觉的完美，像我这样骑车回去睡午觉的也还行。 自如房还行，最完美当然是三四个同事一起租在公司附近（步行可轻松到达范围）。 情侣一起租个单间而不是合租也不错吧，哈哈哈，只是我还没体验过。","tags":[{"name":"house","slug":"house","permalink":"https://kerita.github.io/tags/house/"}]},{"title":"word-wrap&word-break","date":"2017-07-03T16:00:00.000Z","path":"2017/07/04/2017/word-wrap&word-break/","text":"在开发Insta360官网英文版的时候，曾遇到单词太长如何换行的问题。谷歌一下，搞定需求，但是对这两个CSS3属性还是一知半解，借着阅读《CSS3实用指南》的契机，把他们理清。 不指定word-wrap与work-break值在不显式指定word-wrap和word-break属性值，并忽略从祖先元素继承值（这两个属性都可以继承），即这两个CSS属性的值都为normal时，讨论浏览器对长单词如何渲染。 以汉字为代表的CJK类文字CJK类(Chinese, Japanese, Korean and Vietnamese)文字中，每个文字都被当做一个单词，正常情况下，不存在长单词溢出或者换行问题，浏览器可以比较好的渲染 div &#123; width: 100px; border: 1px solid #ccc;&#125;&lt;div&gt;谷歌一下，搞定需求，但是对对这两个CSS3属性还是一知半解，借着阅读《CSS3实用指南》的契机，把他们理清。&lt;/div&gt; 以英文为代表的latin文字 当出现此类文字的长单词在当前行无法放下时，浏览器在父容器范围内寻找单词中可换行点进行换行，包括‘？’或者‘-’等。 div &#123; width: 500px; border: 1px solid #ccc;&#125;&lt;div&gt; a long word a long word https://www.google.com.hk/search?q=CJKV&amp;oq=CJKV&amp;aqs=chrome..6-9i57j0l5.1919j0j1&amp;sourceid=chrome&amp;ie=UTF-8&lt;/div&gt; 当可换行点在父容器外时，在父容器外换行；当没有可换行点时，独立一行显示；如果独立一行仍放不下，溢出显示。 div &#123; width: 100px; border: 1px solid #ccc;&#125;&lt;div&gt; a long word a long word dddddddddddddddddddddddddd&lt;/div&gt; 使用word-wrapword-wrap在新的标准命名为overflow-wrap，word-wrap作为一个别名，仍可使用，并且主流浏览器都支持。 word-wrap关心两个值：normal和break-word。而normal作为默认值，渲染结果可在上面知道。break-word呢，当前行且在父容器内有可换行点时换行；当前行没有可换行点时，独立一行显示；独立一行仍放不下的，在将溢出处自动换行。 当前行有可换行点 div &#123; width: 200px; border: 1px solid #ccc; word-wrap: break-word; &#125; &lt;div&gt; a long word search?q=CJKV&amp;oq=CJKV&amp;aqs=chrome..69i57j0l5.1919j0j1&amp;sourceid=chrome&amp;ie=UTF-8&lt;/div&gt; 当前行无可换行点 div &#123; width: 200px; border: 1px solid #ccc; word-wrap: break-word; &#125;&lt;div&gt; a long word https://www.google.com.hk/search?q=CJKV&amp;oq=CJKV&amp;aqs=chrome..69i57j0l5.1919j0j1&amp;sourceid=chrome&amp;ie=UTF-8&lt;/div&gt; 使用word-breakwork-break关心三个值：normal,break-all,keep-all。normal的效果上面可见。 break-all看到一个好的例子来解释这个属性就是：资本家总是极尽可能的压榨工人，break-all就是极尽可能的利用所有空间，不另起一行，且在每一行行在将溢出处换行。 div &#123; width: 200px; border: 1px solid #ccc; word-break: break-all; &#125;&lt;div&gt; a long word https://www.google.com.hk/search?q=CJKV&amp;oq=CJKV&amp;aqs=chrome..69i57j0l5.1919j0j1&amp;sourceid=chrome&amp;ie=UTF-8&lt;/div&gt; keep-allkeep-all就是在normal的基础上，让CJK文字也按溢出显示。同时也会让一些中文标点符号是做可换行点，且一些符号如《》还必须同行显示。 div &#123; width: 200px; border: 1px solid #ccc; word-break: keep-all;&#125;&lt;div&gt;谷歌一下，搞定需求，但是对对这两个CSS3属性还是一知半解，借着阅读啦啦啦啦《CSS3实用指南》的契机，把他们理清。&lt;/div&gt; 同时使用 word-wrap:break-word;与word-break:break-all;这个时候就是不溢出，不另起一行，随处换行。 word-wrap:break-word;与word-break:break-all;不溢出，另起一行，中文标点符号成为成为可换行符。 参考链接 你真的了解word-wrap和word-break的区别吗？ word-wrap——MDN word-break——MDN overflow-wrap——MDN","tags":[{"name":"CSS3","slug":"CSS3","permalink":"https://kerita.github.io/tags/CSS3/"}]},{"title":"记一次感冒","date":"2017-06-24T16:00:00.000Z","path":"2017/06/25/2017/a-cold-in-2017/","text":"之所以写下这篇文章，不只是想记录下这次感冒的过程，而是为了提醒自己该运动了。无论搬家了与否，都应该运动。没搬家照旧在天健，搬家了在新家附近，并且还有Keep可以做呢。谨记谨记。 开始感冒最近身体状态真是极差，今年（2017年）大概5月的时候就有一次喉咙痛接近感冒，6月23号晚身体开始出现疲惫状态，然后是全身酸痛，即使下床喝了一包999感冒冲剂也无济于事。还有晚上的空调吹得我瑟瑟发抖，脚一直发冷，迷迷糊糊中选择了不作为，第二天早上中午症状更加严重。身体酸痛发软疲劳，甚至连午饭都吃不下去，扒了几口之后就回床上睡觉了，睡到下午四点多的时候状态恢复一点立马跑去校医室。 治疗和恢复到校医室之后是挂号，花十分钟量体温，医生居然让我去走廊的那里量体温，这我就不明白了，在里面不能量？那个时候也没有其他病人啊。然后是问询、开药，羞涩地被护士姐姐打了一针，因为低烧了。 晚上回来吃药睡觉，第二三天早上醒来感觉好很多了，但是低烧症状彻底消失还要到晚上。 现在身体还在恢复之中，并没有完全好，喉咙还有问题，受凉会打喷嚏。 咳嗽消失7月8号凌晨过来更新。 上一周还是有痰咳嗽的状态，这一周好像就消失，消失得好像我都忘记有过感冒这回事了。","tags":[{"name":"健康","slug":"健康","permalink":"https://kerita.github.io/tags/健康/"}]},{"title":"test-image","date":"2017-06-13T02:57:14.000Z","path":"2017/06/13/2017/test-image/","text":"如何在Markdown中插入图片，使得编译之后，在hexo首页和文章页都能看到呢？ 设置 post_asset_folder在根目录下的_config.yml设置post_asset_folder:true _posts目录下创建文章同名目录引入图片&#123;% asset_img example.png text %&#125; 参考链接Hexo博客搭建之在文章中插入图片","tags":[{"name":"hexo","slug":"hexo","permalink":"https://kerita.github.io/tags/hexo/"}]},{"title":"前端模块化与模块加载器","date":"2017-06-11T16:00:00.000Z","path":"2017/06/12/2017/about-module/","text":"前端模块化这个概念自从去年开始一直出现在视野里，在某次面试的时候还被问傻眼了，但都整理这方面的知识，这一次决定彻底清楚。跑题了，回到正题。模块化是啥？简单来说，前端JS文件越来越多，而且相互之间还存在着依赖关系，利用模块化可以更好地管理和加载这些JS文件。 本文主要是对前端模块化common.js,AMD,CMD和模块加载器require.js,sea.js和webpack进行梳理。 common.js,AMD,CMD 这三个东西都是模块化的规范，主要规定怎么组织模块和如何引入模块，区别如下： common.js:common.js通过require同步加载所有模块，通过exports或module.exports来导出需要暴露的接口，服务器端的Node.js遵循这种规范。 require(\"module\");require(\"../file.js\");exports.doStuff = function() &#123;&#125;;module.exports = someValue; AMD:服务器端的资源都是在本地磁盘，使用同步加载没有什么问题，但是浏览器不能这样，假如文件过大，会一直处于加载状态，浏览器进入“假死”状态。所以就出现了AMD这种适用于浏览器端的异步加载的模块化标准，require.js这个模块加载器就是这种规范的实现。 define(\"module\", [\"dep1\", \"dep2\"], function(d1, d2) &#123; return someExportedValue;&#125;);require([\"module\", \"../file\"], function(module, file) &#123; /* ... */ &#125;); CMD：与AMD一样，CMD也是一个用于浏览器的模块加载器，不同之处在于，AMD会一口气把需要的模块加载出来，而CMD则是用到时再加载。同时呢，CMD与common.js的规范保持很大的兼容，sea.js这种模块加载器就是这种规范的实现。define(function(require, exports, module) &#123; var $ = require('jquery'); var Spinning = require('./spinning'); exports.doSomething = ... module.exports = ...&#125;) require.js，sea.js与webpack如上面所言，require.js与sea.js是模块加载器，webpack相比较下，更像是模块加载器+gulp/grunt，同时更具备多种优点，例如可以对图片、css进行打包、兼容AMD、CMD、common.js、ES6格式的模块，通过强大的插件系统更能实现各种强大的功能。 webpacke重要的两个组成——loader和插件，loader更针对某一类型文件，插件更像是在整个打包过程起作用。详细学习webpack，可以看 https://github.com/Kerita/webpack-tutorial loader: 用于加载各种文件——css,less,vue,jsx，图片等 插件：开启服务器、实现热加载等功能。 小结common.js,AMD,CMD是模块化规范，require.js,sea.js,webpack模块加载器，现在比较流行是使用webpack构建项目，React和Vue.js官方脚手架都是采用这种方式。","tags":[{"name":"模块化","slug":"模块化","permalink":"https://kerita.github.io/tags/模块化/"}]},{"title":"Hello World","date":"2017-01-21T16:00:00.000Z","path":"2017/01/22/2017/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new \"My New Post\" More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","tags":[]}]