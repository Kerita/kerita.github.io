<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kerita</title>
  <icon>https://kerita.me/icon.webp</icon>
  <subtitle>自律谦逊，承担责任，推迟满足感，你要热爱它</subtitle>
  <link href="https://kerita.me/atom.xml" rel="self"/>
  
  <link href="https://kerita.me/"/>
  <updated>2021-07-13T13:27:52.268Z</updated>
  <id>https://kerita.me/</id>
  
  <author>
    <name>Kerita</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>浏览器是如何渲染的</title>
    <link href="https://kerita.me/07/13/fe-attack/8-render/"/>
    <id>https://kerita.me/07/13/fe-attack/8-render/</id>
    <published>2021-07-13T00:00:00.000Z</published>
    <updated>2021-07-13T13:27:52.268Z</updated>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="前端进击笔记" scheme="https://kerita.me/categories/%E5%89%8D%E7%AB%AF%E8%BF%9B%E5%87%BB%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="浏览器" scheme="https://kerita.me/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>什么是 HTTP 协议</title>
    <link href="https://kerita.me/07/12/fe-attack/7-http/"/>
    <id>https://kerita.me/07/12/fe-attack/7-http/</id>
    <published>2021-07-12T00:00:00.000Z</published>
    <updated>2021-07-13T13:27:52.260Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;什么是-RESTful-接口&quot;&gt;&lt;a href=&quot;#什么是-RESTful-接口&quot; class=&quot;headerlink&quot; title=&quot;什么是 RESTful 接口&quot;&gt;&lt;/a&gt;什么是 RESTful 接口&lt;/h2&gt;&lt;p&gt;RESTful 不是一种协议，而是一种接口设计风格，其要点如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;URL 只有名词&lt;/li&gt;
&lt;li&gt;看 URL 就知道是什么业务&lt;/li&gt;
&lt;li&gt;看 method 就知道是什么操作&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;GET &amp;#x2F;orders&amp;#x2F;1234	&amp;#x2F;&amp;#x2F; 查询订单&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;POST &amp;#x2F;orders&amp;#x2F;1234	&amp;#x2F;&amp;#x2F; 新增订单&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PUT &amp;#x2F;orders&amp;#x2F;1234	&amp;#x2F;&amp;#x2F; 修改订单&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DELETE &amp;#x2F;orders&amp;#x2F;1234	&amp;#x2F;&amp;#x2F; 删除订单&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="前端进击笔记" scheme="https://kerita.me/categories/%E5%89%8D%E7%AB%AF%E8%BF%9B%E5%87%BB%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="HTTP" scheme="https://kerita.me/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>接口对接 SOP —及时沟通与前置风险</title>
    <link href="https://kerita.me/07/08/2021/api/"/>
    <id>https://kerita.me/07/08/2021/api/</id>
    <published>2021-07-08T00:00:00.000Z</published>
    <updated>2021-07-13T13:27:52.224Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;接口对接过程遇到的问题&quot;&gt;&lt;a href=&quot;#接口对接过程遇到的问题&quot; class=&quot;headerlink&quot; title=&quot;接口对接过程遇到的问题&quot;&gt;&lt;/a&gt;接口对接过程遇到的问题&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;没有接口文档，接口口头或者企业微信简单确认（特别是只有一两个接口）&lt;/li&gt;
&lt;li&gt;接口文档没有确定交付时间，或者到时间没有交付&lt;/li&gt;
&lt;li&gt;接口文档不全，部分接口缺失或者接口部分字段缺失&lt;/li&gt;
&lt;li&gt;后端修改接口没有通知前端，导致实际接口与接口文档不一致&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="前端" scheme="https://kerita.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="项目" scheme="https://kerita.me/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>浏览器如何进行网络请求</title>
    <link href="https://kerita.me/07/06/fe-attack/6-request/"/>
    <id>https://kerita.me/07/06/fe-attack/6-request/</id>
    <published>2021-07-06T00:00:00.000Z</published>
    <updated>2021-07-13T13:27:52.256Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;输入一个-URL-敲下回车键发生了什么&quot;&gt;&lt;a href=&quot;#输入一个-URL-敲下回车键发生了什么&quot; class=&quot;headerlink&quot; title=&quot;输入一个 URL 敲下回车键发生了什么&quot;&gt;&lt;/a&gt;输入一个 URL 敲下回车键发生了什么&lt;/h2&gt;&lt;p&gt;1.DNS 域名解析（此处涉及 DNS 的寻址过程），找到网页的存放服务器；&lt;/p&gt;
&lt;p&gt;2.浏览器与服务器建立 TCP 连接；&lt;/p&gt;
&lt;p&gt;3.浏览器发起 HTTP 请求；&lt;/p&gt;
&lt;p&gt;4.服务器响应 HTTP 请求，返回该页面的 HTML 内容；&lt;/p&gt;
&lt;p&gt;5.浏览器解析 HTML 代码，并请求 HTML 代码中的资源（如 JavaScript、CSS、图片等，此处可能涉及 HTTP 缓存）；&lt;/p&gt;
&lt;p&gt;6.浏览器对页面进行渲染呈现给用户（此处涉及浏览器的渲染原理）。&lt;/p&gt;</summary>
    
    
    
    <category term="前端进击笔记" scheme="https://kerita.me/categories/%E5%89%8D%E7%AB%AF%E8%BF%9B%E5%87%BB%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Ajax" scheme="https://kerita.me/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 的运行机制</title>
    <link href="https://kerita.me/07/05/fe-attack/5-js-run/"/>
    <id>https://kerita.me/07/05/fe-attack/5-js-run/</id>
    <published>2021-07-05T00:00:00.000Z</published>
    <updated>2021-07-13T13:27:52.252Z</updated>
    
    
    <summary type="html">&lt;p&gt;JavaScript 作为是一门单线程语言，使用事件循环(Event Loop)机制，来执行代码和收集回调队列的子任务。&lt;/p&gt;</summary>
    
    
    
    <category term="前端进击笔记" scheme="https://kerita.me/categories/%E5%89%8D%E7%AB%AF%E8%BF%9B%E5%87%BB%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="JS" scheme="https://kerita.me/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 实现继承</title>
    <link href="https://kerita.me/06/30/fe-attack/4-js/"/>
    <id>https://kerita.me/06/30/fe-attack/4-js/</id>
    <published>2021-06-30T00:00:00.000Z</published>
    <updated>2021-07-13T13:27:52.252Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;JavaScript 的函数怎么也是个对象？&lt;br&gt;1.JavaScript 中除了基本类型，其他都是对象，Symbol 也是基本数据类型。&lt;br&gt;2.函数是一种特殊的对象，它也拥有属性和值，有一个特别的属性 prototype，该属性就是函数的原型对象。&lt;br&gt;3.函数的原型对象(prototype) 都拥有 constructor 属性，该属性指向与之关联的构造函数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;__proto__&lt;/code&gt; 和 prototype 到底是啥关系？&lt;br&gt;1.每个对象都有 &lt;code&gt;__proto__&lt;/code&gt; 属性来标识自己所继承的原型对象，但只有函数才有 prototype 属性。&lt;br&gt;2.每个函数都有一个 prototype 属性，该属性为函数的原型对象。&lt;br&gt;3.通过将实例对象的 &lt;code&gt;__proto__&lt;/code&gt; 属性赋值为其构造函数的原型对象 prototype，JavaScript 可以使用构造函数创建对象的方法，来实现继承。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JavaScript 中对象是怎么实现继承的？&lt;br&gt;通过原型链访问对象的方法和属性，找到返回对应的值，直到访问 &lt;code&gt;Object.prototype&lt;/code&gt; 的原型对象 null 仍没找到的，返回 undefined。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JavaScript 是怎么访问对象的方法和属性的？&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="前端进击笔记" scheme="https://kerita.me/categories/%E5%89%8D%E7%AB%AF%E8%BF%9B%E5%87%BB%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="JS" scheme="https://kerita.me/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>CSS 知识点</title>
    <link href="https://kerita.me/06/28/fe-attack/3-css/"/>
    <id>https://kerita.me/06/28/fe-attack/3-css/</id>
    <published>2021-06-28T00:00:00.000Z</published>
    <updated>2021-07-13T13:27:52.248Z</updated>
    
    
    <summary type="html">&lt;p&gt;记录 CSS 重要知识点。&lt;/p&gt;</summary>
    
    
    
    <category term="前端进击笔记" scheme="https://kerita.me/categories/%E5%89%8D%E7%AB%AF%E8%BF%9B%E5%87%BB%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="CSS" scheme="https://kerita.me/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>HTML 加载过程</title>
    <link href="https://kerita.me/06/27/fe-attack/2-html/"/>
    <id>https://kerita.me/06/27/fe-attack/2-html/</id>
    <published>2021-06-27T00:00:00.000Z</published>
    <updated>2021-07-13T13:27:52.248Z</updated>
    
    
    <summary type="html">&lt;p&gt;浏览器在加载页面的过程会用到 GUI 渲染线程和 JavaScript 引擎线程，其中 GUI 渲染线程负责 HTML，JavaScript 引擎线程负责执行 JavaScript 脚本。&lt;/p&gt;</summary>
    
    
    
    <category term="前端进击笔记" scheme="https://kerita.me/categories/%E5%89%8D%E7%AB%AF%E8%BF%9B%E5%87%BB%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="HTML" scheme="https://kerita.me/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>什么是 Babel？</title>
    <link href="https://kerita.me/06/24/2021/babel/"/>
    <id>https://kerita.me/06/24/2021/babel/</id>
    <published>2021-06-24T00:00:00.000Z</published>
    <updated>2021-07-13T13:27:52.224Z</updated>
    
    
    <summary type="html">&lt;p&gt;Babel 对自己的定位：下一代 JavaScript 的编译器。它将新语法、新 API 编译成兼容代码，以便在老版本的浏览器也能使用。&lt;/p&gt;
&lt;p&gt;Babel 基于插件架构，如果什么插件都不提供，babel 也不做什么事情，其作用如下。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;const babel &amp;#x3D; code &amp;#x3D;&amp;gt; code&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="前端" scheme="https://kerita.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="工程化" scheme="https://kerita.me/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>前端知识体系</title>
    <link href="https://kerita.me/06/24/fe-attack/1-system/"/>
    <id>https://kerita.me/06/24/fe-attack/1-system/</id>
    <published>2021-06-24T00:00:00.000Z</published>
    <updated>2021-07-13T13:27:52.232Z</updated>
    
    
    <summary type="html">&lt;p&gt;2021 年前端基础知识体系，包括入门前端应该学习的专业知识与项目过需要的知识。&lt;/p&gt;</summary>
    
    
    
    <category term="前端进击笔记" scheme="https://kerita.me/categories/%E5%89%8D%E7%AB%AF%E8%BF%9B%E5%87%BB%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="体系" scheme="https://kerita.me/tags/%E4%BD%93%E7%B3%BB/"/>
    
  </entry>
  
  <entry>
    <title>什么是 npx？</title>
    <link href="https://kerita.me/06/23/2021/npx/"/>
    <id>https://kerita.me/06/23/2021/npx/</id>
    <published>2021-06-23T00:00:00.000Z</published>
    <updated>2021-07-13T13:27:52.232Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;什么是-npx&quot;&gt;&lt;a href=&quot;#什么是-npx&quot; class=&quot;headerlink&quot; title=&quot;什么是 npx&quot;&gt;&lt;/a&gt;什么是 npx&lt;/h2&gt;&lt;p&gt;npx 是一个用来运行 npm 包的工具，而无需全局安装该 npm 包，它随着 npm 5.2 版本发布。&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://kerita.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="工程化" scheme="https://kerita.me/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>什么是 DevOps、CI、CD？</title>
    <link href="https://kerita.me/06/21/2021/devops-ci-cd/"/>
    <id>https://kerita.me/06/21/2021/devops-ci-cd/</id>
    <published>2021-06-21T00:00:00.000Z</published>
    <updated>2021-07-13T13:27:52.224Z</updated>
    
    
    <summary type="html">&lt;p&gt;在了解前端工程化的时候，经常听到 DevOps、CI、CD，I 借这个机会搞清楚。&lt;/p&gt;
&lt;p&gt;DevOps 指用自动化工具更好的完成软件周期中的开发、测试和交付工作。&lt;/p&gt;
&lt;p&gt;CI 和 CD 是 DevOps 的一部分。CI 是指持续集成 (Continuous Integration)，CD 即指持续部署(Continuous Deploy)，也指持续交付(Continuous Delivery)。&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://kerita.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="工程化" scheme="https://kerita.me/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>记一次感冒</title>
    <link href="https://kerita.me/05/27/2021/cold/"/>
    <id>https://kerita.me/05/27/2021/cold/</id>
    <published>2021-05-27T00:00:00.000Z</published>
    <updated>2021-07-13T13:27:52.224Z</updated>
    
    
    <summary type="html">&lt;p&gt;5 月 24 日-5 月 26 日去南昌出差，三天基本没有午睡，晚上又没有休息好，食物多是多油且极辣的，导致感冒了。26 日早上喉咙有点干渴，而后双臂开始发酸，没有重视，下午到晚上开始发冷、疲劳。&lt;/p&gt;
&lt;p&gt;27、28 日勉强带着疲劳的身躯度过工作日，29、30 日周末开始喉咙痛。喉咙痛是扁桃体的发炎。包扁桃体发炎可分为以下两种：&lt;/p&gt;</summary>
    
    
    
    <category term="健康" scheme="https://kerita.me/categories/%E5%81%A5%E5%BA%B7/"/>
    
    
    <category term="感冒" scheme="https://kerita.me/tags/%E6%84%9F%E5%86%92/"/>
    
  </entry>
  
  <entry>
    <title>new 做了什么</title>
    <link href="https://kerita.me/04/13/2021/new/"/>
    <id>https://kerita.me/04/13/2021/new/</id>
    <published>2021-04-13T00:00:00.000Z</published>
    <updated>2021-07-13T13:27:52.232Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;JavaScript-中-new-做了什么&quot;&gt;&lt;a href=&quot;#JavaScript-中-new-做了什么&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 中 new 做了什么&quot;&gt;&lt;/a&gt;JavaScript 中 new 做了什么&lt;/h2&gt;&lt;p&gt;我们使用 new 和构造函数产生一个新的对象，那在这个过程 new 做了什么呢？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;生成一个空的对象 obj&lt;/li&gt;
&lt;li&gt;将 obj 的原型指向构造函数的 prototype&lt;/li&gt;
&lt;li&gt;将 obj 赋值 给上下文 this&lt;/li&gt;
&lt;li&gt;将 this 返回&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因此，下面代码将打印出 true 和 a&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://kerita.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JS" scheme="https://kerita.me/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>奇妙的 var,function,let</title>
    <link href="https://kerita.me/04/12/2021/var-let-function/"/>
    <id>https://kerita.me/04/12/2021/var-let-function/</id>
    <published>2021-04-12T00:00:00.000Z</published>
    <updated>2021-07-13T13:27:52.232Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;var-与-function&quot;&gt;&lt;a href=&quot;#var-与-function&quot; class=&quot;headerlink&quot; title=&quot;var 与 function&quot;&gt;&lt;/a&gt;var 与 function&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;var,function 不存在块作用域&lt;/li&gt;
&lt;li&gt;var, function 声明时会有变量提升,function 变量提升会提到最前面（块作用域定义除外），并且初始化，var 也会提升，但赋值为 undefined</summary>
    
    
    
    <category term="前端" scheme="https://kerita.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JS" scheme="https://kerita.me/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>this 指向</title>
    <link href="https://kerita.me/04/11/2021/this/"/>
    <id>https://kerita.me/04/11/2021/this/</id>
    <published>2021-04-11T00:00:00.000Z</published>
    <updated>2021-07-13T13:27:52.232Z</updated>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="前端" scheme="https://kerita.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JS" scheme="https://kerita.me/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>CommonJS 与 ES6 Module 的区别</title>
    <link href="https://kerita.me/04/03/2021/module/"/>
    <id>https://kerita.me/04/03/2021/module/</id>
    <published>2021-04-03T00:00:00.000Z</published>
    <updated>2021-07-13T13:27:52.232Z</updated>
    
    
    <summary type="html">&lt;p&gt;JavaScript 起初只是用来做页面的的简单交互，随着 Web 应用的复杂性越来越高，维护成本越来越大，模块化标准也在 ES6 版本应运而生。当然，在 ES6 Module 出现之前，社区在使用 Node.js 的过程中，也形成了适合 Node.js 的 CommonJS 模块标准。&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://kerita.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="模块化" scheme="https://kerita.me/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>travis-ci 构建报错</title>
    <link href="https://kerita.me/04/02/2021/travis-error/"/>
    <id>https://kerita.me/04/02/2021/travis-error/</id>
    <published>2021-04-02T00:00:00.000Z</published>
    <updated>2021-07-13T13:27:52.232Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h2&gt;&lt;p&gt;之前博客配置了 &lt;code&gt;travis-ci&lt;/code&gt; 的自动构建，昨晚写完 &lt;a href=&quot;/04/01/2021/event-loop/&quot; title=&quot;什么是事件循环 (Event Loop)&quot;&gt;什么是事件循环 (Event Loop)&lt;/a&gt;，push 到 &lt;code&gt;GitHub&lt;/code&gt; 就去睡觉了。早上起来看没有构建成功，报了以下错误：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;The command &amp;quot;eval yarn --frozen-lockfile &amp;quot; failed.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="构建" scheme="https://kerita.me/categories/%E6%9E%84%E5%BB%BA/"/>
    
    
    <category term="travis-ci" scheme="https://kerita.me/tags/travis-ci/"/>
    
  </entry>
  
  <entry>
    <title>什么是事件循环 (Event Loop)</title>
    <link href="https://kerita.me/04/01/2021/event-loop/"/>
    <id>https://kerita.me/04/01/2021/event-loop/</id>
    <published>2021-04-01T00:00:00.000Z</published>
    <updated>2021-07-13T13:27:52.224Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;事件循环&quot;&gt;&lt;a href=&quot;#事件循环&quot; class=&quot;headerlink&quot; title=&quot;事件循环&quot;&gt;&lt;/a&gt;事件循环&lt;/h1&gt;&lt;p&gt;事件循环 (Event Loop) 是 JavaScript 运行的机制，事件循环负责执行代码、收集和处理事件以及执行队列中的子任务。浏览器与 Node.js 的事件循环存在差异。&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://kerita.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JS" scheme="https://kerita.me/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>.npmrc 与 npm config 命令</title>
    <link href="https://kerita.me/03/29/2021/npmrc/"/>
    <id>https://kerita.me/03/29/2021/npmrc/</id>
    <published>2021-03-29T00:00:00.000Z</published>
    <updated>2021-07-13T13:27:52.232Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;npmrc-是什么&quot;&gt;&lt;a href=&quot;#npmrc-是什么&quot; class=&quot;headerlink&quot; title=&quot;.npmrc 是什么&quot;&gt;&lt;/a&gt;.npmrc 是什么&lt;/h1&gt;&lt;p&gt;.npmrc 是 npm 的配置文件。当运行 npm 命令时，会从 .npmrc 文件读取相关配置。&lt;/p&gt;
&lt;p&gt;对于中国开发者，最常见的 .npmrc 配置是设置淘宝源，加快 npm 包的下载速度。&lt;/p&gt;
&lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;registry=https:&lt;span class=&quot;comment&quot;&gt;//registry.npm.taobao.org/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="前端" scheme="https://kerita.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="npm" scheme="https://kerita.me/tags/npm/"/>
    
  </entry>
  
</feed>
