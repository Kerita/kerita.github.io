<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kerita</title>
  <subtitle>自律谦逊，承担责任，推迟满足感，你要热爱它</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://kerita.github.io/"/>
  <updated>2017-09-26T15:20:04.760Z</updated>
  <id>https://kerita.github.io/</id>
  
  <author>
    <name>Kerita</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Awards 项目总结</title>
    <link href="https://kerita.github.io/2017/09/24/2017/awards-project/"/>
    <id>https://kerita.github.io/2017/09/24/2017/awards-project/</id>
    <published>2017-09-23T16:00:00.000Z</published>
    <updated>2017-09-26T15:20:04.760Z</updated>
    
    <content type="html"><![CDATA[<p>本周二（19号）彻底完成公司 Awards 项目的需求和需求修改并上线，趁热打铁写下完成项目过程的一些思考。</p>
<a id="more"></a>
<h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p><a href="https://awards.insta360.com/about?locale=zh" target="_blank" rel="external">Awards 项目</a> 是 Insta360 针对全景作品进行有奖征集一个项目，项目工作量主要在前端（故所说项目都指前端部分项目—— fe-awards），完成整个项目大概花了四天时间（指完成第一版需求的功能，不包括后来改需求时间）。</p>
<h2 id="React-mobx-架构"><a href="#React-mobx-架构" class="headerlink" title="React+mobx 架构"></a>React+mobx 架构</h2><p>整个项目采用 React+mobx 的架构， React 完成项目 View 层面的呈现，mobx 负责一些项目数据的管理。</p>
<ul>
<li>React</li>
</ul>
<ol>
<li><p>Vue、 React、 Angular<br>以 Vue、 React、 Angular 为代表的 mvvm 框架取代 jQuery 成为当下前端圈最热门的框架，解决的最大痛点就是让前端工程师从繁琐的 DOM 操作解脱。</p>
</li>
<li><p>实例<br>以隐藏一个 div 为例，jQuery 需要获取该 div，再设置display 为 none, 或者从该 div 的父元素利用 DOM 操作移除该元素；而 React 的只需要在该 div 的 style属性中给 display 属性绑定一个三元条件判断,将组件 state 中的某个变量作为判断条件，当 state 的变量值发生改变时，界面 div 是否显示也会随着改变。</p>
</li>
<li><p>Vue&amp;React<br>在使用 React 前也用过 Vue，使用过程最大的感受就是 Vue 提供了很多语法糖，写的时候很顺畅，随心所欲； React 则没有那么多语法糖，甚至连需要学习的新语法也很少。</p>
<p>很多人都说 Vue 比 React 容易上手，其实如果掌握了 mvvm 这种思想，React 比 Vue 更容易上手，因为除了 JSX 这种混合 JS 和 HTML 的语法、几个生态周期函数、setState()，React 就基本没有东西了，而 Vue 则还有需要掌握一些语法。但如上面所说， React 写起来就是没有 Vue 顺畅。</p>
</li>
</ol>
<ul>
<li>mobx<br>使用 mobx 而不是常见的 Redux，是为了解决 React 单向数据流的不方便，实现数据双向绑定自动更新，特别是那些存储于数据管理框架中给各组件共享的数据。</li>
</ul>
<p>下面介绍 mobx 的一些特性，具体内容查看 <a href="http://cn.mobx.js.org/" target="_blank" rel="external">mobx 文档</a></p>
<ol>
<li><p>数据双向绑定自动更新<br>项目中的 mobx 存储了一个变量 locale，指明当前页面使用的是哪种语言，当调用 mobx 中定义的方法改变 locale 时，所有组件引用这个 locale 的地方都会自动更新，对页面重新渲染。</p>
</li>
<li><p>数据自动持久化<br>还是 locale 这个值，在 mobx 声明时利用 @persist 修饰符指明需要持久化，当 locale 发生改变时便会自动存储在 localstorge 中，下次加载也会自动读取这个值。</p>
</li>
<li><p>计算属性<br>声明计算属性，根据其他值，该属性设置不同的值。当 locale 为 zh 时，加载中文语言包，当 locale 为 en 时，加载英文语言包。</p>
</li>
</ol>
<h2 id="统计代码追踪"><a href="#统计代码追踪" class="headerlink" title="统计代码追踪"></a>统计代码追踪</h2><p>在项目中加了 growingIO、百度统计、ga、fb pixel等统计代码，对访问数据进行记录。</p>
<p>同时加了一些 meta 信息，使得在 facebook 分享这个项目时，可以显示我们想要的预览图。</p>
<p>这个地方基本没什么问题，就是 ga 上与其他项目使用同个 id 追踪时，这个项目无法利用过滤器中的主机名（awards.insta360.com）筛选出来，但相同情况下的 blog.insta360.com 就筛选出来了。</p>
<h2 id="移动端适配方案"><a href="#移动端适配方案" class="headerlink" title="移动端适配方案"></a>移动端适配方案</h2><p>我对整个项目进行分割—— header,footer,banner,about,instruction,terms。</p>
<ul>
<li><p>对于 header,footer,banner 这三个PC端和移动端 UI 上差异比较大的，我分开来写，根据不同屏幕加载不同组件。</p>
</li>
<li><p>对于 about,instruction,terms UI 差别不大，利用媒体查询 @media(max-width: 768px) 对移动端做了适配。</p>
</li>
</ul>
<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><ul>
<li><p>修改 Antd 组件样式<br>项目使用 React 经典组件库 Antd 进行开发，无论是在布局还是表单组件上都很方便，但是有些地方例如 单选、多选，因为各个公司设计不同，不能直接使用，想要使用 antd Form 组件各种方便的 api，如验证数据有效性、required 、初始值，就只能痛苦地修改 Antd 组件的样式。而且只能写在 App.css 中才能控制到 Antd 的样式，代码有些丑了。</p>
<p>如果有时间针对表单组件，联合公司设计师写一套适合公司 UI 风格的 React 组件，接下来会很大方便开发。</p>
</li>
<li><p>Insta360 Air app 语言参数不生效<br>因为项目有多语言，而且要求首次加载的时候就能指定语言，所以会获取 url 的 locale 参数值（zh或en），没有的取 localstorage 的值, localstorage 也没有的话默认为 en。</p>
<p>但是这个参数在 Insta360 Air app 的 webview 中无法生效，一开始以为是webview 禁止取参数，测试发现是可以的。摸索了一些，发现是 mobx 持久化函数的回调没法生效，所以只要把 取参数设置 locale 这段代码 移到其他就行了。</p>
<p>但有个奇怪的地方，就是只在 Insta360 Air app 的 webview 有这个问题，难道这个 app 的 webview 加了什么特技？</p>
</li>
</ul>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul>
<li>不足之处</li>
</ul>
<ol>
<li><p>组件化程度不够高<br>一开始觉得这个项目数据流动不多，所以没有抽出很多小组件，导致组件化程度不够高，有些组件代码比较多，对应的 CSS 代码也多。所以即使数据不多的情况下，抽组件依然有好处</p>
</li>
<li><p>代码质量<br>无论是 JSX、 json、 还是 CSS，都尽可能写得好看漂亮，不仅有利于之后维护，写的时候也清晰。</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本周二（19号）彻底完成公司 Awards 项目的需求和需求修改并上线，趁热打铁写下完成项目过程的一些思考。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://kerita.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="项目" scheme="https://kerita.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>带我走</title>
    <link href="https://kerita.github.io/2017/09/20/2017/take-me-to-your-heart/"/>
    <id>https://kerita.github.io/2017/09/20/2017/take-me-to-your-heart/</id>
    <published>2017-09-19T16:00:00.000Z</published>
    <updated>2017-09-20T15:44:47.844Z</updated>
    
    <content type="html"><![CDATA[<p>《带我走》- 苏打绿<br><a id="more"></a></p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=27946612&auto=1&height=66"></iframe>

<div style="text-align:center"><img src="http://7xpofw.com1.z0.glb.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20170920234314.jpg" width="375" height="375" alt=""> </div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《带我走》- 苏打绿&lt;br&gt;
    
    </summary>
    
      <category term="歌" scheme="https://kerita.github.io/categories/%E6%AD%8C/"/>
    
    
      <category term="苏打绿" scheme="https://kerita.github.io/tags/%E8%8B%8F%E6%89%93%E7%BB%BF/"/>
    
  </entry>
  
  <entry>
    <title>关于牙套</title>
    <link href="https://kerita.github.io/2017/09/14/2017/about-brace/"/>
    <id>https://kerita.github.io/2017/09/14/2017/about-brace/</id>
    <published>2017-09-13T16:00:00.000Z</published>
    <updated>2017-09-13T16:52:56.070Z</updated>
    
    <content type="html"><![CDATA[<p>经历大概两年的矫正，终于拆掉了牙齿上的矫正器，并结束每月一次的调整。值此之际，简单写下一些感受和心得。</p>
<a id="more"></a>
<h2 id="箍牙要趁早"><a href="#箍牙要趁早" class="headerlink" title="箍牙要趁早"></a>箍牙要趁早</h2><p>化用张爱玲的“出名要趁早”来说箍牙这件事越早越好。在牙齿定型后如果出现不整齐，那就早点去箍牙吧。一是越早箍牙越早享受牙齿整齐的开心，也更容易整；二是箍牙费用一年比一年水涨船高。</p>
<h2 id="箍牙历程"><a href="#箍牙历程" class="headerlink" title="箍牙历程"></a>箍牙历程</h2><p>箍牙过程最痛苦的是戴上牙套的前两周，牙齿软的根本无法吃一丢丢硬的东西，我是靠着喝粥、吃面、吃鱼度过那两周的，肚子饿得很快，多吃几餐就好了。</p>
<p>而后每个月的调整后的第一周，牙齿也会有点软，撕咬力不足。不过还好，只要不吃特别韧的东西就行。每个月的调整按时去，准时去可以缩短矫正周期。</p>
<p>把牙套摘下后还需要继续戴保持器，至于戴多久看疗效。现在是白天有颗牙齿跑偏，晚上戴保持器矫正回去。</p>
<p>具体矫正过程戳这里：<a href="http://zhihu.com/question/36994221/answer/75198033" target="_blank" rel="external">箍牙历程</a></p>
<h2 id="箍牙疗效"><a href="#箍牙疗效" class="headerlink" title="箍牙疗效"></a>箍牙疗效</h2><p>还行，能看了，能大大方方地笑出来了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;经历大概两年的矫正，终于拆掉了牙齿上的矫正器，并结束每月一次的调整。值此之际，简单写下一些感受和心得。&lt;/p&gt;
    
    </summary>
    
      <category term="总结" scheme="https://kerita.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="健康" scheme="https://kerita.github.io/tags/%E5%81%A5%E5%BA%B7/"/>
    
  </entry>
  
  <entry>
    <title>ES6变量解构引发的面试题的猜想</title>
    <link href="https://kerita.github.io/2017/08/31/2017/about-destructuring/"/>
    <id>https://kerita.github.io/2017/08/31/2017/about-destructuring/</id>
    <published>2017-08-30T16:00:00.000Z</published>
    <updated>2017-09-01T17:39:05.282Z</updated>
    
    <content type="html"><![CDATA[<p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。（来自阮一峰ES6教程）</p>
<a id="more"></a>
<h3 id="交换变量值"><a href="#交换变量值" class="headerlink" title="交换变量值"></a>交换变量值</h3><p>同时阮一峰还说了用变量解构可以对很轻松的实现对两个值进行交换，他给出了例子，关于面试题的猜想就是由这个例子引发的。</p>
<h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><figure class="highlight gauss"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> x = <span class="number">1</span></div><div class="line"><span class="keyword">let</span> y = <span class="number">2</span></div><div class="line">[x,y] = [y,x]</div><div class="line"></div><div class="line">console.<span class="built_in">log</span>(x)</div><div class="line">console.<span class="built_in">log</span>(y)</div></pre></td></tr></table></figure>
<p>请问上面的代码将输出什么？<br>A. 2 1<br>B. Uncaught ReferenceError: y is not defined</p>
<p>按照前面的说法，选A。但之所以能成为面试题，是因为有坑。</p>
<h3 id="考点"><a href="#考点" class="headerlink" title="考点"></a>考点</h3><ul>
<li>变量解构。 利用变量解构可以进行赋值。</li>
<li>JS什么时候必须加分号。第一个字符是’[‘，’(‘,’+’,’-‘, ‘/‘,此时上一行不加分号，就不会将上下两行代码分开。</li>
</ul>
<p>所以不加分号时，上面的代码变成这样。因为let声明变量暂时性死区的特性，此时的2[x,y]中的y还是未定义，所以是ReferenceError。</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="attr">x=1</span></div><div class="line"><span class="keyword">let</span> <span class="attr">y</span> = <span class="number">2</span>[x,y] = [y,x]</div></pre></td></tr></table></figure>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">ECMAScript 6 入门</a><br><a href="https://www.zhihu.com/question/20298345" target="_blank" rel="external">JavaScript 语句后应该加分号么？</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。（来自阮一峰ES6教程）&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://kerita.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JS" scheme="https://kerita.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>解决iOS下音频无法自动播放</title>
    <link href="https://kerita.github.io/2017/08/21/2017/audio-cannot-autoplay-in-iOS/"/>
    <id>https://kerita.github.io/2017/08/21/2017/audio-cannot-autoplay-in-iOS/</id>
    <published>2017-08-20T16:00:00.000Z</published>
    <updated>2017-08-21T16:43:35.667Z</updated>
    
    <content type="html"><![CDATA[<p>Bieber走后，开始接手公司的全景分享系统，主要是利用这个系统做一些活动页面。有个需求需要在 h5 中加背景音乐，打开链接后立即播放。原本想不就是 audio 标签加 autoplay 属性值吗？简单。但如果这么简单就不会有这篇文章了。</p>
<a id="more"></a>
<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>写完在Chrome的移动端模式下测试，链接打开背景音乐就自动播放，通过钉钉将局域网测试链接发给同事，也正常。但是到了h5的主战场微信就不行了，在Safari打开也是不行。</p>
<p>查了资料是 iOS 内的 Safari 禁止音频自动播放，所以 Safari 下无法自动播放音频，采用 iOS 内 Safari 打开链接的微信也不行，而钉钉自己内置了浏览器，所以没问题。</p>
<h3 id="bug原因"><a href="#bug原因" class="headerlink" title="bug原因"></a>bug原因</h3><p>接着找资料看能不能hack掉Safari这个糟糕的特性（官方文档是说怕音频自动播放消耗流量，但是图片也会啊，难道就禁止大图片了？），只找到 iOS4 的hack方法，在 iOS8 都失效，更不用说现在已经 iOS10 了。最后的解决办法是，在 document 绑定 touchstart/click 事件，用户触摸或者点击屏幕，音频就自动播放。</p>
<p>但你可能会奇怪？ iOS 下朋友圈有些 h5 背景音乐不是自动播放吗？这是因为微信的 SDK 给出了解决办法。</p>
<h3 id="解决代码"><a href="#解决代码" class="headerlink" title="解决代码"></a>解决代码</h3><p>下面给出完整的代码。</p>
<figure class="highlight plain"><figcaption><span>bg-audio为audio标签id</span></figcaption><table><tr><td class="code"><pre><div class="line">// 解决iOS禁止自动播放音频</div><div class="line">// 微信自动播放音频</div><div class="line">let bgAudio = document.getElementById(&apos;bg-audio&apos;)</div><div class="line">bgAudio.play();</div><div class="line">document.addEventListener(&quot;WeixinJSBridgeReady&quot;,function () &#123;</div><div class="line">    bgAudio.play();</div><div class="line">&#125;, false);</div><div class="line">// 其他应用在click/touch时触发播放</div><div class="line">document.addEventListener(&apos;click&apos;, function () &#123;</div><div class="line">    bgAudio.play()</div><div class="line">&#125;)  </div><div class="line">document.addEventListener(&apos;touchstart&apos;, function () &#123;</div><div class="line">    bgAudio.play()</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="视频播放"><a href="#视频播放" class="headerlink" title="视频播放"></a>视频播放</h3><p>关于视频播放，可以看看这两篇博文<br><a href="http://leonshi.com/2015/09/06/mobile-video-play/" target="_blank" rel="external">移动端视频播放那些事儿</a><br><a href="https://imququ.com/post/new-video-policies-for-ios10.html" target="_blank" rel="external">iOS 10 Safari 视频播放新政策</a></p>
<h3 id="活动页面"><a href="#活动页面" class="headerlink" title="活动页面"></a>活动页面</h3><p><a href="https://s.insta360.com/g/a2b1b5d7d9304b5d7da952d9d0afe39c?activity=npc&amp;noad=true&amp;from=singlemessage&amp;isappinstalled=0" target="_blank" rel="external">NPC 不破不立改造展</a><br><a href="https://s.insta360.com/g/7f8a2003b99c61939ff85ef4bd61a829?activity=crland&amp;noad=true&amp;from=groupmessage&amp;isappinstalled=0" target="_blank" rel="external">双城对话 圳京世界</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Bieber走后，开始接手公司的全景分享系统，主要是利用这个系统做一些活动页面。有个需求需要在 h5 中加背景音乐，打开链接后立即播放。原本想不就是 audio 标签加 autoplay 属性值吗？简单。但如果这么简单就不会有这篇文章了。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://kerita.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="移动端" scheme="https://kerita.github.io/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
      <category term="iOS" scheme="https://kerita.github.io/tags/iOS/"/>
    
      <category term="audio" scheme="https://kerita.github.io/tags/audio/"/>
    
      <category term="HTML" scheme="https://kerita.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>毕业生入户深圳</title>
    <link href="https://kerita.github.io/2017/08/18/2017/about-hukou/"/>
    <id>https://kerita.github.io/2017/08/18/2017/about-hukou/</id>
    <published>2017-08-17T16:00:00.000Z</published>
    <updated>2017-08-20T15:03:46.701Z</updated>
    
    <content type="html"><![CDATA[<p>今年（2017年）本科毕业了，工作在深圳就把户口迁了过来，至于迁与不迁户口的优劣，各人有各人的看法，此处不表。本文目的是把个人办理户口迁移的过程记录下来（因单位没有接收权力），造福后来人。<br><a id="more"></a></p>
<h3 id="代理机构办理《接收函》"><a href="#代理机构办理《接收函》" class="headerlink" title="代理机构办理《接收函》"></a>代理机构办理《接收函》</h3><p>应届本科毕业生入深户是通过人才引进政策，所以第一步需要到深圳市人力资源和社会保障局网站进行评审，评审通过后选择就近的代理机构办理接收函，当然代理机构还负责毕业后接收档案。办理时需要携带学校发的《毕业生就业推荐表》等资料，委托费用是200多块。<br>大概一周之后可以拿到一式两份《接收函》，一份拿到学校办理报到证，一份自个留着，之后会用到。同时，代理机构还会给一份代理协议和办理入户指南，这两个也需要留着。<br>建议想入深户的，五月份就可以办理接收函。</p>
<p>需要的证件：<br><figure class="highlight asciidoc"><table><tr><td class="code"><pre><div class="line"><span class="bullet">- </span>《毕业生就业推荐表》</div></pre></td></tr></table></figure></p>
<h3 id="学校领取《报到证》"><a href="#学校领取《报到证》" class="headerlink" title="学校领取《报到证》"></a>学校领取《报到证》</h3><p>将一份接收函交给学校的就业指导中心，并办理《报到证》，《报到证》要关注的点是报到的地方应为“深圳市人力资源和社会保障局”。<br>报到证大概要6月底、7月份初毕业时，学校才会发放。<br>拿到报到证、毕业证、学位证等证件就可以会老家办理《户口迁移证》了。</p>
<p>需要的证件：<br><figure class="highlight asciidoc"><table><tr><td class="code"><pre><div class="line"><span class="bullet">- </span>《接收函》</div></pre></td></tr></table></figure></p>
<h3 id="老家办理《户口迁移证》"><a href="#老家办理《户口迁移证》" class="headerlink" title="老家办理《户口迁移证》"></a>老家办理《户口迁移证》</h3><p>回老家办理《户口迁移证》是所有步骤中最坑爹的部分。深圳的政策是只要拿着《接收函》和《报到证》就可以回老家办理《户口迁移证》，但是，地方派出所并不认这个，所以导致每个派出所需要的证件种类都不同，甚至是同个县不同镇之间。需要哪些证件，大概取决于派出所办理人员的心情吧。<br>所以最好先打听清楚老家派出所需要哪些资料，然后再回家办理，这样不会走很多冤枉路。</p>
<p>可能需要的证件（各个地方不同）：<br><figure class="highlight haml"><table><tr><td class="code"><pre><div class="line">-<span class="ruby"> 《毕业证》</span></div><div class="line">-<span class="ruby"> 《学位证》</span></div><div class="line">-<span class="ruby"> 《报到证》</span></div><div class="line">-<span class="ruby"> 《公司证明》</span></div><div class="line">-<span class="ruby"> 《劳动合同》</span></div></pre></td></tr></table></figure></p>
<h3 id="福田行政服务大厅办理报到"><a href="#福田行政服务大厅办理报到" class="headerlink" title="福田行政服务大厅办理报到"></a>福田行政服务大厅办理报到</h3><p>拿到户口迁移证，按着代理机构给的入户指南上的说明准备各种证件，报到之后工作人员会给《入户信息卡》和《介绍信》去办理入户，如果在第一步选择在深圳“农转非”的，还有《农转非信息卡》。</p>
<p>需要的证件：<br><figure class="highlight haml"><table><tr><td class="code"><pre><div class="line">-<span class="ruby"> 《接收函》</span></div><div class="line">-<span class="ruby"> 《学位证》</span></div><div class="line">-<span class="ruby"> 《毕业证》</span></div><div class="line">-<span class="ruby"> 《身份证》</span></div><div class="line">-<span class="ruby"> 《报到证》</span></div><div class="line">-<span class="ruby"> 《学信网两年以上学历验证证明》</span></div><div class="line">-<span class="ruby"> 《户口迁移证》</span></div></pre></td></tr></table></figure></p>
<h3 id="深圳任一派出所办理入户"><a href="#深圳任一派出所办理入户" class="headerlink" title="深圳任一派出所办理入户"></a>深圳任一派出所办理入户</h3><p>《入户信息卡》有办理需要的各种资料，按照说明准备，因已上交所以也不太记得。</p>
<p>需要的证件（包括但不限于）：<br><figure class="highlight haml"><table><tr><td class="code"><pre><div class="line">-<span class="ruby"> 《身份证》</span></div><div class="line">-<span class="ruby"> 《户口迁移证》</span></div><div class="line">-<span class="ruby"> 身份证照片和回执</span></div><div class="line">-<span class="ruby"> 《入户信息卡》</span></div><div class="line">-<span class="ruby"> 《农转非信息卡》（若为在深农转非）</span></div><div class="line">-<span class="ruby"> 《委托协议》</span></div></pre></td></tr></table></figure></p>
<h3 id="申请租房补贴"><a href="#申请租房补贴" class="headerlink" title="申请租房补贴"></a>申请租房补贴</h3><p>在入户成功后，便可在深圳市人力资源和社会保障局官网申请租房补贴。</p>
<p>需要的证件：<br><figure class="highlight asciidoc"><table><tr><td class="code"><pre><div class="line"><span class="bullet">- </span>无</div></pre></td></tr></table></figure></p>
<h3 id="上交介绍信与报到证到代理机构"><a href="#上交介绍信与报到证到代理机构" class="headerlink" title="上交介绍信与报到证到代理机构"></a>上交介绍信与报到证到代理机构</h3><p>介绍信自己复印几份留着申请区级补贴用，把介绍信原件和报到证交到代理机构。</p>
<p>需要的证件：<br><figure class="highlight haml"><table><tr><td class="code"><pre><div class="line">-<span class="ruby"> 介绍信</span></div><div class="line">-<span class="ruby"> 报到证</span></div></pre></td></tr></table></figure></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>办理手续的时候照着工作人员给的办事指南进行办理，每年可能有所不同，如有错误或不同，笔者概不负责，敬请谅解。</li>
<li>证件如毕业证、学位证和身份证都是需要经常用到，可以一次性多复印几份，</li>
<li>因为时间原因，可能有遗落或错误，欢迎指出，谢谢！</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今年（2017年）本科毕业了，工作在深圳就把户口迁了过来，至于迁与不迁户口的优劣，各人有各人的看法，此处不表。本文目的是把个人办理户口迁移的过程记录下来（因单位没有接收权力），造福后来人。&lt;br&gt;
    
    </summary>
    
      <category term="总结" scheme="https://kerita.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>关于《吐槽大会》</title>
    <link href="https://kerita.github.io/2017/08/03/2017/about-roast/"/>
    <id>https://kerita.github.io/2017/08/03/2017/about-roast/</id>
    <published>2017-08-02T16:00:00.000Z</published>
    <updated>2017-09-13T16:17:08.434Z</updated>
    
    <content type="html"><![CDATA[<p>几天前在某个地方，或是知乎回答，或是公众号文章，看到关于《吐槽大会》的议论，觉得挺有意思，遂去搜一搜、看一看。</p>
<a id="more"></a>
<h3 id="保持好奇心"><a href="#保持好奇心" class="headerlink" title="保持好奇心"></a>保持好奇心</h3><p>这里顺便说另一个事情，作为一个年轻人，对于新生事物，应该保持好奇心；而不是看一眼，连思考都没有，就下结论。</p>
<p>之前看到朋友圈有几个人对吴亦凡参与的《中国有嘻哈》评价颇高，第一眼看到吴亦凡，觉得质量不会很高，就没有去看。过了好几天，又在朋友圈看到关于《中国有嘻哈》的讨论，这才去看，质量果真不咋地。哈哈哈。当然，这不影响我以后对新生事物保持好奇心。</p>
<h3 id="吴亦凡、鹿晗与黄子韬"><a href="#吴亦凡、鹿晗与黄子韬" class="headerlink" title="吴亦凡、鹿晗与黄子韬"></a>吴亦凡、鹿晗与黄子韬</h3><p>吴亦凡的黑点在于：一是没有与名气相匹配的作品；二是骗炮门；三是面相不善，不像一个善良的人。相对而言，鹿晗还是挺面善的，但也是没有与名气匹配的作品；黄子韬倒是有跟名气相匹配的表情包，但是也不面善。</p>
<h3 id="吐槽大会介绍"><a href="#吐槽大会介绍" class="headerlink" title="吐槽大会介绍"></a>吐槽大会介绍</h3><p>扯远了，回到《吐槽大会》。《吐槽大会》第一季已经结束了，总共有十期，每期会有一个主咖，外加6个嘉宾（偶尔也有七个嘉宾），当然还有一个主持人。虽然十期挑着看还没看完，但是已经按耐不住想“吐槽”的心情了。（其实是十一期，第0期周杰场，内容因为太污刚播出就被禁了，节目组也进行了整改，腾讯视频也再没把这一期算进去。）</p>
<h3 id="主持人"><a href="#主持人" class="headerlink" title="主持人"></a>主持人</h3><p>主持人最重要的就是把整个节目衔接流畅，其次是咬字要清楚；主持这个节目呢，当然还需要幽默，不仅要能拿主咖嘉宾开玩笑，更要能自嘲。</p>
<p>《吐槽大会》的主持人一般都是张绍刚，偶尔也会是王自健。两个人相比，我更喜欢张绍刚。在串联节目、吐字方面、幽默和槽点，张绍刚都更胜一筹。偶尔换换王自健来主持也是不错的，不腻。</p>
<h3 id="主咖"><a href="#主咖" class="headerlink" title="主咖"></a>主咖</h3><p>主咖也就是每期的主角，节目就是从主持人吐槽主咖开始，然后嘉宾一个接着一个上台继续吐槽，嘉宾间也会互相吐槽，最后主咖反击。这样一个需要接受七个人吐槽的主角：一是必然在普通观众中知名度高，如果找一个八线演员，观众看到本期主咖名字，就没有想看的欲望了；二是要有槽点可以吐，但是槽点一定是要能洗白的，吸毒或者台独之类的槽点就不适合了；三是要幽默，最后的反击越犀利越好。</p>
<p>总共十一期节目，看了周杰、李湘、曹云金、大张伟、唐国强、蔡国庆、小沈阳、薛之谦和凤凰传奇这几期。比较好看的是曹云金、唐国强、和凤凰传奇三期，周杰场其实也还行，但因为是第0期，节目有些粗糙（排名分先后）。这几个主咖，至少都满足了上面的第一、二个条件，幽默程度也都还行，当然最6的还是说相声的曹云金了。</p>
<p>至于其他几个人呢，李湘、薛之谦、蔡国庆、小沈阳的槽点都不是很值得吐，大张伟的槽点是多次歌曲抄袭，这个槽点不适合用来吐槽，洗不白。</p>
<h3 id="嘉宾"><a href="#嘉宾" class="headerlink" title="嘉宾"></a>嘉宾</h3><p>合适的主咖很重要，会吐槽的嘉宾也很重要。如果有跟主咖关系密切而且又很会吐槽的嘉宾，节目就好看了，唐国强场的王刚就是这么一个嘉宾。吐槽时把握节奏太好了，不仅吐槽唐国强好笑，吐槽嘉宾史航的时候也很好笑，特别是结合史航身世“存在即合理”的哲学梗，。</p>
<p>其他嘉宾除了李诞和池子这两个钉子户，其他嘉宾的吐槽并没有给我留下太深的印象。李诞和池子两个策划人每期都会上，针对嘉宾和主咖的吐槽都还蛮好笑的，池子比李诞幽默感更强，但论节奏感还是比不上老戏骨王刚。因为他们上了太多期，其他嘉宾针对他们的吐槽也变成老生常谈。</p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>看完《吐槽大会》后，也有一种想写下一段吐槽自己的文字，但还没有想好如何写，之后补上。</p>
<p>顺便说一句，国内这几年网络综艺节目发展得挺不错的，《快乐大本营》和《天天向上》收视率没那么高了吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;几天前在某个地方，或是知乎回答，或是公众号文章，看到关于《吐槽大会》的议论，觉得挺有意思，遂去搜一搜、看一看。&lt;/p&gt;
    
    </summary>
    
      <category term="总结" scheme="https://kerita.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="幽默" scheme="https://kerita.github.io/tags/%E5%B9%BD%E9%BB%98/"/>
    
  </entry>
  
  <entry>
    <title>Markdown小技巧</title>
    <link href="https://kerita.github.io/2017/07/10/2017/markdown-skills/"/>
    <id>https://kerita.github.io/2017/07/10/2017/markdown-skills/</id>
    <published>2017-07-09T16:00:00.000Z</published>
    <updated>2017-07-10T12:00:44.928Z</updated>
    
    <content type="html"><![CDATA[<p>最近经常用markdown写作，特别是将线上笔记本切换到为知笔记之后。使用频率增加就想提高效率，参考网上的文章，整理了这篇Markdown的小技巧。</p>
<a id="more"></a>
<h3 id="输入代码"><a href="#输入代码" class="headerlink" title="输入代码"></a>输入代码</h3><ol>
<li>前后输入三个反引号 <figure class="highlight 1c"><table><tr><td class="code"><pre><div class="line">console.<span class="built_in">log</span>()</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="插入空格（大多数用于首行缩进）"><a href="#插入空格（大多数用于首行缩进）" class="headerlink" title="插入空格（大多数用于首行缩进）"></a>插入空格（大多数用于首行缩进）</h3><ol>
<li><code>&amp;emsp;&amp;emsp;</code><br>测试&emsp;&emsp;测试</li>
</ol>
<h3 id="显示图片大小并居中"><a href="#显示图片大小并居中" class="headerlink" title="显示图片大小并居中"></a>显示图片大小并居中</h3><ol>
<li><code>&lt;div style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;图片地址&quot; width=&quot;图片显示宽度&quot; height=&quot;显示高度&quot; alt=&quot;图片名称&quot;/&gt; &lt;/div&gt;</code><div style="text-align:center"><img src="http://7xpofw.com1.z0.glb.clouddn.com/wechat-qr-code%281%29.JPG" width="200px" height="266px" alt="qrcode"></div>

</li>
</ol>
<h3 id="斜体和粗体"><a href="#斜体和粗体" class="headerlink" title="斜体和粗体"></a>斜体和粗体</h3><ol>
<li>斜体 <code>*</code><br><em>斜体示例</em></li>
<li>粗体 <code>**</code><br><strong>粗体示例</strong></li>
<li>斜体加粗体 <code>***</code><br><strong><em>示例</em></strong></li>
</ol>
<h3 id="插入链接"><a href="#插入链接" class="headerlink" title="插入链接"></a>插入链接</h3><ol>
<li><code>[text](link)</code><br><a href="http://www.jianshu.com/p/9d94660a96f1" target="_blank" rel="external">Markdown使用小技巧</a></li>
</ol>
<h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><ol>
<li><code>![text](link)</code><br><img src="http://7xpofw.com1.z0.glb.clouddn.com/wechat-qr-code%281%29.JPG" alt=""></li>
</ol>
<h3 id="插入水平线"><a href="#插入水平线" class="headerlink" title="插入水平线"></a>插入水平线</h3><ol>
<li><code>___ 或者 ***</code>  </li>
</ol>
<hr>
<hr>
<h3 id="高亮文字"><a href="#高亮文字" class="headerlink" title="高亮文字"></a>高亮文字</h3><ol>
<li><code>`` text `` </code><br><code>高亮文字</code></li>
</ol>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接:"></a>参考链接:</h3><ol>
<li><a href="http://www.jianshu.com/p/9d94660a96f1" target="_blank" rel="external">Markdown使用小技巧</a></li>
<li><a href="http://www.jianshu.com/p/ac83db608a7e" target="_blank" rel="external">Markdown使用技巧,轻松搞定Markdown</a></li>
<li><a href="http://www.jianshu.com/p/q81RER" target="_blank" rel="external">献给写作者的 Markdown 新手指南</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近经常用markdown写作，特别是将线上笔记本切换到为知笔记之后。使用频率增加就想提高效率，参考网上的文章，整理了这篇Markdown的小技巧。&lt;/p&gt;
    
    </summary>
    
      <category term="小技巧" scheme="https://kerita.github.io/categories/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="Markdown" scheme="https://kerita.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>毕业找房记</title>
    <link href="https://kerita.github.io/2017/07/09/2017/find-house/"/>
    <id>https://kerita.github.io/2017/07/09/2017/find-house/</id>
    <published>2017-07-08T16:00:00.000Z</published>
    <updated>2017-08-18T14:43:44.406Z</updated>
    
    <content type="html"><![CDATA[<p>七月毕业，离开学校回到深圳才开始找房，其实这个时候找房子有点晚了，蛮多毕业生六月份就提前找好房子了。</p>
<a id="more"></a>
<p>（201700806更新）</p>
<h3 id="豆瓣找房1-0"><a href="#豆瓣找房1-0" class="headerlink" title="豆瓣找房1.0"></a>豆瓣找房1.0</h3><p>一开始找房子，在豆瓣租房小组看到离公司旁边U小区的房源就豆油联系了一下，加了微信后才知道原来是链家的中介A（以下简称A）。第二天带我看房又说U小区没房了，所以带我去看了V小区和w小区的房。V小区是1460，w小区月租2000，V小区就在公司对面所以个人对V小区是比较满意的，决定租那间。决定签约前一天，又自己在自如app上联系宝安中心的管家B（以下简称B）带我去看了一次房，同时A也把B的微信给我，因为他要去军训没办法带我办理交接，让B带我办理。</p>
<p>不幸的是，天健那房子没抢到，A此时已经去军训了，无法带我看房，而B知道我没抢到天健的房子挺热心的，所以我开始联系B带我去看自如的房子。</p>
<p>B带我看了几间房，小区X一间1700+的还挺满意的，此时A发现居然是B带我看房就找我反复撕逼，而且不仅找我撕逼，还找到自如的区域经理，说自如的人抢他客户。心累啊，我挺感谢A第一次带我看房，我才知道自如房，但是你没时间带我看房，还不让别人带我看房？最后跟他说，谁带我看的房，我就跟谁签。会这么说，也是因为V小区那房被其他人抢到后迟迟没有确认，还可能抢到。</p>
<h3 id="豆瓣找房2-0与自如"><a href="#豆瓣找房2-0与自如" class="headerlink" title="豆瓣找房2.0与自如"></a>豆瓣找房2.0与自如</h3><p>继续观望V小区房子时，也在豆瓣上继续看房，做了许多笔记，但真正去看的只有离翻身地铁站50米的一个专门用来单间房公寓楼，窗户面向过道的单间1600，面向外面的1800，而且没有洗衣机，环境也恶劣的很，不值得租。</p>
<p>同时跟着B看了自如的一些房子，跟着B去洪浪北看了一间1460的房，也还不错，为了避免出现X小区房又被抢的状况，就先付押金预订了，作为最后的选择。</p>
<p>而后继续在公司附近找房，最后在确定V小区租不到后，第二天早上就去看Z小区一间合适的房，考虑我中午不睡、下午奔溃的状态，还有综合离地铁口近的房子的房租，决定租这间。而洪浪北的房子因为自如没有按时交房，也刚好退了。</p>
<h3 id="签约与搬家"><a href="#签约与搬家" class="headerlink" title="签约与搬家"></a>签约与搬家</h3><p>找到Z小区的房子就立马签约交房，东洪之前跟我说搬家可以找他帮忙就找了。幸亏有他帮忙，东西太多了，一辆滴滴塞满，只能坐下我，他骑车过来。幸亏从公司宿舍到Z小区也不是很远。顺利完成搬家。</p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><ul>
<li><p>毕业生找房，6月就可以找，不要因为多花一个月钱就不找。</p>
</li>
<li><p>找房首选离公司近的，近得可以步行回去睡午觉的完美，像我这样骑车回去睡午觉的也还行。</p>
</li>
<li><p>自如房还行，最完美当然是三四个同事一起租在公司附近（步行可轻松到达范围）。</p>
</li>
<li><p>情侣一起租个单间而不是合租也不错吧，哈哈哈，只是我还没体验过。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;七月毕业，离开学校回到深圳才开始找房，其实这个时候找房子有点晚了，蛮多毕业生六月份就提前找好房子了。&lt;/p&gt;
    
    </summary>
    
      <category term="总结" scheme="https://kerita.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="house" scheme="https://kerita.github.io/tags/house/"/>
    
  </entry>
  
  <entry>
    <title>word-wrap&amp;word-break</title>
    <link href="https://kerita.github.io/2017/07/04/2017/word-wrap&amp;word-break/"/>
    <id>https://kerita.github.io/2017/07/04/2017/word-wrap&amp;word-break/</id>
    <published>2017-07-03T16:00:00.000Z</published>
    <updated>2017-08-18T14:42:50.078Z</updated>
    
    <content type="html"><![CDATA[<p>在开发Insta360官网英文版的时候，曾遇到单词太长如何换行的问题。谷歌一下，搞定需求，但是对这两个CSS3属性还是一知半解，借着阅读《CSS3实用指南》的契机，把他们理清。</p>
<a id="more"></a>
<h3 id="不指定word-wrap与work-break值"><a href="#不指定word-wrap与work-break值" class="headerlink" title="不指定word-wrap与work-break值"></a>不指定word-wrap与work-break值</h3><p>在不显式指定word-wrap和word-break属性值，并忽略从祖先元素继承值（这两个属性都可以继承），即这两个CSS属性的值都为normal时，讨论浏览器对长单词如何渲染。</p>
<ol>
<li><p>以汉字为代表的CJK类文字<br>CJK类(Chinese, Japanese, Korean and Vietnamese)文字中，每个文字都被当做一个单词，正常情况下，不存在长单词溢出或者换行问题，浏览器可以比较好的渲染</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="class">div </span>&#123;</div><div class="line"><span class="symbol">    width:</span> <span class="number">100</span>px;</div><div class="line"><span class="symbol">    border:</span> <span class="number">1</span>px solid <span class="meta">#ccc;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="params">&lt;div&gt;</span>谷歌一下，搞定需求，但是对对这两个CSS3属性还是一知半解，借着阅读《CSS3实用指南》的契机，把他们理清。<span class="params">&lt;/div&gt;</span></div></pre></td></tr></table></figure>
<div style="text-align:center"><img src="http://7xpofw.com1.z0.glb.clouddn.com/not-use-cjk.png" width="300px" height="150px" alt="not-use-cjk.png"></div>
</li>
<li><p>以英文为代表的latin文字</p>
</li>
</ol>
<ul>
<li><p>当出现此类文字的长单词在当前行无法放下时，浏览器在父容器范围内寻找单词中可换行点进行换行，包括‘？’或者‘-’等。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">div</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">&lt;div&gt; <span class="selector-tag">a</span> long word   <span class="selector-tag">a</span> long word  https:<span class="comment">//www.google.com.hk/search?q=CJKV&amp;oq=CJKV&amp;aqs=chrome..6-9i57j0l5.1919j0j1&amp;sourceid=chrome&amp;ie=UTF-8&lt;/div&gt;</span></div></pre></td></tr></table></figure>
<div style="text-align:center"><img src="http://7xpofw.com1.z0.glb.clouddn.com/not-use-url.png" width="535px" height="120px" alt="not-use-url.png"></div>
</li>
<li><p>当可换行点在父容器外时，在父容器外换行；当没有可换行点时，独立一行显示；如果独立一行仍放不下，溢出显示。</p>
</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">div</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</div><div class="line">&#125;</div><div class="line">&lt;div&gt; <span class="selector-tag">a</span> long word   <span class="selector-tag">a</span> long word  dddddddddddddddddddddddddd&lt;/div&gt;</div></pre></td></tr></table></figure>
 <div style="text-align:center"><img src="http://7xpofw.com1.z0.glb.clouddn.com/not-use-latin.png" width="475px" height="110px" alt="not-use-latin.png"></div>


<h3 id="使用word-wrap"><a href="#使用word-wrap" class="headerlink" title="使用word-wrap"></a>使用word-wrap</h3><p>word-wrap在新的标准命名为overflow-wrap，word-wrap作为一个别名，仍可使用，并且主流浏览器都支持。</p>
<p>word-wrap关心两个值：normal和break-word。而normal作为默认值，渲染结果可在上面知道。break-word呢，当前行且在父容器内有可换行点时换行；当前行没有可换行点时，独立一行显示；独立一行仍放不下的，在将溢出处自动换行。</p>
<ul>
<li><p>当前行有可换行点</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><div class="line"><span class="class">div </span>&#123;</div><div class="line"><span class="symbol">        width:</span> <span class="number">200</span>px;</div><div class="line"><span class="symbol">        border:</span> <span class="number">1</span>px solid <span class="meta">#ccc;</span></div><div class="line">        word-wrap: break-word;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"> <span class="params">&lt;div&gt;</span> a long word  search?q=CJKV<span class="variable">&amp;oq</span>=CJKV<span class="variable">&amp;aqs</span>=chrome.<span class="number">.69</span>i57j0l5<span class="number">.1919</span>j0j1<span class="variable">&amp;sourceid</span>=chrome<span class="variable">&amp;ie</span>=UTF<span class="number">-8</span><span class="params">&lt;/div&gt;</span></div></pre></td></tr></table></figure>
<div style="text-align:center"><img src="http://7xpofw.com1.z0.glb.clouddn.com/word-wrap-url.png" width="575px" height="160px" alt="word-wrap-url.png"></div></li>
<li>当前行无可换行点</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">div</span> &#123;</div><div class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</div><div class="line">        <span class="attribute">word-wrap</span>: break-word;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&lt;div&gt; <span class="selector-tag">a</span> long word  https:<span class="comment">//www.google.com.hk/search?q=CJKV&amp;oq=CJKV&amp;aqs=chrome..69i57j0l5.1919j0j1&amp;sourceid=chrome&amp;ie=UTF-8&lt;/div&gt;</span></div></pre></td></tr></table></figure>
 <div style="text-align:center"><img src="http://7xpofw.com1.z0.glb.clouddn.com/word-wrap-longword.png" width="505px" height="200px" alt="word-wrap-longword"></div>


<h3 id="使用word-break"><a href="#使用word-break" class="headerlink" title="使用word-break"></a>使用word-break</h3><p>work-break关心三个值：normal,break-all,keep-all。normal的效果上面可见。</p>
<ul>
<li><p>break-all<br>看到一个好的例子来解释这个属性就是：资本家总是极尽可能的压榨工人，break-all就是极尽可能的利用所有空间，不另起一行，且在每一行行在将溢出处换行。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">div</span> &#123;</div><div class="line">       <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">       <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</div><div class="line">       <span class="attribute">word-break</span>: break-all;</div><div class="line">   &#125;</div><div class="line">&lt;div&gt; <span class="selector-tag">a</span> long word  https:<span class="comment">//www.google.com.hk/search?q=CJKV&amp;oq=CJKV&amp;aqs=chrome..69i57j0l5.1919j0j1&amp;sourceid=chrome&amp;ie=UTF-8&lt;/div&gt;</span></div></pre></td></tr></table></figure>
<div style="text-align:center"><img src="http://7xpofw.com1.z0.glb.clouddn.com/keep-all.png" width="590px" height="165px" alt="break-all"></div>
</li>
<li><p>keep-all<br>keep-all就是在normal的基础上，让CJK文字也按溢出显示。同时也会让一些中文标点符号是做可换行点，且一些符号如《》还必须同行显示。</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><div class="line"><span class="class">div </span>&#123;</div><div class="line"><span class="symbol">    width:</span> <span class="number">200</span>px;</div><div class="line"><span class="symbol">    border:</span> <span class="number">1</span>px solid <span class="meta">#ccc;</span></div><div class="line">    word-break: keep-all;</div><div class="line">&#125;</div><div class="line"><span class="params">&lt;div&gt;</span>谷歌一下，搞定需求，但是对对这两个CSS3属性还是一知半解，借着阅读啦啦啦啦《CSS3实用指南》的契机，把他们理清。<span class="params">&lt;/div&gt;</span></div></pre></td></tr></table></figure>
<div style="text-align:center"><img src="http://7xpofw.com1.z0.glb.clouddn.com/keep-all.png" width="535px" height="175px" alt="keep-all"></div>

<h3 id="同时使用"><a href="#同时使用" class="headerlink" title="同时使用"></a>同时使用</h3><ul>
<li><p>word-wrap:break-word;与word-break:break-all;<br>这个时候就是不溢出，不另起一行，随处换行。</p>
</li>
<li><p>word-wrap:break-word;与word-break:break-all;<br>不溢出，另起一行，中文标点符号成为成为可换行符。</p>
</li>
</ul>
</li>
</ul>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><p><a href="http://www.cnblogs.com/2050/archive/2012/08/10/2632256.html" target="_blank" rel="external">你真的了解word-wrap和word-break的区别吗？</a></p>
</li>
<li><p><a href="https://developer.mozilla.org/de/docs/Web/CSS/word-wrap" target="_blank" rel="external">word-wrap——MDN</a></p>
</li>
<li><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/word-break" target="_blank" rel="external">word-break——MDN</a></p>
</li>
<li><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-wrap" target="_blank" rel="external">overflow-wrap——MDN</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在开发Insta360官网英文版的时候，曾遇到单词太长如何换行的问题。谷歌一下，搞定需求，但是对这两个CSS3属性还是一知半解，借着阅读《CSS3实用指南》的契机，把他们理清。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://kerita.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="CSS3" scheme="https://kerita.github.io/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>记一次感冒</title>
    <link href="https://kerita.github.io/2017/06/25/2017/a-cold-in-2017/"/>
    <id>https://kerita.github.io/2017/06/25/2017/a-cold-in-2017/</id>
    <published>2017-06-24T16:00:00.000Z</published>
    <updated>2017-08-03T15:43:10.692Z</updated>
    
    <content type="html"><![CDATA[<p>之所以写下这篇文章，不只是想记录下这次感冒的过程，而是为了提醒自己该运动了。无论搬家了与否，都应该运动。没搬家照旧在天健，搬家了在新家附近，并且还有Keep可以做呢。谨记谨记。<br><a id="more"></a></p>
<h3 id="开始感冒"><a href="#开始感冒" class="headerlink" title="开始感冒"></a>开始感冒</h3><p>最近身体状态真是极差，今年（2017年）大概5月的时候就有一次喉咙痛接近感冒，6月23号晚身体开始出现疲惫状态，然后是全身酸痛，即使下床喝了一包999感冒冲剂也无济于事。还有晚上的空调吹得我瑟瑟发抖，脚一直发冷，迷迷糊糊中选择了不作为，第二天早上中午症状更加严重。<br><!--more--><br>身体酸痛发软疲劳，甚至连午饭都吃不下去，扒了几口之后就回床上睡觉了，睡到下午四点多的时候状态恢复一点立马跑去校医室。</p>
<h3 id="治疗和恢复"><a href="#治疗和恢复" class="headerlink" title="治疗和恢复"></a>治疗和恢复</h3><p>到校医室之后是挂号，花十分钟量体温，医生居然让我去走廊的那里量体温，这我就不明白了，在里面不能量？那个时候也没有其他病人啊。然后是问询、开药，羞涩地被护士姐姐打了一针，因为低烧了。</p>
<p>晚上回来吃药睡觉，第二三天早上醒来感觉好很多了，但是低烧症状彻底消失还要到晚上。</p>
<p>现在身体还在恢复之中，并没有完全好，喉咙还有问题，受凉会打喷嚏。</p>
<h3 id="咳嗽消失"><a href="#咳嗽消失" class="headerlink" title="咳嗽消失"></a>咳嗽消失</h3><p>7月8号凌晨过来更新。</p>
<p>上一周还是有痰咳嗽的状态，这一周好像就消失，消失得好像我都忘记有过感冒这回事了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之所以写下这篇文章，不只是想记录下这次感冒的过程，而是为了提醒自己该运动了。无论搬家了与否，都应该运动。没搬家照旧在天健，搬家了在新家附近，并且还有Keep可以做呢。谨记谨记。&lt;br&gt;
    
    </summary>
    
      <category term="总结" scheme="https://kerita.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="健康" scheme="https://kerita.github.io/tags/%E5%81%A5%E5%BA%B7/"/>
    
  </entry>
  
  <entry>
    <title>test-image</title>
    <link href="https://kerita.github.io/2017/06/13/2017/test-image/"/>
    <id>https://kerita.github.io/2017/06/13/2017/test-image/</id>
    <published>2017-06-13T02:57:14.000Z</published>
    <updated>2017-07-10T11:49:58.156Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 如何在Markdown中插入图片，使得编译之后，在hexo首页和文章页都能看到呢？ </strong></p>
<a id="more"></a>
<h3 id="设置-post-asset-folder"><a href="#设置-post-asset-folder" class="headerlink" title="设置 post_asset_folder"></a>设置 post_asset_folder</h3><p>在根目录下的_config.yml设置post_asset_folder:true</p>
<h3 id="posts目录下创建文章同名目录"><a href="#posts目录下创建文章同名目录" class="headerlink" title="_posts目录下创建文章同名目录"></a>_posts目录下创建文章同名目录</h3><h3 id="引入图片"><a href="#引入图片" class="headerlink" title="引入图片"></a>引入图片</h3><figure class="highlight django"><table><tr><td class="code"><pre><div class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">asset_img</span> example.png text %&#125;</span><span class="xml"></span></div></pre></td></tr></table></figure>
<img src="/2017/06/13/2017/test-image/example.png" alt="This is a image" title="This is a image">
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://yanyinhong.github.io/2017/05/02/How-to-insert-image-in-hexo-post/" target="_blank" rel="external">Hexo博客搭建之在文章中插入图片</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 如何在Markdown中插入图片，使得编译之后，在hexo首页和文章页都能看到呢？ &lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="小技巧" scheme="https://kerita.github.io/categories/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="hexo" scheme="https://kerita.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>前端模块化与模块加载器</title>
    <link href="https://kerita.github.io/2017/06/12/2017/about-module/"/>
    <id>https://kerita.github.io/2017/06/12/2017/about-module/</id>
    <published>2017-06-11T16:00:00.000Z</published>
    <updated>2017-08-18T14:42:45.742Z</updated>
    
    <content type="html"><![CDATA[<p>前端模块化这个概念自从去年开始一直出现在视野里，在某次面试的时候还被问傻眼了，但都整理这方面的知识，这一次决定彻底清楚。跑题了，回到正题。模块化是啥？简单来说，前端JS文件越来越多，而且相互之间还存在着依赖关系，利用模块化可以更好地管理和加载这些JS文件。<br><a id="more"></a></p>
<p>本文主要是对前端模块化common.js,AMD,CMD和模块加载器require.js,sea.js和webpack进行梳理。</p>
<h2 id="common-js-AMD-CMD"><a href="#common-js-AMD-CMD" class="headerlink" title="common.js,AMD,CMD"></a>common.js,AMD,CMD</h2><p> 这三个东西都是模块化的规范，主要规定怎么组织模块和如何引入模块，区别如下：</p>
<ul>
<li><p>common.js:common.js通过require同步加载所有模块，通过exports或module.exports来导出需要暴露的接口，服务器端的Node.js遵循这种规范。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="built_in">require</span>(<span class="string">"module"</span>);</div><div class="line"><span class="built_in">require</span>(<span class="string">"../file.js"</span>);</div><div class="line">exports.doStuff = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line"><span class="built_in">module</span>.exports = someValue;</div></pre></td></tr></table></figure>
</li>
<li><p>AMD:服务器端的资源都是在本地磁盘，使用同步加载没有什么问题，但是浏览器不能这样，假如文件过大，会一直处于加载状态，浏览器进入“假死”状态。所以就出现了AMD这种适用于浏览器端的异步加载的模块化标准，require.js这个模块加载器就是这种规范的实现。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">define(<span class="string">"module"</span>, [<span class="string">"dep1"</span>, <span class="string">"dep2"</span>], <span class="function"><span class="keyword">function</span>(<span class="params">d1, d2</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> someExportedValue;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">require</span>([<span class="string">"module"</span>, <span class="string">"../file"</span>], <span class="function"><span class="keyword">function</span>(<span class="params">module, file</span>) </span>&#123; <span class="comment">/* ... */</span> &#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>CMD：与AMD一样，CMD也是一个用于浏览器的模块加载器，不同之处在于，AMD会一口气把需要的模块加载出来，而CMD则是用到时再加载。同时呢，CMD与common.js的规范保持很大的兼容，sea.js这种模块加载器就是这种规范的实现。<figure class="highlight lasso"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">define</span></span>(function(<span class="keyword">require</span>, exports, module) &#123;</div><div class="line">  <span class="built_in">var</span> $ = <span class="keyword">require</span>(<span class="string">'jquery'</span>);</div><div class="line">  <span class="built_in">var</span> Spinning = <span class="keyword">require</span>(<span class="string">'./spinning'</span>);</div><div class="line">  exports.doSomething = <span class="params">...</span></div><div class="line">  module.exports = <span class="params">...</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="require-js，sea-js与webpack"><a href="#require-js，sea-js与webpack" class="headerlink" title="require.js，sea.js与webpack"></a>require.js，sea.js与webpack</h2><p>如上面所言，require.js与sea.js是模块加载器，webpack相比较下，更像是模块加载器+gulp/grunt，同时更具备多种优点，例如可以对图片、css进行打包、兼容AMD、CMD、common.js、ES6格式的模块，通过强大的插件系统更能实现各种强大的功能。</p>
<p>webpacke重要的两个组成——loader和插件，loader更针对某一类型文件，插件更像是在整个打包过程起作用。详细学习webpack，可以看 <a href="https://github.com/Kerita/webpack-tutorial" target="_blank" rel="external">https://github.com/Kerita/webpack-tutorial</a></p>
<ul>
<li><p>loader: 用于加载各种文件——css,less,vue,jsx，图片等</p>
</li>
<li><p>插件：开启服务器、实现热加载等功能。</p>
</li>
</ul>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>common.js,AMD,CMD是模块化规范，require.js,sea.js,webpack模块加载器，现在比较流行是使用webpack构建项目，React和Vue.js官方脚手架都是采用这种方式。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前端模块化这个概念自从去年开始一直出现在视野里，在某次面试的时候还被问傻眼了，但都整理这方面的知识，这一次决定彻底清楚。跑题了，回到正题。模块化是啥？简单来说，前端JS文件越来越多，而且相互之间还存在着依赖关系，利用模块化可以更好地管理和加载这些JS文件。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="https://kerita.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="模块化" scheme="https://kerita.github.io/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://kerita.github.io/2017/01/22/2017/hello-world/"/>
    <id>https://kerita.github.io/2017/01/22/2017/hello-world/</id>
    <published>2017-01-21T16:00:00.000Z</published>
    <updated>2017-06-12T12:26:30.977Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
