<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kerita</title>
  <subtitle>自律谦逊，承担责任，推迟满足感，你要热爱它</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://kerita.github.io/"/>
  <updated>2018-05-19T08:56:46.697Z</updated>
  <id>https://kerita.github.io/</id>
  
  <author>
    <name>Kerita</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>noopener-noreferrer</title>
    <link href="https://kerita.github.io/2018/05/19/2018/noopener-noreferrer/"/>
    <id>https://kerita.github.io/2018/05/19/2018/noopener-noreferrer/</id>
    <published>2018-05-18T16:00:00.000Z</published>
    <updated>2018-05-19T08:56:46.697Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>当用 target=”_blank” a 标签打开超链接或者用 window.open 打开新窗口时，应该将 opener 设置为空，不然将暴露在非常简单的钓鱼攻击之下。</p>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><ul>
<li><p>noopener/noreferrer<br>为 target=”_blank” 的锚点加上 rel=”noopener noreferrer”</p>
</li>
<li><p>window.open</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="keyword">new</span><span class="type">Wnd</span> = window.open();</div><div class="line"><span class="keyword">new</span><span class="type">Wnd</span>.opener = <span class="literal">null</span>;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="如何攻击"><a href="#如何攻击" class="headerlink" title="如何攻击"></a>如何攻击</h2><figure class="highlight coffeescript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.opener) &#123;</div><div class="line">  <span class="built_in">window</span>.opener.location = <span class="string">"https://dev.to/phishing?referrer="</span>+<span class="built_in">document</span>.referrer;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
    
    </summary>
    
      <category term="前端" scheme="https://kerita.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JS" scheme="https://kerita.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>打扰一下的平凡之路</title>
    <link href="https://kerita.github.io/2018/05/19/2018/pingfan/"/>
    <id>https://kerita.github.io/2018/05/19/2018/pingfan/</id>
    <published>2018-05-18T16:00:00.000Z</published>
    <updated>2018-05-19T08:28:57.870Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>2018年3月21日，也就是大概两个月前就想分享打扰一下乐队在演唱会上翻唱的《平凡之路》，因为需要安装 hexo audio 插件，一直拖到今天。想看看能不能直接嵌入网易云的 iframe, 但网易云上依旧没有打扰一下的演唱会版本，所以嵌入腾讯视频 iframe</p>
<a id="more"></a>
<iframe frameborder="0" src="https://v.qq.com/iframe/player.html?vid=s0381c6dl5h&tiny=0&auto=0" allowfullscreen class="pingfan-iframe"></iframe>

<style>

.pingfan-iframe {
  width: 100%;
  height: 498px;
}

@media(max-width: 768px) {
    .pingfan-iframe {
      height: 200px;
    }
}

</style>







]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2018年3月21日，也就是大概两个月前就想分享打扰一下乐队在演唱会上翻唱的《平凡之路》，因为需要安装 hexo audio 插件，一直拖到今天。想看看能不能直接嵌入网易云的 iframe, 但网易云上依旧没有打扰一下的演唱会版本，所以嵌入腾讯视频 iframe&lt;/p&gt;
    
    </summary>
    
      <category term="歌" scheme="https://kerita.github.io/categories/%E6%AD%8C/"/>
    
    
      <category term="朴树" scheme="https://kerita.github.io/tags/%E6%9C%B4%E6%A0%91/"/>
    
      <category term="打扰一下" scheme="https://kerita.github.io/tags/%E6%89%93%E6%89%B0%E4%B8%80%E4%B8%8B/"/>
    
      <category term="平凡之路" scheme="https://kerita.github.io/tags/%E5%B9%B3%E5%87%A1%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>修改 placeholder 样式</title>
    <link href="https://kerita.github.io/2018/05/19/2018/placeholder/"/>
    <id>https://kerita.github.io/2018/05/19/2018/placeholder/</id>
    <published>2018-05-18T16:00:00.000Z</published>
    <updated>2018-05-19T09:05:04.658Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>修改 HTML input 元素 placeholder 的样式</p>
<a id="more"></a>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-pseudo">::-moz-placeholder</span> &#123; </div><div class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#999999</span>; </div><div class="line">&#125;</div><div class="line"><span class="selector-pseudo">::-webkit-input-placeholder</span> &#123; </div><div class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#999999</span>; </div><div class="line">&#125;</div><div class="line"><span class="selector-pseudo">:-ms-input-placeholder</span> &#123; </div><div class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#999999</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;修改 HTML input 元素 placeholder 的样式&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://kerita.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="HTML" scheme="https://kerita.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>less calc 不起作用</title>
    <link href="https://kerita.github.io/2018/02/28/2018/less-calc/"/>
    <id>https://kerita.github.io/2018/02/28/2018/less-calc/</id>
    <published>2018-02-27T16:00:00.000Z</published>
    <updated>2018-02-27T16:48:59.904Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在 less 中使用 CSS3 的 calc 语法时会自动计算，需要采用如下写法,注意减号左右都有空格。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><div class="line"><span class="attribute">width</span>: calc(~<span class="string">"100% - 30px"</span>);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
    
    </summary>
    
      <category term="前端" scheme="https://kerita.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="CSS3" scheme="https://kerita.github.io/tags/CSS3/"/>
    
      <category term="less" scheme="https://kerita.github.io/tags/less/"/>
    
  </entry>
  
  <entry>
    <title>羽球往事</title>
    <link href="https://kerita.github.io/2018/02/20/2018/badminton/"/>
    <id>https://kerita.github.io/2018/02/20/2018/badminton/</id>
    <published>2018-02-19T16:00:00.000Z</published>
    <updated>2018-02-24T11:40:09.056Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>（一篇 2015年的旧文。）</p>
<p>大约十年前，拍还是一副一副的买，球还是一个一个的买，而不像现在，拍一把一把的买，而球一桶一桶的买。也就是差不多那个时候，我拥有自己的第一副羽毛球拍，它打开了我通往羽毛球世界的大门。</p>
<a id="more"></a>
<p>从一开始的原地不动，看自己一个球能打多少次而不会掉到地上；到后来增加难度，一边走一边带球，从家门口走到家里，再从里面走出来，虽看似简单，但是不可控因素多了；再后来呢，开始对着墙打，墙是一个不知疲倦的对手，它永远能将你的球打回来，但并不是就拿它没有办法，如果你的球技足够高，球从墙弹回的速度和方向其实是在你的掌控之中的。这三种方法主要的练球感和反应力，循序而渐进，熟读而精思。</p>
<p>由于缺少同样喜爱羽毛球的玩伴，大多时候都是用最后一种方法在练习，偶尔也会跟别人打一下球，但却从未进入过那标准四十平方的场地，直到大一。</p>
<p>后来，体育选了羽毛球。有人问过我，你羽毛球打得还行，在羽毛球课上还能学到什么吗？</p>
<p>能。羽毛球课对我最大的帮助就是纠正了很多错误，规范了我的动作。举个例子，正手握拍应该将虎口对着球拍柄窄的一面，这样接高远球和杀球的时候发力很轻松。以前没有用这种方法，稍微打得激烈一点，手臂便会酸痛，估计是肌肉劳损。</p>
<p>规范的动作，再加上规律的练习，那段时间是技术进步最快的时候，球杀得更快更猛了，对力量和方向的控制也更好了，对于反手球的处理也比以前好一点了（PS 反手球是大部分业余选手的软肋）。但是也很快进入瓶颈期，技术不再长进。跟真正的高手过招的时候，知道球的落点却总是追不上，而且总是处在奔跑状态中，21 个球还没打完早就气喘吁吁了。所以下学期要开始练体能，通过提高体能突破自己的技术瓶颈。</p>
<p>说为什么会喜欢上羽毛球呢，一是，那个时候没有电脑，没有图书馆，放假了实在无聊得很；二是羽毛球可玩性太高了，即使只有一个人，即使是在家门口，都可以玩起来，难度系数也不大，初期可明显感受到自己的进步，脑袋分泌出多巴胺让你对它越来越迷恋。</p>
<p>最后，安利一下自己的爱拍——胜利 9500，对于菜鸟和进阶的选手还是够用的。</p>
<p>以上。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;（一篇 2015年的旧文。）&lt;/p&gt;
&lt;p&gt;大约十年前，拍还是一副一副的买，球还是一个一个的买，而不像现在，拍一把一把的买，而球一桶一桶的买。也就是差不多那个时候，我拥有自己的第一副羽毛球拍，它打开了我通往羽毛球世界的大门。&lt;/p&gt;
    
    </summary>
    
      <category term="健康" scheme="https://kerita.github.io/categories/%E5%81%A5%E5%BA%B7/"/>
    
    
      <category term="羽毛球" scheme="https://kerita.github.io/tags/%E7%BE%BD%E6%AF%9B%E7%90%83/"/>
    
  </entry>
  
  <entry>
    <title>rg.exe 占用 100% CPU</title>
    <link href="https://kerita.github.io/2018/02/19/2018/vscode-rg/"/>
    <id>https://kerita.github.io/2018/02/19/2018/vscode-rg/</id>
    <published>2018-02-18T16:00:00.000Z</published>
    <updated>2018-02-21T09:24:34.149Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Windows 上使用 VSCode 遇到一个问题，打开项目时，整个电脑基本卡死，Ctrl+Shift+Esc 发现 rg.exe 占用 100% 的 CPU。<br><a id="more"></a><br>在 github 看到，是因为是 cnpm 的原因，解决方法如下：</p>
<h2 id="下载-vscode1-18以上版本"><a href="#下载-vscode1-18以上版本" class="headerlink" title="下载 vscode1.18以上版本"></a>下载 vscode1.18以上版本</h2><h2 id="增加配置"><a href="#增加配置" class="headerlink" title="增加配置"></a>增加配置</h2><p>安装完成后 文件&gt;首选项&gt;设置<br><figure class="highlight actionscript"><table><tr><td class="code"><pre><div class="line"><span class="string">"search.followSymlinks"</span>: <span class="literal">false</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Windows 上使用 VSCode 遇到一个问题，打开项目时，整个电脑基本卡死，Ctrl+Shift+Esc 发现 rg.exe 占用 100% 的 CPU。&lt;br&gt;
    
    </summary>
    
      <category term="小技巧" scheme="https://kerita.github.io/categories/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="vscode" scheme="https://kerita.github.io/tags/vscode/"/>
    
      <category term="编辑器" scheme="https://kerita.github.io/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>z-index 不起作用</title>
    <link href="https://kerita.github.io/2018/02/18/2018/z-index-not-work/"/>
    <id>https://kerita.github.io/2018/02/18/2018/z-index-not-work/</id>
    <published>2018-02-17T16:00:00.000Z</published>
    <updated>2018-02-18T16:08:01.548Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>z-index 只在 position 非 static 的元素生效,而一个元素的 position 默认为 static，static 元素想让  z-index 生效，可以设置元素 position 为 relative。</p>
<a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;z-index 只在 position 非 static 的元素生效,而一个元素的 position 默认为 static，static 元素想让  z-index 生效，可以设置元素 position 为 relative。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://kerita.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="CSS" scheme="https://kerita.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>JSX 中自定义属性</title>
    <link href="https://kerita.github.io/2018/02/17/2018/jsx-custom-attr/"/>
    <id>https://kerita.github.io/2018/02/17/2018/jsx-custom-attr/</id>
    <published>2018-02-16T16:00:00.000Z</published>
    <updated>2018-02-18T16:04:13.898Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>JSX 用来定义 React 组件的 DOM 结构，其规则跟 HTML 基本相同，但还是有一些差异。例如 HTML 建议自定义属性以 data-* 命名，JSX 则是强制，因为如果不以这种方式命名，就不生效。</p>
<a id="more"></a>
<p>商城在对接某第三方支付公司信用卡接口的时候，他们的自定义属性不以 data-* 命名，导致数据一直获取不到。</p>
<p>后来发现利用 JS setAttribute() 手动设置非标准的自定义属性可以生效，直接写在 JSX 不行。</p>
<p>可以在 componentDidMount 函数中进行设置。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JSX 用来定义 React 组件的 DOM 结构，其规则跟 HTML 基本相同，但还是有一些差异。例如 HTML 建议自定义属性以 data-* 命名，JSX 则是强制，因为如果不以这种方式命名，就不生效。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://kerita.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="React" scheme="https://kerita.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>React 组件清除定时器</title>
    <link href="https://kerita.github.io/2018/02/16/2018/clear-interval/"/>
    <id>https://kerita.github.io/2018/02/16/2018/clear-interval/</id>
    <published>2018-02-15T16:00:00.000Z</published>
    <updated>2018-02-18T15:47:17.464Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在 React 组件定义一个计时器，在组件卸载的时候就应该清除掉。</p>
<a id="more"></a>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><div class="line">componentWillUnmount () &#123;</div><div class="line">    <span class="keyword">this</span>.loadInterval &amp;&amp; clearInterval(<span class="keyword">this</span>.loadInterval)</div><div class="line">    <span class="keyword">this</span>.loadInterval = <span class="literal">false</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 React 组件定义一个计时器，在组件卸载的时候就应该清除掉。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://kerita.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="React" scheme="https://kerita.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>React 小技巧</title>
    <link href="https://kerita.github.io/2018/02/15/2018/react-tip/"/>
    <id>https://kerita.github.io/2018/02/15/2018/react-tip/</id>
    <published>2018-02-14T16:00:00.000Z</published>
    <updated>2018-02-18T15:44:12.903Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>使用 React.js 一段时间了，把使用过程遇到的小坑和小技巧记录下来，希望能够帮助到其他人。</p>
<a id="more"></a>
<h2 id="显示-html"><a href="#显示-html" class="headerlink" title="显示 html"></a>显示 html</h2><figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line">&lt;<span class="selector-tag">div</span> dangerouslySetInnerHTML=&#123;&#123; __html: LANG<span class="selector-class">.auth_register_tips1</span> &#125;&#125;/&gt;</div></pre></td></tr></table></figure>
<h2 id="传数组给子组件"><a href="#传数组给子组件" class="headerlink" title="传数组给子组件"></a>传数组给子组件</h2><ol>
<li>PureRender —— 当 porps与state 传入时，通过浅比较决定是否要重新渲染</li>
<li>shouldComponentUpdate() 钩子默认返回 true，可以重新</li>
</ol>
<h2 id="组件间通信"><a href="#组件间通信" class="headerlink" title="组件间通信"></a>组件间通信</h2><ol>
<li><p>flux 架构</p>
</li>
<li><p>父组件向子组件 —— props</p>
</li>
<li><p>子组件向父组件 —— props.funciton 接收参数</p>
</li>
<li><p>利用事件机制</p>
</li>
</ol>
<h2 id="高阶组件（HOC）"><a href="#高阶组件（HOC）" class="headerlink" title="高阶组件（HOC）"></a>高阶组件（HOC）</h2><p>高阶函数，可以传入函数作为参数的函数，如 map,sort,reduce。高阶组件包装了另一个组件的组件。</p>
<ol>
<li>属性代理 （Props Proxy）</li>
<li>反向继承 （Inheritance Inversion）</li>
</ol>
<h2 id="Immutable-js"><a href="#Immutable-js" class="headerlink" title="Immutable.js"></a>Immutable.js</h2><p>因为数据是不可变的，可以避免引用传值的问题，但也麻烦</p>
<h2 id="无状态组件"><a href="#无状态组件" class="headerlink" title="无状态组件"></a>无状态组件</h2><p>使用无状态组件，只从父组件接收 props，可以提高组件的渲染性能<br><figure class="highlight dust"><table><tr><td class="code"><pre><div class="line"><span class="xml">const HelloWorld = (props) =&gt; <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;props.name&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">ReactDOM.render(<span class="tag">&lt;<span class="name">HelloWorld</span> <span class="attr">name</span>=<span class="string">"HelloWorld"</span> /&gt;</span>,App)</div></pre></td></tr></table></figure></p>
<h2 id="componentWillReceiveProps-中取-props-的值"><a href="#componentWillReceiveProps-中取-props-的值" class="headerlink" title="componentWillReceiveProps 中取 props 的值"></a>componentWillReceiveProps 中取 props 的值</h2><p>注意应该取 nextProps,而不是 this.props</p>
<h2 id="bind-绑定函数"><a href="#bind-绑定函数" class="headerlink" title="bind 绑定函数"></a>bind 绑定函数</h2><p>利用 bind 绑定函数，是默认有 event 这个参数的，只是这个参数在给定参数之后<br><figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line"> handleClockClick (id, e) &#123;</div><div class="line">   console.log(id,e)</div><div class="line"> &#125;</div><div class="line"></div><div class="line">&lt;<span class="selector-tag">button</span> onClick=&#123;this<span class="selector-class">.handleClockClick</span><span class="selector-class">.bind</span>(this, <span class="number">2</span>)&#125;&gt;Clock&lt;/button&gt;</div></pre></td></tr></table></figure></p>
<h2 id="列表的-key"><a href="#列表的-key" class="headerlink" title="列表的 key"></a>列表的 key</h2><ul>
<li>key 不会传给组件，如果需要使用 key 的值，另外命名为其他属性传进去</li>
<li>当一个列表顺序会重排时，不适合使用数组的索引作为 key</li>
</ul>
<h2 id="受控组件"><a href="#受控组件" class="headerlink" title="受控组件"></a>受控组件</h2><p>可变的状态保存在组件的 state 中</p>
<h2 id="ES6-计算属性名"><a href="#ES6-计算属性名" class="headerlink" title="ES6 计算属性名"></a>ES6 计算属性名</h2><p>对象的属性也可以计算，使用 [] 包围</p>
<h2 id="constructor-与-getInitialState、getDefaultProps-的区别"><a href="#constructor-与-getInitialState、getDefaultProps-的区别" class="headerlink" title="constructor 与 getInitialState、getDefaultProps 的区别"></a>constructor 与 getInitialState、getDefaultProps 的区别</h2><ul>
<li>getInitialState 与 getDefaultProps 在 React.createClass 时使用,此时是使用 ES5 语法</li>
<li>constructor 在 ES6 类语法中使用,如果此时要设置默认 props 与 设置 state，可以如下操作<figure class="highlight delphi"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">constructor</span> <span class="params">(props)</span> <span class="comment">&#123;</span></span></div><div class="line">    super(props)</div><div class="line">    this.state = &#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="title">static</span> <span class="title">get</span>  <span class="title">defaultProps</span> <span class="params">()</span> <span class="comment">&#123;</span></div><div class="line">    return &#123;</div><div class="line">        time: time</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="ES6-类中，函数-this-不默认指向-对象"><a href="#ES6-类中，函数-this-不默认指向-对象" class="headerlink" title="ES6 类中，函数 this 不默认指向 对象"></a>ES6 类中，函数 this 不默认指向 对象</h2><h2 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h2><ul>
<li>this.getDomNode 已经在低版本被移除了，现在设置 ref=xxx，然后使用 this.refs.xxx 访问 DOM 元素</li>
<li>ref 可以赋值两种类型，一种是字符串，一种是函数, 字符串只能用在类组件，DOM 元素使用函数，纯函数组件不能使用 ref。旧版本 DOM 元素虽然可以使用 ref，但是 React 已不推荐。<figure class="highlight cs"><table><tr><td class="code"><pre><div class="line"><span class="keyword">ref</span>=<span class="string">"test"</span> <span class="comment">// this.refs.test 访问</span></div><div class="line"></div><div class="line"><span class="keyword">ref</span>=&#123;test =&gt; <span class="keyword">this</span>.test = test&#125; <span class="comment">// this.test 访问</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="组合-VS-继承"><a href="#组合-VS-继承" class="headerlink" title="组合 VS 继承"></a>组合 VS 继承</h2><p>React 推荐使用组合，而不是继承，组合在 UI 来的更加直观，代码看起来也比较容易，更符合我们的认知，也符合 React component-base 的特性。</p>
<h2 id="当只写属性名时，默认值为-true"><a href="#当只写属性名时，默认值为-true" class="headerlink" title="当只写属性名时，默认值为 true"></a>当只写属性名时，默认值为 true</h2><figure class="highlight dts"><table><tr><td class="code"><pre><div class="line"><span class="params">&lt;MyComponent isStock/&gt;</span></div><div class="line"><span class="comment">// isStock 默认为 true</span></div></pre></td></tr></table></figure>
<h2 id="true-false-null-undefined-与-0"><a href="#true-false-null-undefined-与-0" class="headerlink" title="true,false,null,undefined 与 0"></a>true,false,null,undefined 与 0</h2><ul>
<li>true,false,null,undefined 不会被 React 渲染，但同为 falsy 值的 0 会</li>
<li>用法,控制输出<figure class="highlight dust"><table><tr><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line"><span class="template-variable">&#123; arr.length &gt; 0 &amp;&amp; 'has'&#125;</span><span class="xml"></span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line"><span class="template-variable">&#123; isVisible &amp;&amp; &lt;Test /&gt;&#125;</span><span class="xml"></span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="PropTypes-类型检查"><a href="#PropTypes-类型检查" class="headerlink" title="PropTypes 类型检查"></a>PropTypes 类型检查</h2><p>React.PropTypes 已在 React v15.5<br><figure class="highlight clean"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span></div></pre></td></tr></table></figure></p>
<h2 id="Fragment"><a href="#Fragment" class="headerlink" title="Fragment"></a>Fragment</h2><p>聚合子元素列表，而不必添加额外的元素 – 16.2.0 开始支持<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span> 1 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span> 2 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="createPortal"><a href="#createPortal" class="headerlink" title="createPortal"></a>createPortal</h2><ul>
<li>将子节点挂载到父组件以外组件的方法，在 render 方法中使用，不能挂载到父组件，因为此时父组件都没有渲染好，无法获取到 DOM</li>
<li>行为上跟其他子节点没有区别，因为 React DOM 树上依然在这个组件上，包括事件冒泡等东西</li>
</ul>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; createPortal &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span></div><div class="line">createPortal(<span class="keyword">this</span>.props.children, <span class="built_in">document</span>.getElementById(<span class="string">'portal-root'</span>))</div></pre></td></tr></table></figure>
<h2 id="错误边界"><a href="#错误边界" class="headerlink" title="错误边界"></a>错误边界</h2><p>componentDidCatch 错误边界，为组件定义一个父组件，父组件捕获错误，并提供回退的 UI</p>
<ul>
<li><p>用法</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><div class="line">componentDidCatch(<span class="keyword">error</span>, info) &#123;</div><div class="line">  this.setState(&#123; hasError: <span class="literal">true</span> &#125;);</div><div class="line">  console.<span class="built_in">log</span>(<span class="keyword">error</span>, info)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>无法捕获的错误<br>事件处理<br>异步代码 （例如 setTimeout 或 requestAnimationFrame 回调函数）<br>服务端渲染<br>错误边界自身抛出来的错误 （而不是其子组件）</p>
</li>
</ul>
<h2 id="高级组件就是函数"><a href="#高级组件就是函数" class="headerlink" title="高级组件就是函数"></a>高级组件就是函数</h2><ul>
<li>不应该在高阶组件修改原组件的属性</li>
<li>利用函数包裹组件，返回一个新的组件</li>
<li>为组件切换不同的数据源</li>
</ul>
<ol>
<li>Showcase 组件，利用 getData (Showcase, data)函数包裹，获取不同数据</li>
</ol>
<ul>
<li>不要在 render 中使用高阶组件<br>因为每一次挂载组件，都会重新获取一个高阶组件的实例</li>
<li>hoistNonReactStatic<br>将原始组件的静态方法拷贝到包裹组件中</li>
</ul>
<h2 id="容器组件"><a href="#容器组件" class="headerlink" title="容器组件"></a>容器组件</h2><ul>
<li>处理数据订阅和状态管理</li>
<li>高阶组件是参数化的容器组件 </li>
</ul>
<h2 id="rander-prop"><a href="#rander-prop" class="headerlink" title="rander prop"></a>rander prop</h2><p>标题相同，利用高阶组件把标题渲染到不同的组件</p>
<h2 id="React-中使用-Web-component"><a href="#React-中使用-Web-component" class="headerlink" title="React 中使用 Web component"></a>React 中使用 Web component</h2><p>这个时候有一点要注意的是，对于 Web component 应该使用 class,而不是 className</p>
<h2 id="lable-的-for"><a href="#lable-的-for" class="headerlink" title="lable 的 for"></a>lable 的 for</h2><p>for 是 JS 的保留字，所以使用 htmlFor 替代 for</p>
<h2 id="style属性"><a href="#style属性" class="headerlink" title="style属性"></a>style属性</h2><p>浏览器后缀除了ms以外，都应该以大写字母开头。这就是为什么WebkitTransition有一个大写字母W。<br><figure class="highlight actionscript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> divStyle = &#123;</div><div class="line">  WebkitTransition: <span class="string">'all'</span>, <span class="comment">// note the capital 'W' here</span></div><div class="line">  msTransition: <span class="string">'all'</span> <span class="comment">// 'ms' is the only lowercase vendor prefix</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="在-IE11-以下使用-React16"><a href="#在-IE11-以下使用-React16" class="headerlink" title="在 IE11 以下使用 React16"></a>在 IE11 以下使用 React16</h2><p>React16 依赖集合类型 Map 和 Set，在未提供原生支持的浏览器，需要使用一个 polyfill,例如 core-js 和 babel-polyfill<br>使用 core-js 支持</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">'core-js/es6/map'</span>;</div><div class="line"><span class="keyword">import</span> <span class="string">'core-js/es6/set'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>,</div><div class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</div><div class="line">);</div></pre></td></tr></table></figure>
<h2 id="componentDidMount-请求服务器数据"><a href="#componentDidMount-请求服务器数据" class="headerlink" title="componentDidMount 请求服务器数据"></a>componentDidMount 请求服务器数据</h2><p>在 componentDidMount 请求服务器数据并利用 setState 时应注意，在组件卸载 componentWillUnmount 应该把去求去掉</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://segmentfault.com/a/1190000008356407" target="_blank" rel="external">react 进阶漫谈</a><br><a href="https://doc.react-china.org/" target="_blank" rel="external">React 中文文档</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 React.js 一段时间了，把使用过程遇到的小坑和小技巧记录下来，希望能够帮助到其他人。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://kerita.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="React" scheme="https://kerita.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>商城性能优化想法</title>
    <link href="https://kerita.github.io/2018/02/14/2018/store-performance/"/>
    <id>https://kerita.github.io/2018/02/14/2018/store-performance/</id>
    <published>2018-02-13T16:00:00.000Z</published>
    <updated>2018-02-18T15:31:55.271Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一些关于商城性能优化的想法。</p>
<a id="more"></a>
<h2 id="压缩图片资源"><a href="#压缩图片资源" class="headerlink" title="压缩图片资源"></a>压缩图片资源</h2><p>保证图片质量情况下，尽量争取PC端每张图片不超过 200kb，移动端每张图片不超过 100kb,采用智图对图片进行压缩。</p>
<p>1.急需压缩清单</p>
<ul>
<li>产品页缩略图</li>
<li>产品页展示图</li>
<li>产品简介和包装清单图片</li>
</ul>
<p>2.待压缩清单</p>
<ul>
<li>banner 图</li>
<li>首页产品图片</li>
<li>首页头部图片</li>
</ul>
<h2 id="图片使用规范"><a href="#图片使用规范" class="headerlink" title="图片使用规范"></a>图片使用规范</h2><p>尽量使用压缩率更高的 jpg 图片，而不是 png 图片，争取使用 webp 图片</p>
<p>1.尽量采用 jpg 格式<br>png 是无损压缩，jpg 是有损压缩，不需要透明度的情况下，使用 jpg 格式</p>
<p>2.使用 webp 格式图片（待定）<br>允许的情况下，在PC端 chrome，移动端 chrome 和 原生 android  浏览器，以及 Opera 浏览器可以使用 webp 格式<br>2015年第三季度，京东在强制双核浏览器使用 chrome 内核进行渲染之后，统计数据显示使用 chrome 的比例高达 60%<br>    2017年11月25日，caniuse 上支持 webp 的浏览器份额<br>China<br>72.89%    +    0.62%    =    73.51%<br>Global<br>72.41%    +    0.23%    =    72.64%</p>
<h2 id="产品简介图区分桌面端和移动端"><a href="#产品简介图区分桌面端和移动端" class="headerlink" title="产品简介图区分桌面端和移动端"></a>产品简介图区分桌面端和移动端</h2><p>产品简介图同时加载了移动端资源和桌面端资源，亟待优化</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一些关于商城性能优化的想法。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://kerita.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="性能" scheme="https://kerita.github.io/tags/%E6%80%A7%E8%83%BD/"/>
    
      <category term="优化" scheme="https://kerita.github.io/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>动手写一个微博机器人</title>
    <link href="https://kerita.github.io/2018/02/13/2018/weibo-robot/"/>
    <id>https://kerita.github.io/2018/02/13/2018/weibo-robot/</id>
    <published>2018-02-12T16:00:00.000Z</published>
    <updated>2018-02-13T18:08:37.690Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在 <a href="https://weibo.com/1400854834/FE4pC8Rwh?type=comment#_rnd1518538999890" target="_blank" rel="external">@ruanyf</a> 老师的微博上看到“有人用推特定时发推告诉你今年的进度”，想着可以写一个微博机器人每天自动发微博倒数，一番折腾之后已经上线了，请戳 <a href="https://weibo.com/kerita" target="_blank" rel="external">@  201X进度条</a>。</p>
<a id="more"></a>
<p>具体实现过程如下（使用的语言是 Node.js）：</p>
<h2 id="申请微博网页应用"><a href="#申请微博网页应用" class="headerlink" title="申请微博网页应用"></a>申请微博网页应用</h2><p>在 <a href="http://open.weibo.com/connect" target="_blank" rel="external">微博开放平台</a> 申请一个网页应用<br> <div style="text-align:center"><br> <img src="/2018/02/13/2018/weibo-robot/test-web-app.png" alt="申请应用" title="申请应用"><br> </div></p>
<h2 id="获取应用-token"><a href="#获取应用-token" class="headerlink" title="获取应用 token"></a>获取应用 token</h2><p>在 <a href="http://open.weibo.com/tools/console" target="_blank" rel="external">API测试工具</a> 获取应用 token，取得接入权限<br> <div style="text-align:center"><br> <img src="/2018/02/13/2018/weibo-robot/get-token.png" alt="获取 token" title="获取 token"><br> </div></p>
<h2 id="修改-nodewibo-包"><a href="#修改-nodewibo-包" class="headerlink" title="修改 nodewibo 包"></a>修改 nodewibo 包</h2><p>项目是利用 nodeweibo 包来发送微博，因为新浪微博接口的权限调整，所以需要自己修改 nodewibo 包。在 nodeweibo 包 lib/config/config.json 文件增加如下代码（其实是增加 share 接口）。<br><figure class="highlight json"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">	<span class="attr">"func"</span>:<span class="string">"share"</span>,</div><div class="line">	<span class="attr">"host"</span>:<span class="string">"https://api.weibo.com"</span>,</div><div class="line">	<span class="attr">"path"</span>:<span class="string">"/2/statuses/share.json"</span>,</div><div class="line">	<span class="attr">"rmethod"</span>:[<span class="string">"POST"</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="利用-node-schedule-包定时发送微博"><a href="#利用-node-schedule-包定时发送微博" class="headerlink" title="利用 node-schedule 包定时发送微博"></a>利用 node-schedule 包定时发送微博</h2><p>利用 node-schedule 设置定时服务， 利用上面新增的 nodeweibo share 接口，手动将 token 作为参数，发送微博。<br> <div style="text-align:center"><br> <img src="/2018/02/13/2018/weibo-robot/weibo.png" alt="发送微博" title="发送微博"><br> </div></p>
<h2 id="未审核应用"><a href="#未审核应用" class="headerlink" title="未审核应用"></a>未审核应用</h2><p>上面看到应用名称为未审核，只要补全资料，提交申请，就能显示真正的应用名称，审核还是很容易通过的。</p>
<h2 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h2><p>nodeweibo 包接口丰富，除了发微博，还可以定时发表评论、获取时间线微博、定时读取某个用户微博等,可以继续拓展。</p>
<h2 id="上线"><a href="#上线" class="headerlink" title="上线"></a>上线</h2><p>代码放到阿里云服务器，利用 pm2 运行并守护进程。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>完整代码将稍后整理好，补上</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://blog.haipo.me/?p=1168" target="_blank" rel="external">微博比特币价格机器人</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 &lt;a href=&quot;https://weibo.com/1400854834/FE4pC8Rwh?type=comment#_rnd1518538999890&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@ruanyf&lt;/a&gt; 老师的微博上看到“有人用推特定时发推告诉你今年的进度”，想着可以写一个微博机器人每天自动发微博倒数，一番折腾之后已经上线了，请戳 &lt;a href=&quot;https://weibo.com/kerita&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@  201X进度条&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="node" scheme="https://kerita.github.io/categories/node/"/>
    
    
      <category term="应用" scheme="https://kerita.github.io/tags/%E5%BA%94%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>人生的意义</title>
    <link href="https://kerita.github.io/2018/02/12/2018/the%20meaning%20of%20life/"/>
    <id>https://kerita.github.io/2018/02/12/2018/the meaning of life/</id>
    <published>2018-02-11T16:00:00.000Z</published>
    <updated>2018-02-21T09:26:36.670Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>“你们活着是为了什么？为啥我经常会觉得一切都没啥意义呢……”。在朋友圈看到这段话，是让我写下这篇文章的最重要原因。</p>
<a id="more"></a>
<p>毕业几个月后，一天天重复码代码生活，在情绪低落的时候，也会问自己，“人生的意义是什么？”</p>
<p>在朋友圈看到上面那段话，发现不是只有我一个人有这种疑问，所以我想把自己答案分享出来，希望给其他人一些启迪。</p>
<p>稻盛和夫在《活法》中如是说，“所谓今生，是一个为了提高身心修养而得到的期限，是为了修炼灵魂而得到的场所。我认为可以这样说：人生活着的意义和人生的价值就是提高身心修养，修炼灵魂”。虽然“提高身心修养，修炼灵魂”听起来太过于缥缈，但是那一刻，我仿佛看到一点人生的意义——写博客。</p>
<p>我会在博客中记录下编程遇到的坑、分享学习笔记以及一些个人的思考，期待这些能给其他人带来帮助。就算有一天我死了，只要互联网还存在，我就依然活着，这就是我想写博客的原因。</p>
<p>今年的目标是，通过多更博和优化搜索，2019年1月的 UV 能达到 1000，上个月（2018年1月）大概是 100。</p>
<ul>
<li><p>春节十天，每天一更（主题已经有预备很多了）</p>
</li>
<li><p>3月起每月至少一更</p>
</li>
<li><p>优化谷歌搜索和百度搜索</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;“你们活着是为了什么？为啥我经常会觉得一切都没啥意义呢……”。在朋友圈看到这段话，是让我写下这篇文章的最重要原因。&lt;/p&gt;
    
    </summary>
    
      <category term="总结" scheme="https://kerita.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="人生" scheme="https://kerita.github.io/tags/%E4%BA%BA%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>iOS11 光标不跟随焦点</title>
    <link href="https://kerita.github.io/2017/12/03/2017/ios11-cursor-not-follow-focus/"/>
    <id>https://kerita.github.io/2017/12/03/2017/ios11-cursor-not-follow-focus/</id>
    <published>2017-12-02T16:00:00.000Z</published>
    <updated>2017-12-03T17:37:56.379Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近遇到一个新鲜的 bug —— iOS11 Safari 中 modal 上的 input 光标不跟随焦点，即当 input 获得焦点准备输入时，光标并不在 input 元素中。</p>
<a id="more"></a>
<p>之所以会有这个 bug 的原因是因为，当输入框获取焦点弹出输入法时，，Safari 向下移动页面，导致光标不跟随焦点。</p>
<p>谷歌搜索看到<a href="https://hackernoon.com/how-to-fix-the-ios-11-input-element-in-fixed-modals-bug-aaf66c7ba3f8" target="_blank" rel="external">这篇文章（需翻墙）</a>,了解到三种解决办法。</p>
<ul>
<li><p>不要讲 input 放在 modal，这种方法简单粗暴，但是可行性却很低。</p>
</li>
<li><p>将 modal 中 mask 的兄弟元素且为 input 祖先元素的元素 position 设置为 absolute。可能会导致一些意外问题，具体看 modal 的写法。 <a href="#position-absolute">代码</a></p>
</li>
<li><p>将 body 高度设置为 100vh, overflow 设置为 hidden，当然这种方法在 modal 消失需要重设这两个属性为原来的值。但如果 modal 高度gaoyu 100vh时，这种方法就无效了。<a href="#height-100vh">代码</a></p>
</li>
</ul>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://hackernoon.com/how-to-fix-the-ios-11-input-element-in-fixed-modals-bug-aaf66c7ba3f8" target="_blank" rel="external">How to fix the iOS 11 input element in fixed modals bug</a></p>
<p><a id="position-absolute"></a><br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>iOS11 cursor<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"></div><div class="line">    <span class="selector-class">.ios11</span> <span class="selector-class">.modal-ct</span>&#123;</div><div class="line">      <span class="attribute">position</span>: absolute;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    </div><div class="line">    <span class="selector-tag">body</span> &#123;</div><div class="line">      <span class="attribute">height</span>: <span class="number">200vh</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.modal</span> &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="selector-class">.mask</span> &#123;</div><div class="line">      <span class="attribute">background</span>: black;</div><div class="line">      <span class="attribute">opacity</span>: <span class="number">0.3</span>;</div><div class="line">      <span class="attribute">position</span>: fixed;</div><div class="line">      <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">      <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">      <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">      <span class="attribute">bottom</span>: <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.modal-ct</span> &#123;</div><div class="line">      <span class="attribute">position</span>: fixed;</div><div class="line">      <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">      <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">      <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">      <span class="attribute">bottom</span>: <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-tag">input</span> &#123;</div><div class="line">      <span class="attribute">font-size</span>: <span class="number">16px</span>;</div><div class="line">    &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mask"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-ct"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"other"</span>&gt;</span></div><div class="line">        Lorem ipsum dolor, sit amet consectetur adipisicing elit. Atque dolorem nam, in optio magni expedita corporis, labore veritatis delectus eaque ipsum aperiam ratione incidunt mollitia? Numquam, quos fugiat! Odit, nobis?</div><div class="line">        </div><div class="line">            Lorem ipsum dolor sit, amet consectetur adipisicing elit. Assumenda, vel adipisci libero quae sint iusto dignissimos quam quibusdam molestiae sunt dolore soluta nihil cumque sit? Quidem accusamus est ad iure.</div><div class="line">        </div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">      (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> ua = navigator.userAgent,</div><div class="line">        iOS = <span class="regexp">/iPad|iPhone|iPod/</span>.test(ua),</div><div class="line">        iOS11 = <span class="regexp">/OS 11_0_1|OS 11_0_2|OS 11_0_3|OS 11_1/</span>.test(ua);</div><div class="line">        <span class="comment">// ios 11 bug caret position</span></div><div class="line">        <span class="keyword">if</span> (iOS &amp;&amp; iOS11) &#123;</div><div class="line">          <span class="built_in">document</span>.body.setAttribute(<span class="string">'class'</span>, <span class="string">'ios11'</span>)</div><div class="line">        &#125;</div><div class="line">      &#125;)()</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><a id="height-100vh"></a><br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>iOS11 cursor<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">    </div><div class="line">    <span class="selector-tag">body</span> &#123;</div><div class="line">      <span class="attribute">height</span>: <span class="number">200vh</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="selector-class">.ios11</span> &#123;</div><div class="line">      <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">      <span class="attribute">overflow</span>: hidden;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.modal</span> &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="selector-class">.mask</span> &#123;</div><div class="line">      <span class="attribute">background</span>: black;</div><div class="line">      <span class="attribute">opacity</span>: <span class="number">0.3</span>;</div><div class="line">      <span class="attribute">position</span>: fixed;</div><div class="line">      <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">      <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">      <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">      <span class="attribute">bottom</span>: <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.modal-ct</span> &#123;</div><div class="line">      <span class="attribute">position</span>: fixed;</div><div class="line">      <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">      <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">      <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">      <span class="attribute">bottom</span>: <span class="number">0</span>;</div><div class="line">      <span class="attribute">padding-top</span>: <span class="number">100px</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-tag">input</span> &#123;</div><div class="line">      <span class="attribute">font-size</span>: <span class="number">16px</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-id">#other</span> &#123;</div><div class="line">      <span class="attribute">display</span>: none;</div><div class="line">    &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mask"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-ct"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>lorem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"other"</span>&gt;</span></div><div class="line">        Lorem ipsum dolor, sit amet consectetur adipisicing elit. Atque dolorem nam, in optio magni expedita corporis, labore veritatis delectus eaque ipsum aperiam ratione incidunt mollitia? Numquam, quos fugiat! Odit, nobis?</div><div class="line">        </div><div class="line">            Lorem ipsum dolor sit, amet consectetur adipisicing elit. Assumenda, vel adipisci libero quae sint iusto dignissimos quam quibusdam molestiae sunt dolore soluta nihil cumque sit? Quidem accusamus est ad iure.</div><div class="line">        </div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">      (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> ua = navigator.userAgent,</div><div class="line">        iOS = <span class="regexp">/iPad|iPhone|iPod/</span>.test(ua),</div><div class="line">        iOS11 = <span class="regexp">/OS 11_0_1|OS 11_0_2|OS 11_0_3|OS 11_1/</span>.test(ua);</div><div class="line">        <span class="comment">// ios 11 bug caret position</span></div><div class="line">        <span class="keyword">if</span> (iOS &amp;&amp; iOS11) &#123;</div><div class="line">          <span class="built_in">document</span>.body.setAttribute(<span class="string">'class'</span>, <span class="string">'ios11'</span>)</div><div class="line">        &#125;</div><div class="line">      &#125;)()</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近遇到一个新鲜的 bug —— iOS11 Safari 中 modal 上的 input 光标不跟随焦点，即当 input 获得焦点准备输入时，光标并不在 input 元素中。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://kerita.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="iOS" scheme="https://kerita.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>用 VPS 自己搭个梯子</title>
    <link href="https://kerita.github.io/2017/10/26/2017/vps/"/>
    <id>https://kerita.github.io/2017/10/26/2017/vps/</id>
    <published>2017-10-25T16:00:00.000Z</published>
    <updated>2017-12-03T16:13:45.962Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在某个很平凡的夜晚，因为无法打开某个链接，开始知道墙（GFW——the Great Firewall），也开始寻找翻墙的工具，一定要到墙外去看看。</p>
<a id="more"></a>
<p>墙外的世界有多精彩吗？我又有多迷恋吗？不见得。翻墙主要目的是为了用谷歌搜索，还有就是为了更流畅的访问如  <a href="https://github.com/" target="_blank" rel="external">GitHub</a>、<a href="https://stackoverflow.com" target="_blank" rel="external">Stack Overflow</a> 之类有关编程的网站。但无法翻墙损失的不只是这些网站带来的良好体验和知识，还有自由，一种我想看什么就看什么的自由。现在每每看到社交网络有人在发“看到祖国这么流氓，我就放心了”、“这盛世如你所愿”，总会有一种怪怪的感觉。</p>
<p>这里顺便把百度批判一番。作为有着上亿用户的体量的公司，百度以及百度高层衣食无忧的管理人员为了赚钱加各种广告、安装百度全家桶、劫持浏览器首页、甚至劫持bing搜索，不羞愧吗？就降低中国互联网的体验而言，百度敢说，“我不是针对谁，我是说在做的各位都是垃圾”。百度应该好好学学网易，做良心产品，发良心财。</p>
<p>言归正传，在使用过Lantern、自由门、天行者VPN、GreenVPN等各种翻墙工具，经历它们下架或无法使用之后，决定自己用 VPS 搭个 Shadowsocks 服务器翻墙。</p>
<p>VPS是啥呢？就是虚拟专用服务器（Virtual private server），可以说就是一台电脑。翻墙的原理就是，在这台电脑上跑一个 Shadowsocks 服务，自己电脑用Shadowsocks连接远程 Shadowsocks 服务，请求就可以加密传输到远程服务器，利用远程服务器访问在返回本地电脑。</p>
<p>所以要自己搭梯子，首先要买一个 VPS，一个不被墙的VPS。在对比了各个 VPS 并尝试了 linode、Vultr、搬瓦工 三个之后，我选择了搬瓦工。linode 需要用信用卡，暂时没办信用卡所以不行。Vultr 和搬瓦工都支持支付宝，但是 Vultr 的服务器被墙了（2017年10月25日），所以我退款选择了搬瓦工，速度还不错。</p>
<p>原本想推荐我买的年付 29.99刀的套餐，没想到只隔了一天就售罄了。<a href="https://bandwagonhost.com/aff.php?aff=21686&amp;pid=56" target="_blank" rel="external">搬瓦工套餐选择</a> 参考<a href="http://blog.csdn.net/nanalinlinlin/article/details/54667735" target="_blank" rel="external">购买搬瓦工 VPS</a>购买,买完进入服务器控制面板，可以直接用搬瓦工的提供的服务安装 Shadowsocks 服务。喜欢折腾的人，可以参考这篇文章安装<a href="http://blog.csdn.net/darkmanno5/article/details/78233237" target="_blank" rel="external">命令行安装SS</a></p>
<p>之后在本地电脑装 Shadowsocks，然后连接服务器，就可以翻墙上网了。</p>
<p>如上所说，我翻墙的主要是为了上谷歌搜索和编程类网站，并不做什么坏事，我还是<strong>爱国</strong>的，介绍翻墙则是为了让大家好好学习，网警叔叔别请我喝茶。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在某个很平凡的夜晚，因为无法打开某个链接，开始知道墙（GFW——the Great Firewall），也开始寻找翻墙的工具，一定要到墙外去看看。&lt;/p&gt;
    
    </summary>
    
      <category term="小技巧" scheme="https://kerita.github.io/categories/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="VPS" scheme="https://kerita.github.io/tags/VPS/"/>
    
  </entry>
  
  <entry>
    <title>谈微信的那些缺点</title>
    <link href="https://kerita.github.io/2017/10/03/2017/about-wechat/"/>
    <id>https://kerita.github.io/2017/10/03/2017/about-wechat/</id>
    <published>2017-10-02T16:00:00.000Z</published>
    <updated>2017-10-26T13:42:01.218Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天想聊一聊日常使用频率最高的 APP ——微信，使用过程一些让人不爽的地方。虽然从用户角度来说是缺点，但从腾讯角度来说当然就未必了。</p>
<a id="more"></a>
<h2 id="好友"><a href="#好友" class="headerlink" title="好友"></a>好友</h2><h3 id="无法彻底删除好友"><a href="#无法彻底删除好友" class="headerlink" title="无法彻底删除好友"></a>无法彻底删除好友</h3><p>用户删除好友时，并不会从对方好友列表删掉自己，并且动态依然会保留对方的点赞。</p>
<h3 id="没有离线聊天记录"><a href="#没有离线聊天记录" class="headerlink" title="没有离线聊天记录"></a>没有离线聊天记录</h3><p>无法是微信还是QQ，离线聊天记录都做得很差，最完美的离线聊天记录是提供所有聊天记录，并且可以按时间检索。</p>
<h2 id="群聊"><a href="#群聊" class="headerlink" title="群聊"></a>群聊</h2><h3 id="直接被拉入群"><a href="#直接被拉入群" class="headerlink" title="直接被拉入群"></a>直接被拉入群</h3><p>有些时候会很方便，但大部分时候是“打扰用户的”。</p>
<h3 id="无法彻底屏蔽群消息"><a href="#无法彻底屏蔽群消息" class="headerlink" title="无法彻底屏蔽群消息"></a>无法彻底屏蔽群消息</h3><p>对于那些不想看又不好意思退出的群，无法彻底屏蔽，即使关闭消息提醒，新的群消息依然会跑到时间线的顶端，</p>
<h2 id="朋友圈"><a href="#朋友圈" class="headerlink" title="朋友圈"></a>朋友圈</h2><h3 id="朋友圈烦人的提醒"><a href="#朋友圈烦人的提醒" class="headerlink" title="朋友圈烦人的提醒"></a>朋友圈烦人的提醒</h3><p>在一条朋友圈点赞或者评论，之后好友的评论点赞都会有烦人的提醒，微信也意识到这个问题，前几个月（现在为2017年10月）在提醒的地方可以设置这条动态不再提醒，然而是在被打扰之后才能手动设置，而且是每条都需要独立设置。</p>
<h3 id="私密朋友圈自己都不能评论"><a href="#私密朋友圈自己都不能评论" class="headerlink" title="私密朋友圈自己都不能评论"></a>私密朋友圈自己都不能评论</h3><p>只对自己开放的动态居然不能评论，用户自己留着看的就不能点评吗？</p>
<h3 id="没有关键词屏蔽"><a href="#没有关键词屏蔽" class="headerlink" title="没有关键词屏蔽"></a>没有关键词屏蔽</h3><p>关键词屏蔽，一方面可以筛选掉朋友的广告，一方面可以屏蔽重复刷屏的动态，例如“罗尔事件”中的文章。</p>
<h2 id="公众号"><a href="#公众号" class="headerlink" title="公众号"></a>公众号</h2><h3 id="原创功能只能由系统判定给予，无法申请"><a href="#原创功能只能由系统判定给予，无法申请" class="headerlink" title="原创功能只能由系统判定给予，无法申请"></a>原创功能只能由系统判定给予，无法申请</h3><p>原创功能可以开通评论和打赏，然而只能由系统判定并授予（而且我猜系统算法只是判断文字），申请的接口都不给。有个朋友在公众号画了快一年的画，有不错的阅读量和点赞量，但直到最近在画后插入一些文字才获得原创资格。</p>
<h3 id="封闭的公众号"><a href="#封闭的公众号" class="headerlink" title="封闭的公众号"></a>封闭的公众号</h3><p>公众号最大的缺点是封闭，无法被搜索引擎爬取和收录，信息包括知识无法被自由的传播，与互联网的自由开放的精神背道而驰。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="游戏无法隐藏"><a href="#游戏无法隐藏" class="headerlink" title="游戏无法隐藏"></a>游戏无法隐藏</h3><p>底部tab的“发现（Discover）”中的游戏无法关闭，即使你一点也不想玩游戏。</p>
<h3 id="手机号码为中心的账号体系"><a href="#手机号码为中心的账号体系" class="headerlink" title="手机号码为中心的账号体系"></a>手机号码为中心的账号体系</h3><p>微信开创了手机号码为中心的账号体系，一定程度避免了恶意注册，但并不是杜绝，而且牺牲那些换手机号码用户的体验。</p>
<p>更完美的还是以邮箱为中心。</p>
<h3 id="PC端登录麻烦"><a href="#PC端登录麻烦" class="headerlink" title="PC端登录麻烦"></a>PC端登录麻烦</h3><p>每次登陆PC端需要用微信扫一扫，为啥不能学习苹果——第一次时在手机询问是否同意将PC作为信任设备，同意以后都可直接登录。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>最后总结一下，微信在用户体验上还是秒杀绝大部分软件的，无论是流畅度、UI还是功能，但如果能够彻底抛开KPI，可能会更加令人尊重。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天想聊一聊日常使用频率最高的 APP ——微信，使用过程一些让人不爽的地方。虽然从用户角度来说是缺点，但从腾讯角度来说当然就未必了。&lt;/p&gt;
    
    </summary>
    
      <category term="产品" scheme="https://kerita.github.io/categories/%E4%BA%A7%E5%93%81/"/>
    
    
      <category term="微信" scheme="https://kerita.github.io/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>青峰</title>
    <link href="https://kerita.github.io/2017/10/03/2017/qingfeng/"/>
    <id>https://kerita.github.io/2017/10/03/2017/qingfeng/</id>
    <published>2017-10-02T16:00:00.000Z</published>
    <updated>2017-10-26T13:54:43.809Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在很长一段时间，我都是将对明星作品的喜欢与对明星的喜欢分开，即喜欢他的作品不一定喜欢这个人，当然也不讨厌。无论是五月天、周杰伦、陈奕迅，还是赵雷、许巍、逃跑计划，虽然他们的歌在某一瞬间或者某一段时间，让我产生共鸣，但对于他们的喜欢都只停留在歌曲上。而青峰，苏打绿的主唱，唱《小情歌》的那个人，成为了打破这个规则第一人。</p>
<a id="more"></a>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=32019043&auto=1&height=66"></iframe>


<p>我也在想为什么会因为喜欢他唱的歌喜欢这个人？一个无论是动作和嗓音都有点“女性化特质”的男歌手。大概是因为他的创作、他的歌声如他自己的所说的“像棉一样带给人温暖舒服的感觉”，在触碰听者心底最柔软地方的同时，又不失勇敢和坚毅。而其他优秀的歌手离心底，都还有一些距离。</p>
<p>这里推荐一些个人觉得比较有代表性的歌曲：《无与伦比的美丽》、《相信》、《只有可以》、《带我走》，也期待你分享动听的歌与让人喜欢的歌手。</p>
<p>当然说到青峰，不能不说张悬，有兴趣的话去了解他们的故事，并听听她的《宝贝》。</p>
<p>最后说一句，他们2016年开始休团三年，不发专辑不开演唱会。一起等待他们复出的那一天吧。</p>
<div style="text-align:center"><br><img src="/2017/10/03/2017/qingfeng/beauty.png" alt="无与伦比的美丽" title="无与伦比的美丽"><br></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在很长一段时间，我都是将对明星作品的喜欢与对明星的喜欢分开，即喜欢他的作品不一定喜欢这个人，当然也不讨厌。无论是五月天、周杰伦、陈奕迅，还是赵雷、许巍、逃跑计划，虽然他们的歌在某一瞬间或者某一段时间，让我产生共鸣，但对于他们的喜欢都只停留在歌曲上。而青峰，苏打绿的主唱，唱《小情歌》的那个人，成为了打破这个规则第一人。&lt;/p&gt;
    
    </summary>
    
      <category term="名人" scheme="https://kerita.github.io/categories/%E5%90%8D%E4%BA%BA/"/>
    
    
      <category term="苏打绿" scheme="https://kerita.github.io/tags/%E8%8B%8F%E6%89%93%E7%BB%BF/"/>
    
  </entry>
  
  <entry>
    <title>Awards 项目总结</title>
    <link href="https://kerita.github.io/2017/09/24/2017/awards-project/"/>
    <id>https://kerita.github.io/2017/09/24/2017/awards-project/</id>
    <published>2017-09-23T16:00:00.000Z</published>
    <updated>2017-10-12T11:23:17.560Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本周二（19号）彻底完成公司 Awards 项目的需求和需求修改并上线，趁热打铁写下完成项目过程的一些思考。</p>
<a id="more"></a>
<h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p><a href="https://awards.insta360.com/about?locale=zh" target="_blank" rel="external">Awards 项目</a> 是 Insta360 针对全景作品进行有奖征集一个项目，项目工作量主要在前端（故所说项目都指前端部分项目—— fe-awards），完成整个项目大概花了四天时间（指完成第一版需求的功能，不包括后来改需求时间）。</p>
<h2 id="React-mobx-架构"><a href="#React-mobx-架构" class="headerlink" title="React+mobx 架构"></a>React+mobx 架构</h2><p>整个项目采用 React+mobx 的架构， React 完成项目 View 层面的呈现，mobx 负责一些项目数据的管理。</p>
<ul>
<li>React</li>
</ul>
<ol>
<li><p>Vue、 React、 Angular<br>以 Vue、 React、 Angular 为代表的 mvvm 框架取代 jQuery 成为当下前端圈最热门的框架，解决的最大痛点就是让前端工程师从繁琐的 DOM 操作解脱。</p>
</li>
<li><p>实例<br>以隐藏一个 div 为例，jQuery 需要获取该 div，再设置display 为 none, 或者从该 div 的父元素利用 DOM 操作移除该元素；而 React 的只需要在该 div 的 style属性中给 display 属性绑定一个三元条件判断,将组件 state 中的某个变量作为判断条件，当 state 的变量值发生改变时，界面 div 是否显示也会随着改变。</p>
</li>
<li><p>Vue&amp;React<br>在使用 React 前也用过 Vue，使用过程最大的感受就是 Vue 提供了很多语法糖，写的时候很顺畅，随心所欲； React 则没有那么多语法糖，甚至连需要学习的新语法也很少。</p>
<p>很多人都说 Vue 比 React 容易上手，其实如果掌握了 mvvm 这种思想，React 比 Vue 更容易上手，因为除了 JSX 这种混合 JS 和 HTML 的语法、几个生态周期函数、setState()，React 就基本没有东西了，而 Vue 则还有需要掌握一些语法。但如上面所说， React 写起来就是没有 Vue 顺畅。</p>
</li>
</ol>
<ul>
<li>mobx<br>使用 mobx 而不是常见的 Redux，是为了解决 React 单向数据流的不方便，实现数据双向绑定自动更新，特别是那些存储于数据管理框架中给各组件共享的数据。</li>
</ul>
<p>下面介绍 mobx 的一些特性，具体内容查看 <a href="http://cn.mobx.js.org/" target="_blank" rel="external">mobx 文档</a></p>
<ol>
<li><p>数据双向绑定自动更新<br>项目中的 mobx 存储了一个变量 locale，指明当前页面使用的是哪种语言，当调用 mobx 中定义的方法改变 locale 时，所有组件引用这个 locale 的地方都会自动更新，对页面重新渲染。</p>
</li>
<li><p>数据自动持久化<br>还是 locale 这个值，在 mobx 声明时利用 @persist 修饰符指明需要持久化，当 locale 发生改变时便会自动存储在 localstorge 中，下次加载也会自动读取这个值。</p>
</li>
<li><p>计算属性<br>声明计算属性，根据其他值，该属性设置不同的值。当 locale 为 zh 时，加载中文语言包，当 locale 为 en 时，加载英文语言包。</p>
</li>
</ol>
<h2 id="统计代码追踪"><a href="#统计代码追踪" class="headerlink" title="统计代码追踪"></a>统计代码追踪</h2><p>在项目中加了 growingIO、百度统计、ga、fb pixel等统计代码，对访问数据进行记录。</p>
<p>同时加了一些 meta 信息，使得在 facebook 分享这个项目时，可以显示我们想要的预览图。</p>
<p>这个地方基本没什么问题，就是 ga 上与其他项目使用同个 id 追踪时，这个项目无法利用过滤器中的主机名（awards.insta360.com）筛选出来，但相同情况下的 blog.insta360.com 就筛选出来了。</p>
<h2 id="移动端适配方案"><a href="#移动端适配方案" class="headerlink" title="移动端适配方案"></a>移动端适配方案</h2><p>我对整个项目进行分割—— header,footer,banner,about,instruction,terms。</p>
<ul>
<li><p>对于 header,footer,banner 这三个PC端和移动端 UI 上差异比较大的，我分开来写，根据不同屏幕加载不同组件。</p>
</li>
<li><p>对于 about,instruction,terms UI 差别不大，利用媒体查询 @media(max-width: 768px) 对移动端做了适配。</p>
</li>
</ul>
<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><ul>
<li><p>修改 Antd 组件样式<br>项目使用 React 经典组件库 Antd 进行开发，无论是在布局还是表单组件上都很方便，但是有些地方例如 单选、多选，因为各个公司设计不同，不能直接使用，想要使用 antd Form 组件各种方便的 api，如验证数据有效性、required 、初始值，就只能痛苦地修改 Antd 组件的样式。而且只能写在 App.css 中才能控制到 Antd 的样式，代码有些丑了。</p>
<p>如果有时间针对表单组件，联合公司设计师写一套适合公司 UI 风格的 React 组件，接下来会很大方便开发。</p>
</li>
<li><p>Insta360 Air app 语言参数不生效<br>因为项目有多语言，而且要求首次加载的时候就能指定语言，所以会获取 url 的 locale 参数值（zh或en），没有的取 localstorage 的值, localstorage 也没有的话默认为 en。</p>
<p>但是这个参数在 Insta360 Air app 的 webview 中无法生效，一开始以为是webview 禁止取参数，测试发现是可以的。摸索了一些，发现是 mobx 持久化函数的回调没法生效，所以只要把 取参数设置 locale 这段代码 移到其他就行了。</p>
<p>但有个奇怪的地方，就是只在 Insta360 Air app 的 webview 有这个问题，难道这个 app 的 webview 加了什么特技？</p>
</li>
</ul>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul>
<li>不足之处</li>
</ul>
<ol>
<li><p>组件化程度不够高<br>一开始觉得这个项目数据流动不多，所以没有抽出很多小组件，导致组件化程度不够高，有些组件代码比较多，对应的 CSS 代码也多。所以即使数据不多的情况下，抽组件依然有好处</p>
</li>
<li><p>代码质量<br>无论是 JSX、 json、 还是 CSS，都尽可能写得好看漂亮，不仅有利于之后维护，写的时候也清晰。 </p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本周二（19号）彻底完成公司 Awards 项目的需求和需求修改并上线，趁热打铁写下完成项目过程的一些思考。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://kerita.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="项目" scheme="https://kerita.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>带我走</title>
    <link href="https://kerita.github.io/2017/09/20/2017/take-me-to-your-heart/"/>
    <id>https://kerita.github.io/2017/09/20/2017/take-me-to-your-heart/</id>
    <published>2017-09-19T16:00:00.000Z</published>
    <updated>2017-09-20T15:44:47.844Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>《带我走》- 苏打绿<br><a id="more"></a></p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=27946612&auto=1&height=66"></iframe>

<div style="text-align:center"><img src="http://7xpofw.com1.z0.glb.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20170920234314.jpg" width="375" height="375" alt=""> </div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《带我走》- 苏打绿&lt;br&gt;
    
    </summary>
    
      <category term="歌" scheme="https://kerita.github.io/categories/%E6%AD%8C/"/>
    
    
      <category term="苏打绿" scheme="https://kerita.github.io/tags/%E8%8B%8F%E6%89%93%E7%BB%BF/"/>
    
  </entry>
  
  <entry>
    <title>关于牙套</title>
    <link href="https://kerita.github.io/2017/09/14/2017/about-brace/"/>
    <id>https://kerita.github.io/2017/09/14/2017/about-brace/</id>
    <published>2017-09-13T16:00:00.000Z</published>
    <updated>2017-09-13T16:52:56.070Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>经历大概两年的矫正，终于拆掉了牙齿上的矫正器，并结束每月一次的调整。值此之际，简单写下一些感受和心得。</p>
<a id="more"></a>
<h2 id="箍牙要趁早"><a href="#箍牙要趁早" class="headerlink" title="箍牙要趁早"></a>箍牙要趁早</h2><p>化用张爱玲的“出名要趁早”来说箍牙这件事越早越好。在牙齿定型后如果出现不整齐，那就早点去箍牙吧。一是越早箍牙越早享受牙齿整齐的开心，也更容易整；二是箍牙费用一年比一年水涨船高。</p>
<h2 id="箍牙历程"><a href="#箍牙历程" class="headerlink" title="箍牙历程"></a>箍牙历程</h2><p>箍牙过程最痛苦的是戴上牙套的前两周，牙齿软的根本无法吃一丢丢硬的东西，我是靠着喝粥、吃面、吃鱼度过那两周的，肚子饿得很快，多吃几餐就好了。</p>
<p>而后每个月的调整后的第一周，牙齿也会有点软，撕咬力不足。不过还好，只要不吃特别韧的东西就行。每个月的调整按时去，准时去可以缩短矫正周期。</p>
<p>把牙套摘下后还需要继续戴保持器，至于戴多久看疗效。现在是白天有颗牙齿跑偏，晚上戴保持器矫正回去。</p>
<p>具体矫正过程戳这里：<a href="http://zhihu.com/question/36994221/answer/75198033" target="_blank" rel="external">箍牙历程</a></p>
<h2 id="箍牙疗效"><a href="#箍牙疗效" class="headerlink" title="箍牙疗效"></a>箍牙疗效</h2><p>还行，能看了，能大大方方地笑出来了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;经历大概两年的矫正，终于拆掉了牙齿上的矫正器，并结束每月一次的调整。值此之际，简单写下一些感受和心得。&lt;/p&gt;
    
    </summary>
    
      <category term="总结" scheme="https://kerita.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="健康" scheme="https://kerita.github.io/tags/%E5%81%A5%E5%BA%B7/"/>
    
  </entry>
  
</feed>
