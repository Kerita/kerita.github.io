<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kerita</title>
  <subtitle>自律谦逊，承担责任，推迟满足感，你要热爱它</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://kerita.github.io/"/>
  <updated>2017-08-05T15:58:11.113Z</updated>
  <id>https://kerita.github.io/</id>
  
  <author>
    <name>Kerita</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于牙套</title>
    <link href="https://kerita.github.io/2017/08/05/about-brace/"/>
    <id>https://kerita.github.io/2017/08/05/about-brace/</id>
    <published>2017-08-04T16:00:00.000Z</published>
    <updated>2017-08-05T15:58:11.113Z</updated>
    
    <content type="html"><![CDATA[<p>关于牙套</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于牙套&lt;/p&gt;

    
    </summary>
    
      <category term="总结" scheme="https://kerita.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="健康" scheme="https://kerita.github.io/tags/%E5%81%A5%E5%BA%B7/"/>
    
  </entry>
  
  <entry>
    <title>关于《吐槽大会》</title>
    <link href="https://kerita.github.io/2017/08/03/about-roast/"/>
    <id>https://kerita.github.io/2017/08/03/about-roast/</id>
    <published>2017-08-02T16:00:00.000Z</published>
    <updated>2017-08-05T15:56:22.750Z</updated>
    
    <content type="html"><![CDATA[<p>几天前在某个地方，或是知乎回答，或是公众号文章，看到关于《吐槽大会》的议论，觉得挺有意思，遂去搜一搜、看一看。</p>
<a id="more"></a>
<h3 id="保持好奇心"><a href="#保持好奇心" class="headerlink" title="保持好奇心"></a>保持好奇心</h3><p>这里顺便说另一个事情，作为一个年轻人，对于新生事物，应该保持好奇心；而不是看一眼，连思考都没有，就下结论。</p>
<p>之前看到朋友圈有几个人对吴亦凡参与的《中国有嘻哈》评价颇高，第一眼看到吴亦凡，觉得质量不会很高，就没有去看。过了好几天，又在朋友圈看到关于《中国有嘻哈》的讨论，这才区看，质量果真不咋地。哈哈哈。当然，这不影响我以后对新生事物保持好奇心。</p>
<h3 id="吴亦凡、鹿晗与黄子韬"><a href="#吴亦凡、鹿晗与黄子韬" class="headerlink" title="吴亦凡、鹿晗与黄子韬"></a>吴亦凡、鹿晗与黄子韬</h3><p>吴亦凡的黑点在于：一是没有与名气相匹配的作品；二是骗炮门；三是面相不善，不像一个善良的人。相对而言，鹿晗还是挺面善的，但也是没有与名气匹配的作品；黄子韬倒是有跟名气相匹配的表情包，但是也不面善。</p>
<h3 id="吐槽大会介绍"><a href="#吐槽大会介绍" class="headerlink" title="吐槽大会介绍"></a>吐槽大会介绍</h3><p>扯远了，回到《吐槽大会》。《吐槽大会》第一季已经结束了，总共有十期，每期会有一个主咖，外加6个嘉宾（偶尔也有七个嘉宾），当然还有一个主持人。虽然十期挑着看还没看完，但是已经按耐不住想“吐槽”的心情了。（其实是十一期，第0期周杰场，内容因为太污刚播出就被禁了，节目组也进行了整改，腾讯视频也再没把这一期算进去。）</p>
<h3 id="主持人"><a href="#主持人" class="headerlink" title="主持人"></a>主持人</h3><p>主持人最重要的就是把整个节目衔接流畅，其次是咬字要清楚；主持这个节目呢，当然还需要幽默，不仅要能拿主咖嘉宾开玩笑，更要能自嘲。</p>
<p>《吐槽大会》的主持人一般都是张绍刚，偶尔也会是王自健。两个人相比，我更喜欢张绍刚。在串联节目、吐字方面、幽默和槽点，张绍刚都更胜一筹。偶尔换换王自健来主持也是不错的，不腻。</p>
<h3 id="主咖"><a href="#主咖" class="headerlink" title="主咖"></a>主咖</h3><p>主咖也就是每期的主角，节目就是从主持人吐槽主咖开始，然后嘉宾一个接着一个上台继续吐槽，嘉宾间也会互相吐槽，最后主咖反击。这样一个需要接受七个人吐槽的主角：一是必然在普通观众中知名度高，如果找一个八线演员，观众看到本期主咖名字，就没有想看的欲望了；二是要有槽点可以吐，但是槽点一定是要能洗白的，吸毒或者台独之类的槽点就不适合了；三是要幽默，最后的反击越犀利越好。</p>
<p>总共十一期节目，看了周杰、李湘、曹云金、大张伟、唐国强、蔡国庆、小沈阳、薛之谦和凤凰传奇这几期。比较好看的是曹云金、唐国强、和凤凰传奇三期，周杰场其实也还行，但因为是第0期，节目有些粗糙（排名分先后）。这几个主咖，至少都满足了上面的第一、二个条件，幽默程度也都还行，当然最6的还是说相声的曹云金了。</p>
<p>至于其他几个人呢，李湘、薛之谦、蔡国庆、小沈阳的槽点都不是很值得吐，大张伟的槽点是多次歌曲抄袭，这个槽点不适合用来吐槽，洗不白。</p>
<h3 id="嘉宾"><a href="#嘉宾" class="headerlink" title="嘉宾"></a>嘉宾</h3><p>合适的主咖很重要，会吐槽的嘉宾也很重要。如果有跟主咖关系密切而且又很会吐槽的嘉宾，节目就好看了，唐国强场的王刚就是这么一个嘉宾。吐槽时把握节奏太好了，不仅吐槽唐国强好笑，吐槽嘉宾史航的时候也很好笑，特别是结合史航身世“存在即合理”的哲学梗，。</p>
<p>其他嘉宾除了李诞和池子这两个钉子户，其他嘉宾的吐槽并没有给我留下太深的印象。李诞和池子两个策划人每期都会上，针对嘉宾和主咖的吐槽都还蛮好笑的，池子比李诞幽默感更强，但论节奏感还是比不上老戏骨王刚。因为他们上了太多期，其他嘉宾针对他们的吐槽也变成老生常谈。</p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>看完《吐槽大会》后，也有一种想写下一段吐槽自己的文字，但还没有想好如何写，之后补上。</p>
<p>顺便说一句，国内这几年网络综艺节目发展得挺不错的，《快乐大本营》和《天天向上》收视率没那么高了吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;几天前在某个地方，或是知乎回答，或是公众号文章，看到关于《吐槽大会》的议论，觉得挺有意思，遂去搜一搜、看一看。&lt;/p&gt;
    
    </summary>
    
      <category term="总结" scheme="https://kerita.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="幽默" scheme="https://kerita.github.io/tags/%E5%B9%BD%E9%BB%98/"/>
    
  </entry>
  
  <entry>
    <title>Markdown小技巧</title>
    <link href="https://kerita.github.io/2017/07/10/markdown-skills/"/>
    <id>https://kerita.github.io/2017/07/10/markdown-skills/</id>
    <published>2017-07-09T16:00:00.000Z</published>
    <updated>2017-07-10T12:00:44.928Z</updated>
    
    <content type="html"><![CDATA[<p>最近经常用markdown写作，特别是将线上笔记本切换到为知笔记之后。使用频率增加就想提高效率，参考网上的文章，整理了这篇Markdown的小技巧。</p>
<a id="more"></a>
<h3 id="输入代码"><a href="#输入代码" class="headerlink" title="输入代码"></a>输入代码</h3><ol>
<li>前后输入三个反引号 <figure class="highlight 1c"><table><tr><td class="code"><pre><div class="line">console.<span class="built_in">log</span>()</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="插入空格（大多数用于首行缩进）"><a href="#插入空格（大多数用于首行缩进）" class="headerlink" title="插入空格（大多数用于首行缩进）"></a>插入空格（大多数用于首行缩进）</h3><ol>
<li><code>&amp;emsp;&amp;emsp;</code><br>测试&emsp;&emsp;测试</li>
</ol>
<h3 id="显示图片大小并居中"><a href="#显示图片大小并居中" class="headerlink" title="显示图片大小并居中"></a>显示图片大小并居中</h3><ol>
<li><code>&lt;div style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;图片地址&quot; width=&quot;图片显示宽度&quot; height=&quot;显示高度&quot; alt=&quot;图片名称&quot;/&gt; &lt;/div&gt;</code><div style="text-align:center"><img src="http://7xpofw.com1.z0.glb.clouddn.com/wechat-qr-code%281%29.JPG" width="200px" height="266px" alt="qrcode"></div>

</li>
</ol>
<h3 id="斜体和粗体"><a href="#斜体和粗体" class="headerlink" title="斜体和粗体"></a>斜体和粗体</h3><ol>
<li>斜体 <code>*</code><br><em>斜体示例</em></li>
<li>粗体 <code>**</code><br><strong>粗体示例</strong></li>
<li>斜体加粗体 <code>***</code><br><strong><em>示例</em></strong></li>
</ol>
<h3 id="插入链接"><a href="#插入链接" class="headerlink" title="插入链接"></a>插入链接</h3><ol>
<li><code>[text](link)</code><br><a href="http://www.jianshu.com/p/9d94660a96f1" target="_blank" rel="external">Markdown使用小技巧</a></li>
</ol>
<h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><ol>
<li><code>![text](link)</code><br><img src="http://7xpofw.com1.z0.glb.clouddn.com/wechat-qr-code%281%29.JPG" alt=""></li>
</ol>
<h3 id="插入水平线"><a href="#插入水平线" class="headerlink" title="插入水平线"></a>插入水平线</h3><ol>
<li><code>___ 或者 ***</code>  </li>
</ol>
<hr>
<hr>
<h3 id="高亮文字"><a href="#高亮文字" class="headerlink" title="高亮文字"></a>高亮文字</h3><ol>
<li><code>`` text `` </code><br><code>高亮文字</code></li>
</ol>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接:"></a>参考链接:</h3><ol>
<li><a href="http://www.jianshu.com/p/9d94660a96f1" target="_blank" rel="external">Markdown使用小技巧</a></li>
<li><a href="http://www.jianshu.com/p/ac83db608a7e" target="_blank" rel="external">Markdown使用技巧,轻松搞定Markdown</a></li>
<li><a href="http://www.jianshu.com/p/q81RER" target="_blank" rel="external">献给写作者的 Markdown 新手指南</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近经常用markdown写作，特别是将线上笔记本切换到为知笔记之后。使用频率增加就想提高效率，参考网上的文章，整理了这篇Markdown的小技巧。&lt;/p&gt;
    
    </summary>
    
      <category term="小技巧" scheme="https://kerita.github.io/categories/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="Markdown" scheme="https://kerita.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>毕业找房记</title>
    <link href="https://kerita.github.io/2017/07/09/find-house/"/>
    <id>https://kerita.github.io/2017/07/09/find-house/</id>
    <published>2017-07-08T16:00:00.000Z</published>
    <updated>2017-08-05T17:12:35.585Z</updated>
    
    <content type="html"><![CDATA[<p>七月毕业，离开学校回到深圳才开始找房，其实这个时候找房子有点晚了，蛮多毕业生六月份就提前找好房子了。</p>
<a id="more"></a>
<p>（201700806更新）</p>
<h3 id="豆瓣找房1-0"><a href="#豆瓣找房1-0" class="headerlink" title="豆瓣找房1.0"></a>豆瓣找房1.0</h3><p>一开始找房子，在豆瓣租房小组看到离公司旁边U小区的房源就豆油联系了一下，加了微信后才知道原来是链家的中介A（以下简称A）。第二天带我看房又说U小区没房了，所以带我去看了V小区和w小区的房。V小区是1460，w小区月租2000，V小区就在公司对面所以个人对V小区是比较满意的，决定租那间。决定签约前一天，又自己在自如app上联系宝安中心的管家B（以下简称B）带我去看了一次房，同时A也把B的微信给我，因为他要去军训没办法带我办理交接，让B带我办理。</p>
<p>不幸的是，天健那房子没抢到，A此时已经去军训了，无法带我看房，而B知道我没抢到天健的房子挺热心的，所以我开始联系B带我去看自如的房子。</p>
<p>B带我看了几间房，小区X一间1700+的还挺满意的，此时A发现居然是B带我看房就找我反复撕逼，而且不仅找我撕逼，还找到自如的区域经理，说自如的人抢他客户。心累啊，我挺感谢A第一次带我看房，我才知道自如房，但是你没时间带我看房，还不让别人带我看房？最后跟他说，谁带我看的房，我就跟谁签。会这么说，也是因为V小区那房被其他人抢到后迟迟没有确认，还可能抢到。</p>
<h3 id="豆瓣找房2-0与自如"><a href="#豆瓣找房2-0与自如" class="headerlink" title="豆瓣找房2.0与自如"></a>豆瓣找房2.0与自如</h3><p>继续观望V小区房子时，也在豆瓣上继续看房，做了许多笔记，但真正去看的只有离翻身地铁站50米的一个专门用来单间房公寓楼，窗户面向过道的单间1600，面向外面的1800，而且没有洗衣机，环境也恶劣的很，不值得租。</p>
<p>同时跟着B看了自如的一些房子，跟着B去洪浪北看了一间1460的房，也还不错，为了避免出现X小区房又被抢的状况，就先付押金预订了，作为最后的选择。</p>
<p>而后继续在公司附近找房，最后在确定V小区租不到后，第二天早上就去看Z小区一间合适的房，考虑我中午不睡、下午奔溃的状态，还有综合离地铁口近的房子的房租，决定租这间。而洪浪北的房子因为自如没有按时交房，也刚好退了。</p>
<h3 id="签约与搬家"><a href="#签约与搬家" class="headerlink" title="签约与搬家"></a>签约与搬家</h3><p>找到Z小区的房子就立马签约交房，东洪之前跟我说搬家可以找他帮忙就找了。幸亏有他帮忙，东西太多了，一辆滴滴塞满，只能坐下我，他骑车过来。幸亏从公司宿舍到Z小区也不是很远。顺利完成搬家。</p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><ul>
<li><p>毕业生找房，6月就可以找，不要因为多花一个月钱就不找。</p>
</li>
<li><p>找房首选离公司近的，近得可以步行回去睡午觉的完美，像我这样骑车回去睡午觉的也还行。</p>
</li>
<li><p>自如房还行，最完美当然是三四个同事一起租在公司附近（步行可轻松到达范围）。</p>
</li>
<li><p>情侣一起租个单间而不是合租也不错吧，哈哈哈，只是我还没体验过。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;七月毕业，离开学校回到深圳才开始找房，其实这个时候找房子有点晚了，蛮多毕业生六月份就提前找好房子了。&lt;/p&gt;
    
    </summary>
    
      <category term="总结" scheme="https://kerita.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="heUo" scheme="https://kerita.github.io/tags/heUo/"/>
    
  </entry>
  
  <entry>
    <title>word-wrap&amp;word-break</title>
    <link href="https://kerita.github.io/2017/07/04/word-wrap&amp;word-break/"/>
    <id>https://kerita.github.io/2017/07/04/word-wrap&amp;word-break/</id>
    <published>2017-07-03T16:00:00.000Z</published>
    <updated>2017-07-10T15:47:36.869Z</updated>
    
    <content type="html"><![CDATA[<p>在开发Insta360官网英文版的时候，曾遇到单词太长如何换行的问题。谷歌一下，搞定需求，但是对这两个CSS3属性还是一知半解，借着阅读《CSS3实用指南》的契机，把他们理清。</p>
<a id="more"></a>
<h3 id="不指定word-wrap与work-break值"><a href="#不指定word-wrap与work-break值" class="headerlink" title="不指定word-wrap与work-break值"></a>不指定word-wrap与work-break值</h3><p>在不显式指定word-wrap和word-break属性值，并忽略从祖先元素继承值（这两个属性都可以继承），即这两个CSS属性的值都为normal时，讨论浏览器对长单词如何渲染。</p>
<ol>
<li><p>以汉字为代表的CJK类文字<br>CJK类(Chinese, Japanese, Korean and Vietnamese)文字中，每个文字都被当做一个单词，正常情况下，不存在长单词溢出或者换行问题，浏览器可以比较好的渲染</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="class">div </span>&#123;</div><div class="line"><span class="symbol">    width:</span> <span class="number">100</span>px;</div><div class="line"><span class="symbol">    border:</span> <span class="number">1</span>px solid <span class="meta">#ccc;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="params">&lt;div&gt;</span>谷歌一下，搞定需求，但是对对这两个CSS3属性还是一知半解，借着阅读《CSS3实用指南》的契机，把他们理清。<span class="params">&lt;/div&gt;</span></div></pre></td></tr></table></figure>
<div style="text-align:center"><img src="http://7xpofw.com1.z0.glb.clouddn.com/not-use-cjk.png" width="300px" height="150px" alt="not-use-cjk.png"></div>
</li>
<li><p>以英文为代表的latin文字</p>
</li>
</ol>
<ul>
<li><p>当出现此类文字的长单词在当前行无法放下时，浏览器在父容器范围内寻找单词中可换行点进行换行，包括‘？’或者‘-’等。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">div</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">&lt;div&gt; <span class="selector-tag">a</span> long word   <span class="selector-tag">a</span> long word  https:<span class="comment">//www.google.com.hk/search?q=CJKV&amp;oq=CJKV&amp;aqs=chrome..6-9i57j0l5.1919j0j1&amp;sourceid=chrome&amp;ie=UTF-8&lt;/div&gt;</span></div></pre></td></tr></table></figure>
<div style="text-align:center"><img src="http://7xpofw.com1.z0.glb.clouddn.com/not-use-url.png" width="535px" height="120px" alt="not-use-url.png"></div>
</li>
<li><p>当可换行点在父容器外时，在父容器外换行；当没有可换行点时，独立一行显示；如果独立一行仍放不下，溢出显示。</p>
</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">div</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</div><div class="line">&#125;</div><div class="line">&lt;div&gt; <span class="selector-tag">a</span> long word   <span class="selector-tag">a</span> long word  dddddddddddddddddddddddddd&lt;/div&gt;</div></pre></td></tr></table></figure>
 <div style="text-align:center"><img src="http://7xpofw.com1.z0.glb.clouddn.com/not-use-latin.png" width="475px" height="110px" alt="not-use-latin.png"></div>


<h3 id="使用word-wrap"><a href="#使用word-wrap" class="headerlink" title="使用word-wrap"></a>使用word-wrap</h3><p>word-wrap在新的标准命名为overflow-wrap，word-wrap作为一个别名，仍可使用，并且主流浏览器都支持。</p>
<p>word-wrap关心两个值：normal和break-word。而normal作为默认值，渲染结果可在上面知道。break-word呢，当前行且在父容器内有可换行点时换行；当前行没有可换行点时，独立一行显示；独立一行仍放不下的，在将溢出处自动换行。</p>
<ul>
<li><p>当前行有可换行点</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><div class="line"><span class="class">div </span>&#123;</div><div class="line"><span class="symbol">        width:</span> <span class="number">200</span>px;</div><div class="line"><span class="symbol">        border:</span> <span class="number">1</span>px solid <span class="meta">#ccc;</span></div><div class="line">        word-wrap: break-word;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"> <span class="params">&lt;div&gt;</span> a long word  search?q=CJKV<span class="variable">&amp;oq</span>=CJKV<span class="variable">&amp;aqs</span>=chrome.<span class="number">.69</span>i57j0l5<span class="number">.1919</span>j0j1<span class="variable">&amp;sourceid</span>=chrome<span class="variable">&amp;ie</span>=UTF<span class="number">-8</span><span class="params">&lt;/div&gt;</span></div></pre></td></tr></table></figure>
<div style="text-align:center"><img src="http://7xpofw.com1.z0.glb.clouddn.com/word-wrap-url.png" width="575px" height="160px" alt="word-wrap-url.png"></div></li>
<li>当前行无可换行点</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">div</span> &#123;</div><div class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</div><div class="line">        <span class="attribute">word-wrap</span>: break-word;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&lt;div&gt; <span class="selector-tag">a</span> long word  https:<span class="comment">//www.google.com.hk/search?q=CJKV&amp;oq=CJKV&amp;aqs=chrome..69i57j0l5.1919j0j1&amp;sourceid=chrome&amp;ie=UTF-8&lt;/div&gt;</span></div></pre></td></tr></table></figure>
 <div style="text-align:center"><img src="http://7xpofw.com1.z0.glb.clouddn.com/word-wrap-longword.png" width="505px" height="200px" alt="word-wrap-longword"></div>


<h3 id="使用word-break"><a href="#使用word-break" class="headerlink" title="使用word-break"></a>使用word-break</h3><p>work-break关心三个值：normal,break-all,keep-all。normal的效果上面可见。</p>
<ul>
<li><p>break-all<br>看到一个好的例子来解释这个属性就是：资本家总是极尽可能的压榨工人，break-all就是极尽可能的利用所有空间，不另起一行，且在每一行行在将溢出处换行。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">div</span> &#123;</div><div class="line">       <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">       <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</div><div class="line">       <span class="attribute">word-break</span>: break-all;</div><div class="line">   &#125;</div><div class="line">&lt;div&gt; <span class="selector-tag">a</span> long word  https:<span class="comment">//www.google.com.hk/search?q=CJKV&amp;oq=CJKV&amp;aqs=chrome..69i57j0l5.1919j0j1&amp;sourceid=chrome&amp;ie=UTF-8&lt;/div&gt;</span></div></pre></td></tr></table></figure>
<div style="text-align:center"><img src="http://7xpofw.com1.z0.glb.clouddn.com/keep-all.png" width="590px" height="165px" alt="break-all"></div>
</li>
<li><p>keep-all<br>keep-all就是在normal的基础上，让CJK文字也按溢出显示。同时也会让一些中文标点符号是做可换行点，且一些符号如《》还必须同行显示。</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><div class="line"><span class="class">div </span>&#123;</div><div class="line"><span class="symbol">    width:</span> <span class="number">200</span>px;</div><div class="line"><span class="symbol">    border:</span> <span class="number">1</span>px solid <span class="meta">#ccc;</span></div><div class="line">    word-break: keep-all;</div><div class="line">&#125;</div><div class="line"><span class="params">&lt;div&gt;</span>谷歌一下，搞定需求，但是对对这两个CSS3属性还是一知半解，借着阅读啦啦啦啦《CSS3实用指南》的契机，把他们理清。<span class="params">&lt;/div&gt;</span></div></pre></td></tr></table></figure>
<div style="text-align:center"><img src="http://7xpofw.com1.z0.glb.clouddn.com/keep-all.png" width="535px" height="175px" alt="keep-all"></div>

<h3 id="同时使用"><a href="#同时使用" class="headerlink" title="同时使用"></a>同时使用</h3><ul>
<li><p>word-wrap:break-word;与word-break:break-all;<br>这个时候就是不溢出，不另起一行，随处换行。</p>
</li>
<li><p>word-wrap:break-word;与word-break:break-all;<br>不溢出，另起一行，中文标点符号成为成为可换行符。</p>
</li>
</ul>
</li>
</ul>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><p><a href="http://www.cnblogs.com/2050/archive/2012/08/10/2632256.html" target="_blank" rel="external">你真的了解word-wrap和word-break的区别吗？</a></p>
</li>
<li><p><a href="https://developer.mozilla.org/de/docs/Web/CSS/word-wrap" target="_blank" rel="external">word-wrap——MDN</a></p>
</li>
<li><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/word-break" target="_blank" rel="external">word-break——MDN</a></p>
</li>
<li><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-wrap" target="_blank" rel="external">overflow-wrap——MDN</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在开发Insta360官网英文版的时候，曾遇到单词太长如何换行的问题。谷歌一下，搞定需求，但是对这两个CSS3属性还是一知半解，借着阅读《CSS3实用指南》的契机，把他们理清。&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="https://kerita.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="CSS3" scheme="https://kerita.github.io/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>记一次感冒</title>
    <link href="https://kerita.github.io/2017/06/25/a-cold-in-2017/"/>
    <id>https://kerita.github.io/2017/06/25/a-cold-in-2017/</id>
    <published>2017-06-24T16:00:00.000Z</published>
    <updated>2017-08-03T15:43:10.692Z</updated>
    
    <content type="html"><![CDATA[<p>之所以写下这篇文章，不只是想记录下这次感冒的过程，而是为了提醒自己该运动了。无论搬家了与否，都应该运动。没搬家照旧在天健，搬家了在新家附近，并且还有Keep可以做呢。谨记谨记。<br><a id="more"></a></p>
<h3 id="开始感冒"><a href="#开始感冒" class="headerlink" title="开始感冒"></a>开始感冒</h3><p>最近身体状态真是极差，今年（2017年）大概5月的时候就有一次喉咙痛接近感冒，6月23号晚身体开始出现疲惫状态，然后是全身酸痛，即使下床喝了一包999感冒冲剂也无济于事。还有晚上的空调吹得我瑟瑟发抖，脚一直发冷，迷迷糊糊中选择了不作为，第二天早上中午症状更加严重。<br><!--more--><br>身体酸痛发软疲劳，甚至连午饭都吃不下去，扒了几口之后就回床上睡觉了，睡到下午四点多的时候状态恢复一点立马跑去校医室。</p>
<h3 id="治疗和恢复"><a href="#治疗和恢复" class="headerlink" title="治疗和恢复"></a>治疗和恢复</h3><p>到校医室之后是挂号，花十分钟量体温，医生居然让我去走廊的那里量体温，这我就不明白了，在里面不能量？那个时候也没有其他病人啊。然后是问询、开药，羞涩地被护士姐姐打了一针，因为低烧了。</p>
<p>晚上回来吃药睡觉，第二三天早上醒来感觉好很多了，但是低烧症状彻底消失还要到晚上。</p>
<p>现在身体还在恢复之中，并没有完全好，喉咙还有问题，受凉会打喷嚏。</p>
<h3 id="咳嗽消失"><a href="#咳嗽消失" class="headerlink" title="咳嗽消失"></a>咳嗽消失</h3><p>7月8号凌晨过来更新。</p>
<p>上一周还是有痰咳嗽的状态，这一周好像就消失，消失得好像我都忘记有过感冒这回事了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之所以写下这篇文章，不只是想记录下这次感冒的过程，而是为了提醒自己该运动了。无论搬家了与否，都应该运动。没搬家照旧在天健，搬家了在新家附近，并且还有Keep可以做呢。谨记谨记。&lt;br&gt;
    
    </summary>
    
      <category term="总结" scheme="https://kerita.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="健康" scheme="https://kerita.github.io/tags/%E5%81%A5%E5%BA%B7/"/>
    
  </entry>
  
  <entry>
    <title>test-image</title>
    <link href="https://kerita.github.io/2017/06/13/test-image/"/>
    <id>https://kerita.github.io/2017/06/13/test-image/</id>
    <published>2017-06-13T02:57:14.000Z</published>
    <updated>2017-07-10T11:49:58.156Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 如何在Markdown中插入图片，使得编译之后，在hexo首页和文章页都能看到呢？ </strong></p>
<a id="more"></a>
<h3 id="设置-post-asset-folder"><a href="#设置-post-asset-folder" class="headerlink" title="设置 post_asset_folder"></a>设置 post_asset_folder</h3><p>在根目录下的_config.yml设置post_asset_folder:true</p>
<h3 id="posts目录下创建文章同名目录"><a href="#posts目录下创建文章同名目录" class="headerlink" title="_posts目录下创建文章同名目录"></a>_posts目录下创建文章同名目录</h3><h3 id="引入图片"><a href="#引入图片" class="headerlink" title="引入图片"></a>引入图片</h3><figure class="highlight django"><table><tr><td class="code"><pre><div class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">asset_img</span> example.png text %&#125;</span><span class="xml"></span></div></pre></td></tr></table></figure>
<img src="/2017/06/13/test-image/example.png" alt="This is a image" title="This is a image">
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://yanyinhong.github.io/2017/05/02/How-to-insert-image-in-hexo-post/" target="_blank" rel="external">Hexo博客搭建之在文章中插入图片</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 如何在Markdown中插入图片，使得编译之后，在hexo首页和文章页都能看到呢？ &lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="小技巧" scheme="https://kerita.github.io/categories/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="hexo" scheme="https://kerita.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>前端模块化与模块加载器</title>
    <link href="https://kerita.github.io/2017/06/12/about-module/"/>
    <id>https://kerita.github.io/2017/06/12/about-module/</id>
    <published>2017-06-11T16:00:00.000Z</published>
    <updated>2017-06-12T12:26:30.976Z</updated>
    
    <content type="html"><![CDATA[<p>前端模块化这个概念自从去年开始一直出现在视野里，在某次面试的时候还被问傻眼了，但都整理这方面的知识，这一次决定彻底清楚。跑题了，回到正题。模块化是啥？简单来说，前端JS文件越来越多，而且相互之间还存在着依赖关系，利用模块化可以更好地管理和加载这些JS文件。<br><a id="more"></a></p>
<p>本文主要是对前端模块化common.js,AMD,CMD和模块加载器require.js,sea.js和webpack进行梳理。</p>
<h2 id="common-js-AMD-CMD"><a href="#common-js-AMD-CMD" class="headerlink" title="common.js,AMD,CMD"></a>common.js,AMD,CMD</h2><p> 这三个东西都是模块化的规范，主要规定怎么组织模块和如何引入模块，区别如下：</p>
<ul>
<li><p>common.js:common.js通过require同步加载所有模块，通过exports或module.exports来导出需要暴露的接口，服务器端的Node.js遵循这种规范。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="built_in">require</span>(<span class="string">"module"</span>);</div><div class="line"><span class="built_in">require</span>(<span class="string">"../file.js"</span>);</div><div class="line">exports.doStuff = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line"><span class="built_in">module</span>.exports = someValue;</div></pre></td></tr></table></figure>
</li>
<li><p>AMD:服务器端的资源都是在本地磁盘，使用同步加载没有什么问题，但是浏览器不能这样，假如文件过大，会一直处于加载状态，浏览器进入“假死”状态。所以就出现了AMD这种适用于浏览器端的异步加载的模块化标准，require.js这个模块加载器就是这种规范的实现。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">define(<span class="string">"module"</span>, [<span class="string">"dep1"</span>, <span class="string">"dep2"</span>], <span class="function"><span class="keyword">function</span>(<span class="params">d1, d2</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> someExportedValue;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">require</span>([<span class="string">"module"</span>, <span class="string">"../file"</span>], <span class="function"><span class="keyword">function</span>(<span class="params">module, file</span>) </span>&#123; <span class="comment">/* ... */</span> &#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>CMD：与AMD一样，CMD也是一个用于浏览器的模块加载器，不同之处在于，AMD会一口气把需要的模块加载出来，而CMD则是用到时再加载。同时呢，CMD与common.js的规范保持很大的兼容，sea.js这种模块加载器就是这种规范的实现。<figure class="highlight lasso"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">define</span></span>(function(<span class="keyword">require</span>, exports, module) &#123;</div><div class="line">  <span class="built_in">var</span> $ = <span class="keyword">require</span>(<span class="string">'jquery'</span>);</div><div class="line">  <span class="built_in">var</span> Spinning = <span class="keyword">require</span>(<span class="string">'./spinning'</span>);</div><div class="line">  exports.doSomething = <span class="params">...</span></div><div class="line">  module.exports = <span class="params">...</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="require-js，sea-js与webpack"><a href="#require-js，sea-js与webpack" class="headerlink" title="require.js，sea.js与webpack"></a>require.js，sea.js与webpack</h2><p>如上面所言，require.js与sea.js是模块加载器，webpack相比较下，更像是模块加载器+gulp/grunt，同时更具备多种优点，例如可以对图片、css进行打包、兼容AMD、CMD、common.js、ES6格式的模块，通过强大的插件系统更能实现各种强大的功能。</p>
<p>webpacke重要的两个组成——loader和插件，loader更针对某一类型文件，插件更像是在整个打包过程起作用。详细学习webpack，可以看 <a href="https://github.com/Kerita/webpack-tutorial" target="_blank" rel="external">https://github.com/Kerita/webpack-tutorial</a></p>
<ul>
<li><p>loader: 用于加载各种文件——css,less,vue,jsx，图片等</p>
</li>
<li><p>插件：开启服务器、实现热加载等功能。</p>
</li>
</ul>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>common.js,AMD,CMD是模块化规范，require.js,sea.js,webpack模块加载器，现在比较流行是使用webpack构建项目，React和Vue.js官方脚手架都是采用这种方式。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前端模块化这个概念自从去年开始一直出现在视野里，在某次面试的时候还被问傻眼了，但都整理这方面的知识，这一次决定彻底清楚。跑题了，回到正题。模块化是啥？简单来说，前端JS文件越来越多，而且相互之间还存在着依赖关系，利用模块化可以更好地管理和加载这些JS文件。&lt;br&gt;
    
    </summary>
    
      <category term="前端开发" scheme="https://kerita.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="模块化" scheme="https://kerita.github.io/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>2017年度计划</title>
    <link href="https://kerita.github.io/2017/04/01/2017-plan/"/>
    <id>https://kerita.github.io/2017/04/01/2017-plan/</id>
    <published>2017-03-31T16:00:00.000Z</published>
    <updated>2017-06-14T13:21:29.398Z</updated>
    
    <content type="html"><![CDATA[<p>2017年1月1日晚上写完年度总结后，一个错觉一直萦绕在我的脑海——我已经写2017年度计划了。其实并没有，我只是在2016年度的总结里面提及在2017年至少要阅读12本专业书籍，12本非专业书籍，其余的并没有计划。当今天我正式想把计划放到博客上的时候，才发现印象笔记里面空空如也、一无所有。</p>
<a id="more"></a>
<h2 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h2><p>几个月的实习经历，发现自己技术方面有且不仅有以下不足：</p>
<ul>
<li>CSS理解不够深刻，实际使用也少，且无法灵活运用</li>
<li>没有比较良好的编程习惯，体现在JS编程上</li>
<li>对Vue.js、Node.js了解不够深入</li>
<li>对React、angular没有了解</li>
</ul>
<h3 id="专业书籍列表"><a href="#专业书籍列表" class="headerlink" title="专业书籍列表"></a>专业书籍列表</h3><ul>
<li>《JavaScript语言精粹》</li>
<li>《JavaScript面向对象编程指南》</li>
<li>《精通CSS》<em>**</em></li>
<li>《CSS实用指南》</li>
<li>《图解CSS3》</li>
<li>《锋利的jquery》</li>
<li>《jQuery cookbook》</li>
<li>《JavaScript高级程序设计》</li>
<li>《ECMAScript6入门》</li>
<li>《深入浅出Node.js》</li>
</ul>
<h3 id="非专业书籍"><a href="#非专业书籍" class="headerlink" title="非专业书籍"></a>非专业书籍</h3><ul>
<li>《软技能——代码之外的生存之道》</li>
<li>《少有人走的路》</li>
<li>《极简欧洲史》</li>
<li>《穷爸爸富爸爸》</li>
</ul>
<h2 id="健身"><a href="#健身" class="headerlink" title="健身"></a>健身</h2><ul>
<li>一周至少五天做Keep</li>
<li>一周至少打一次羽毛球</li>
<li>是否办健身卡，正式入职后决定</li>
</ul>
<h2 id="电影（包括美剧、动漫等方面）"><a href="#电影（包括美剧、动漫等方面）" class="headerlink" title="电影（包括美剧、动漫等方面）"></a>电影（包括美剧、动漫等方面）</h2><p>减少花在电影、美剧、动漫、赛事直播的时间，在非规定时间如果有观看这些视频的想法了，拿起kindle阅读或者编程。</p>
<ul>
<li>一周最多只能看一部电影</li>
<li>美剧现在只追TBBT一部</li>
<li>《秦时明月》可以弃坑</li>
</ul>
<h2 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h2><ul>
<li>对于英语学习现在没有很好的规划，但至少要每天扇贝打50个单词</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2017年1月1日晚上写完年度总结后，一个错觉一直萦绕在我的脑海——我已经写2017年度计划了。其实并没有，我只是在2016年度的总结里面提及在2017年至少要阅读12本专业书籍，12本非专业书籍，其余的并没有计划。当今天我正式想把计划放到博客上的时候，才发现印象笔记里面空空如也、一无所有。&lt;/p&gt;
    
    </summary>
    
      <category term="年度计划" scheme="https://kerita.github.io/categories/%E5%B9%B4%E5%BA%A6%E8%AE%A1%E5%88%92/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://kerita.github.io/2017/01/22/hello-world/"/>
    <id>https://kerita.github.io/2017/01/22/hello-world/</id>
    <published>2017-01-21T16:00:00.000Z</published>
    <updated>2017-06-12T12:26:30.977Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
